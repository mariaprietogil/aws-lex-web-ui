{
  "Resources": {
    "PreUpgradeExport": {
      "Type": "Custom::PreUpgradeExport",
      "Properties": {
        "ServiceToken": {"Fn::GetAtt": ["CFNLambda", "Arn"]},
        "bucket": {"Ref": "ExportBucket"},
        "id": "ExportAll_QnABot_v4.3.2.json",
        "index": {"Fn::Sub": "${Var.QnaIndex}"},
        "encryption": {"Ref": "Encryption"}
      }
    },
    "PreUpgradeExportMetrics": {
      "Type": "Custom::PreUpgradeExport",
      "Properties": {
        "ServiceToken": {"Fn::GetAtt": ["CFNLambda", "Arn"]},
        "bucket": {"Ref": "ExportBucket"},
        "id": "ExportAll_QnABot_v4.3.2_metrics.json",
        "index": {"Fn::Sub": "${Var.MetricsIndex}"},
        "encryption": {"Ref": "Encryption"}
      }
    },
    "PreUpgradeExportFeedback": {
      "Type": "Custom::PreUpgradeExport",
      "Properties": {
        "ServiceToken": {"Fn::GetAtt": ["CFNLambda", "Arn"]},
        "bucket": {"Ref": "ExportBucket"},
        "id": "ExportAll_QnABot_v4.3.2_feedback.json",
        "index": {"Fn::Sub": "${Var.FeedbackIndex}"},
        "encryption": {"Ref": "Encryption"}
      }
    },
    "AssetBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketEncryption": {
          "Fn::If": [
            "Encrypted",
            {
              "ServerSideEncryptionConfiguration": [
                {"ServerSideEncryptionByDefault": {"SSEAlgorithm": "AES256"}}
              ]
            },
            {"Ref": "AWS::NoValue"}
          ]
        }
      }
    },
    "AssetClear": {
      "Type": "Custom::S3Clear",
      "DependsOn": ["CFNInvokePolicy"],
      "Condition": "BuildExamples",
      "Properties": {
        "ServiceToken": {"Fn::GetAtt": ["CFNLambda", "Arn"]},
        "Bucket": {"Ref": "AssetBucket"}
      }
    },
    "AssetZipVersion": {
      "Condition": "BuildExamples",
      "Type": "Custom::S3Version",
      "Properties": {
        "ServiceToken": {"Fn::GetAtt": ["CFNLambda", "Arn"]},
        "Bucket": "aws-bigdata-blog",
        "Key": {"Fn::Join": ["", ["artifacts/aws-ai-qna-bot", "/assets.zip"]]},
        "BuildDate": "2020-11-09T02:53:31.018Z"
      }
    },
    "AssetUnzip": {
      "Type": "Custom::S3Unzip",
      "Condition": "BuildExamples",
      "DependsOn": ["AssetClear"],
      "Properties": {
        "ServiceToken": {"Fn::GetAtt": ["CFNLambda", "Arn"]},
        "SrcBucket": "aws-bigdata-blog",
        "Key": {"Fn::Join": ["", ["artifacts/aws-ai-qna-bot", "/assets.zip"]]},
        "DstBucket": {"Ref": "AssetBucket"},
        "version": {"Ref": "AssetZipVersion"}
      }
    },
    "ExportBucket": {
      "Type": "AWS::S3::Bucket",
      "DeletionPolicy" : "Retain",
      "Properties": {
        "LifecycleConfiguration": {
          "Rules": [
            {"NoncurrentVersionExpirationInDays": 1, "Status": "Enabled"},
            {
              "AbortIncompleteMultipartUpload": {"DaysAfterInitiation": 1},
              "Status": "Enabled"
            }
          ]
        },
        "VersioningConfiguration": {"Status": "Enabled"},
        "CorsConfiguration": {
          "CorsRules": [
            {
              "AllowedHeaders": ["*"],
              "AllowedMethods": ["GET"],
              "AllowedOrigins": ["*"]
            }
          ]
        },
        "BucketEncryption": {
          "Fn::If": [
            "Encrypted",
            {
              "ServerSideEncryptionConfiguration": [
                {"ServerSideEncryptionByDefault": {"SSEAlgorithm": "AES256"}}
              ]
            },
            {"Ref": "AWS::NoValue"}
          ]
        }
      }
    },
    "ImportBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "LifecycleConfiguration": {
          "Rules": [{"ExpirationInDays": 1, "Status": "Enabled"}]
        },
        "VersioningConfiguration": {"Status": "Enabled"},
        "CorsConfiguration": {
          "CorsRules": [
            {
              "AllowedHeaders": ["*"],
              "AllowedMethods": ["PUT"],
              "AllowedOrigins": ["*"]
            }
          ]
        },
        "BucketEncryption": {
          "Fn::If": [
            "Encrypted",
            {
              "ServerSideEncryptionConfiguration": [
                {"ServerSideEncryptionByDefault": {"SSEAlgorithm": "AES256"}}
              ]
            },
            {"Ref": "AWS::NoValue"}
          ]
        }
      }
    },
    "TestAllBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "LifecycleConfiguration": {
          "Rules": [{"ExpirationInDays": 1, "Status": "Enabled"}]
        },
        "VersioningConfiguration": {"Status": "Enabled"},
        "CorsConfiguration": {
          "CorsRules": [
            {
              "AllowedHeaders": ["*"],
              "AllowedMethods": ["GET"],
              "AllowedOrigins": ["*"]
            }
          ]
        },
        "BucketEncryption": {
          "Fn::If": [
            "Encrypted",
            {
              "ServerSideEncryptionConfiguration": [
                {"ServerSideEncryptionByDefault": {"SSEAlgorithm": "AES256"}}
              ]
            },
            {"Ref": "AWS::NoValue"}
          ]
        }
      }
    },
    "VersionLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "var aws=require('aws-sdk')\naws.config.region=process.env.AWS_REGION\nvar s3=new aws.S3()\n\nexports.handler = function(event, context) {\n    console.log(JSON.stringify(event,null,2))\n    if(event.RequestType!==\"Delete\"){\n        s3.headObject({\n            Bucket:event.ResourceProperties.Bucket,\n            Key:event.ResourceProperties.Key\n        }).promise()\n        .then(result=>send(event, context, SUCCESS,{\n            version:result.VersionId ? result.VersionId : 1\n        }))\n        .catch(x=>{\n            console.log(x)\n            send(event, context, FAILED)\n        })\n    }else{\n        send(event, context, SUCCESS)\n    }\n}\n\n\nconst SUCCESS = \"SUCCESS\";\nconst FAILED = \"FAILED\";\n\nfunction send(event, context, responseStatus, responseData, physicalResourceId, noEcho) {\n\n    var responseBody = JSON.stringify({\n        Status: responseStatus,\n        Reason: \"See the details in CloudWatch Log Stream: \" + context.logStreamName,\n        PhysicalResourceId: physicalResourceId || context.logStreamName,\n        StackId: event.StackId,\n        RequestId: event.RequestId,\n        LogicalResourceId: event.LogicalResourceId,\n        NoEcho: noEcho || false,\n        Data: responseData\n    });\n\n    console.log(\"Response body:\\n\", responseBody);\n\n    var https = require(\"https\");\n    var url = require(\"url\");\n\n    var parsedUrl = url.parse(event.ResponseURL);\n    var options = {\n        hostname: parsedUrl.hostname,\n        port: 443,\n        path: parsedUrl.path,\n        method: \"PUT\",\n        headers: {\n            \"content-type\": \"\",\n            \"content-length\": responseBody.length\n        }\n    };\n\n    var request = https.request(options, function(response) {\n        console.log(\"Status code: \" + response.statusCode);\n        console.log(\"Status message: \" + response.statusMessage);\n        context.done();\n    });\n\n    request.on(\"error\", function(error) {\n        console.log(\"send(..) failed executing https.request(..): \" + error);\n        context.done();\n    });\n\n    request.write(responseBody);\n    request.end();\n}\n"
        },
        "Handler": "index.handler",
        "MemorySize": "3008",
        "Role": {"Fn::GetAtt": ["CFNLambdaRole", "Arn"]},
        "Runtime": "nodejs10.x",
        "Timeout": 60,
        "Tags": [{"Key": "Type", "Value": "CustomResource"}]
      }
    },
    "CFNVersion": {
      "Type": "Custom::S3Version",
      "Properties": {
        "ServiceToken": {"Fn::GetAtt": ["VersionLambda", "Arn"]},
        "Bucket": "aws-bigdata-blog",
        "Key": {"Fn::Sub": "artifacts/aws-ai-qna-bot/lambda/cfn.zip"},
        "BuildDate": "2020-11-09T02:53:31.019Z"
      }
    },
    "CFNLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "aws-bigdata-blog",
          "S3Key": {
            "Fn::Join": ["", ["artifacts/aws-ai-qna-bot", "/lambda/cfn.zip"]]
          },
          "S3ObjectVersion": {"Fn::GetAtt": ["CFNVersion", "version"]}
        },
        "Handler": "index.handler",
        "MemorySize": "3008",
        "Role": {"Fn::GetAtt": ["CFNLambdaRole", "Arn"]},
        "Runtime": "nodejs10.x",
        "Timeout": 180,
        "Tags": [{"Key": "Type", "Value": "CustomResource"}]
      }
    },
    "CFNInvokePolicy": {
      "Type": "AWS::IAM::ManagedPolicy",
      "Properties": {
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": ["lambda:InvokeFunction"],
              "Resource": [{"Fn::GetAtt": ["CFNLambda", "Arn"]}]
            }
          ]
        },
        "Roles": [{"Ref": "CFNLambdaRole"}]
      }
    },
    "CognitoDomain": {
      "Type": "Custom::CognitoDomain",
      "Properties": {
        "ServiceToken": {"Fn::GetAtt": ["CFNLambda", "Arn"]},
        "UserPool": {"Ref": "UserPool"}
      }
    },
    "CognitoLoginClient": {
      "Type": "Custom::CognitoLogin",
      "Properties": {
        "ServiceToken": {"Fn::GetAtt": ["CFNLambda", "Arn"]},
        "UserPool": {"Ref": "UserPool"},
        "ClientId": {"Ref": "ClientClient"},
        "LoginCallbackUrls": [{"Fn::GetAtt": ["Urls", "Client"]}],
        "CSS": ".logo-customizable{max-width:60%;max-height:30%}.banner-customizable{padding:25px 0px 25px 0px;background-color:lightgray}.label-customizable{font-weight:410}.textDescription-customizable{padding-top:10px;padding-bottom:10px;display:block;font-size:16px}.idpDescription-customizable{padding-top:10px;padding-bottom:10px;display:block;font-size:16px}.legalText-customizable{color:#747474;font-size:11px}.submitButton-customizable{font-size:14px;font-weight:bold;margin:20px 0px 10px 0px;height:40px;width:100%;color:#fff;background-color:#337ab7}.submitButton-customizable:hover{color:#fff;background-color:#286090}.errorMessage-customizable{padding:5px;font-size:14px;width:100%;background:#F5F5F5;border:2px solid #D64958;color:#D64958}.inputField-customizable{width:100%;height:34px;color:#555;background-color:#fff;border:1px solid #ccc}.inputField-customizable:focus{border-color:#66afe9;outline:0}.idpButton-customizable{height:41px;width:100%;width:100%;text-align:center;margin-bottom:15px;color:#fff;background-color:#5bc0de;border-color:#46b8da}.idpButton-customizable:hover{color:#fff;background-color:#31b0d5}.socialButton-customizable{height:40px;text-align:left;width:100%;margin-bottom:15px}.redirect-customizable{text-align:center}.passwordCheck-notValid-customizable{color:#DF3312}.passwordCheck-valid-customizable{color:#19BF00}.background-customizable{background-color:#fff}\n"
      }
    },
    "CognitoLoginDesigner": {
      "Type": "Custom::CognitoLogin",
      "Properties": {
        "ServiceToken": {"Fn::GetAtt": ["CFNLambda", "Arn"]},
        "UserPool": {"Ref": "UserPool"},
        "ClientId": {"Ref": "ClientDesigner"},
        "LoginCallbackUrls": [{"Fn::GetAtt": ["Urls", "Designer"]}],
        "CSS": ".logo-customizable{max-width:60%;max-height:30%}.banner-customizable{padding:25px 0px 25px 0px;background-color:lightgray}.label-customizable{font-weight:410}.textDescription-customizable{padding-top:10px;padding-bottom:10px;display:block;font-size:16px}.idpDescription-customizable{padding-top:10px;padding-bottom:10px;display:block;font-size:16px}.legalText-customizable{color:#747474;font-size:11px}.submitButton-customizable{font-size:14px;font-weight:bold;margin:20px 0px 10px 0px;height:40px;width:100%;color:#fff;background-color:#337ab7}.submitButton-customizable:hover{color:#fff;background-color:#286090}.errorMessage-customizable{padding:5px;font-size:14px;width:100%;background:#F5F5F5;border:2px solid #D64958;color:#D64958}.inputField-customizable{width:100%;height:34px;color:#555;background-color:#fff;border:1px solid #ccc}.inputField-customizable:focus{border-color:#66afe9;outline:0}.idpButton-customizable{height:41px;width:100%;width:100%;text-align:center;margin-bottom:15px;color:#fff;background-color:#5bc0de;border-color:#46b8da}.idpButton-customizable:hover{color:#fff;background-color:#31b0d5}.socialButton-customizable{height:40px;text-align:left;width:100%;margin-bottom:15px}.redirect-customizable{display:none;text-align:center}.passwordCheck-notValid-customizable{color:#DF3312}.passwordCheck-valid-customizable{color:#19BF00}.background-customizable{background-color:#fff}\n"
      }
    },
    "DesignerLogin": {
      "Type": "Custom::CognitoUrl",
      "Properties": {
        "ServiceToken": {"Fn::GetAtt": ["CFNLambda", "Arn"]},
        "adad": "adaad",
        "ClientId": {"Ref": "ClientDesigner"},
        "Domain": {"Ref": "CognitoDomain"},
        "LoginRedirectUrl": {"Fn::GetAtt": ["Urls", "Designer"]},
        "response_type": "code"
      }
    },
    "ClientLogin": {
      "Type": "Custom::CognitoUrl",
      "Properties": {
        "ServiceToken": {"Fn::GetAtt": ["CFNLambda", "Arn"]},
        "ClientId": {"Ref": "ClientClient"},
        "Domain": {"Ref": "CognitoDomain"},
        "LoginRedirectUrl": {"Fn::GetAtt": ["Urls", "Client"]},
        "response_type": "token"
      }
    },
    "User": {
      "Type": "AWS::Cognito::UserPoolUser",
      "DependsOn": [
        "SignupPermision",
        "MessagePermision",
        "ElasticsearchDomainUpdate",
        "KibanaRoleAttachment",
        "RoleAttachment"
      ],
      "Properties": {
        "DesiredDeliveryMediums": ["EMAIL"],
        "UserAttributes": [{"Name": "email", "Value": {"Ref": "Email"}}],
        "Username": {"Ref": "Username"},
        "UserPoolId": {"Ref": "UserPool"}
      }
    },
    "UserToGroup": {
      "Type": "AWS::Cognito::UserPoolUserToGroupAttachment",
      "Properties": {
        "GroupName": {"Ref": "Admins"},
        "Username": {"Ref": "User"},
        "UserPoolId": {"Ref": "UserPool"}
      }
    },
    "IdPool": {
      "Type": "AWS::Cognito::IdentityPool",
      "Properties": {
        "IdentityPoolName": {
          "Fn::Join": ["-", ["QnaBotIdPool", {"Ref": "AWS::StackName"}]]
        },
        "AllowUnauthenticatedIdentities": true,
        "CognitoIdentityProviders": [
          {
            "ClientId": {"Ref": "ClientDesigner"},
            "ProviderName": {"Fn::GetAtt": ["UserPool", "ProviderName"]},
            "ServerSideTokenCheck": true
          },
          {
            "ClientId": {"Ref": "ClientClient"},
            "ProviderName": {"Fn::GetAtt": ["UserPool", "ProviderName"]},
            "ServerSideTokenCheck": true
          }
        ]
      }
    },
    "KibanaIdPool": {
      "Type": "AWS::Cognito::IdentityPool",
      "Properties": {
        "IdentityPoolName": {
          "Fn::Join": ["-", ["KibanaIdPool", {"Ref": "AWS::StackName"}]]
        },
        "AllowUnauthenticatedIdentities": false
      }
    },
    "KibanaRoleAttachment": {
      "Type": "Custom::CognitoRole",
      "Properties": {
        "ServiceToken": {"Fn::GetAtt": ["CFNLambda", "Arn"]},
        "IdentityPoolId": {"Ref": "KibanaIdPool"},
        "DomainName": {"Fn::GetAtt": ["ESVar", "ESDomain"]},
        "Roles": {
          "authenticated": {"Fn::GetAtt": ["UserRole", "Arn"]},
          "unauthenticated": {"Fn::GetAtt": ["UnauthenticatedRole", "Arn"]}
        },
        "RoleMappings": [
          {
            "ClientId": {"Fn::GetAtt": ["KibanaClient", "ClientId"]},
            "UserPool": {"Ref": "UserPool"},
            "Type": "Rules",
            "AmbiguousRoleResolution": "Deny",
            "RulesConfiguration": {
              "Rules": [
                {
                  "Claim": "cognito:groups",
                  "MatchType": "Contains",
                  "Value": "Admin",
                  "RoleARN": {"Fn::GetAtt": ["KibanaRole", "Arn"]}
                }
              ]
            }
          }
        ]
      }
    },
    "RoleAttachment": {
      "Type": "Custom::CognitoRole",
      "Properties": {
        "ServiceToken": {"Fn::GetAtt": ["CFNLambda", "Arn"]},
        "IdentityPoolId": {"Ref": "IdPool"},
        "Roles": {
          "authenticated": {"Fn::GetAtt": ["UserRole", "Arn"]},
          "unauthenticated": {"Fn::GetAtt": ["UnauthenticatedRole", "Arn"]}
        },
        "RoleMappings": [
          {
            "ClientId": {"Ref": "ClientClient"},
            "UserPool": {"Ref": "UserPool"},
            "Type": "Rules",
            "AmbiguousRoleResolution": "AuthenticatedRole",
            "RulesConfiguration": {
              "Rules": [
                {
                  "Claim": "cognito:groups",
                  "MatchType": "Contains",
                  "Value": "Admin",
                  "RoleARN": {"Fn::GetAtt": ["UserRole", "Arn"]}
                }
              ]
            }
          },
          {
            "ClientId": {"Ref": "ClientDesigner"},
            "UserPool": {"Ref": "UserPool"},
            "Type": "Rules",
            "AmbiguousRoleResolution": "Deny",
            "RulesConfiguration": {
              "Rules": [
                {
                  "Claim": "cognito:groups",
                  "MatchType": "Contains",
                  "Value": "Admin",
                  "RoleARN": {"Fn::GetAtt": ["AdminRole", "Arn"]}
                }
              ]
            }
          }
        ]
      }
    },
    "UserPool": {
      "Type": "AWS::Cognito::UserPool",
      "Properties": {
        "UserPoolName": {
          "Fn::Join": ["-", ["UserPool", {"Ref": "AWS::StackName"}]]
        },
        "AdminCreateUserConfig": {
          "AllowAdminCreateUserOnly": {"Fn::If": ["AdminSignUp", true, false]},
          "InviteMessageTemplate": {
            "EmailMessage": {
              "Fn::Sub": "<p>Hello {username},\n<p>Welcome to QnABot! Your temporary password is:\n<p>     {####}\n<p>\n<p>When the CloudFormation stack is COMPLETE, use the link below to log in to QnABot Content Designer, set your permanent password, and start building your bot!\n<p>     ${ApiUrl.Name}/pages/designer\n<p>\n<p>Good luck!\n<p>QnABot (www.amazon.com/qnabot)\n"
            },
            "EmailSubject": "Welcome to QnABot!"
          }
        },
        "AliasAttributes": ["email"],
        "AutoVerifiedAttributes": ["email"],
        "Schema": [
          {
            "Required": true,
            "Name": "email",
            "AttributeDataType": "String",
            "Mutable": true
          }
        ],
        "LambdaConfig": {
          "CustomMessage": {"Fn::GetAtt": ["MessageLambda", "Arn"]},
          "PreSignUp": {"Fn::GetAtt": ["SignupLambda", "Arn"]}
        }
      }
    },
    "KibanaClient": {
      "Type": "Custom::ESCognitoClient",
      "DependsOn": ["ElasticsearchDomainUpdate"],
      "Properties": {
        "ServiceToken": {"Fn::GetAtt": ["CFNLambda", "Arn"]},
        "UserPool": {"Ref": "UserPool"},
        "DomainName": {"Fn::GetAtt": ["ESVar", "ESDomain"]}
      }
    },
    "ClientDesigner": {
      "Type": "AWS::Cognito::UserPoolClient",
      "Properties": {
        "ClientName": {
          "Fn::Join": ["-", ["UserPool", {"Ref": "AWS::StackName"}, "designer"]]
        },
        "GenerateSecret": false,
        "UserPoolId": {"Ref": "UserPool"}
      }
    },
    "ClientClient": {
      "Type": "AWS::Cognito::UserPoolClient",
      "Properties": {
        "ClientName": {
          "Fn::Join": ["-", ["UserPool", {"Ref": "AWS::StackName"}, "client"]]
        },
        "GenerateSecret": false,
        "UserPoolId": {"Ref": "UserPool"}
      }
    },
    "Users": {
      "Type": "AWS::Cognito::UserPoolGroup",
      "Properties": {"GroupName": "Users", "UserPoolId": {"Ref": "UserPool"}}
    },
    "Admins": {
      "Type": "AWS::Cognito::UserPoolGroup",
      "Properties": {"GroupName": "Admins", "UserPoolId": {"Ref": "UserPool"}}
    },
    "DefaultUserPoolJwksUrl": {
      "Type": "AWS::SSM::Parameter",
      "Properties": {
        "Description": "Default QnABot Setting - DO NOT MODIFY",
        "Type": "String",
        "Value": {
          "Fn::Join": [
            "",
            [
              "https://cognito-idp.",
              {"Ref": "AWS::Region"},
              ".amazonaws.com/",
              {"Ref": "UserPool"},
              "/.well-known/jwks.json"
            ]
          ]
        }
      }
    },
    "DefaultQnABotSettings": {
      "Type": "AWS::SSM::Parameter",
      "Properties": {
        "Description": "Default QnABot Settings - DO NOT MODIFY",
        "Type": "String",
        "Value": "{\"ENABLE_DEBUG_RESPONSES\":\"false\",\"ES_USE_KEYWORD_FILTERS\":\"true\",\"ES_KEYWORD_SYNTAX_TYPES\":\"NOUN,PROPN,VERB,INTJ\",\"ES_SYNTAX_CONFIDENCE_LIMIT\":\".20\",\"ES_MINIMUM_SHOULD_MATCH\":\"2<75%\",\"ES_NO_HITS_QUESTION\":\"no_hits\",\"ES_USE_FUZZY_MATCH\":\"false\",\"ES_PHRASE_BOOST\":\"4\",\"ES_SCORE_ANSWER_FIELD\":\"false\",\"ENABLE_SENTIMENT_SUPPORT\":\"true\",\"ENABLE_MULTI_LANGUAGE_SUPPORT\":\"false\",\"MINIMUM_CONFIDENCE_SCORE\":0.6,\"ALT_SEARCH_KENDRA_INDEXES\":[],\"ALT_SEARCH_KENDRA_S3_SIGNED_URLS\":\"false\",\"ALT_SEARCH_KENDRA_S3_SIGNED_URL_EXPIRE_SECS\":300,\"ALT_SEARCH_KENDRA_MAX_DOCUMENT_COUNT\":2,\"KENDRA_FAQ_INDEX\":\"\",\"KENDRA_FAQ_CONFIG_MAX_RETRIES\":8,\"KENDRA_FAQ_CONFIG_RETRY_DELAY\":600,\"KENDRA_FAQ_ES_FALLBACK\":\"true\",\"ERRORMESSAGE\":\"Unfortunately I encountered an error when searching for your answer. Please ask me again later.\",\"EMPTYMESSAGE\":\"You stumped me! Sadly I don't know how to answer your question.\",\"DEFAULT_ALEXA_LAUNCH_MESSAGE\":\"Hello, Please ask a question\",\"DEFAULT_ALEXA_STOP_MESSAGE\":\"Goodbye\",\"SMS_HINT_REMINDER_ENABLE\":\"true\",\"SMS_HINT_REMINDER\":\" (Feedback? Reply THUMBS UP or THUMBS DOWN. Ask HELP ME at any time)\",\"SMS_HINT_REMINDER_INTERVAL_HRS\":\"24\",\"IDENTITY_PROVIDER_JWKS_URLS\":[],\"ENFORCE_VERIFIED_IDENTITY\":\"false\",\"NO_VERIFIED_IDENTITY_QUESTION\":\"no_verified_identity\",\"ELICIT_RESPONSE_MAX_RETRIES\":3,\"ELICIT_RESPONSE_RETRY_MESSAGE\":\"Please try again?\",\"ELICIT_RESPONSE_BOT_FAILURE_MESSAGE\":\"Your response was not understood. Please start again.\",\"ELICIT_RESPONSE_DEFAULT_MSG\":\"Ok. \",\"CONNECT_IGNORE_WORDS\":\"\",\"CONNECT_ENABLE_VOICE_RESPONSE_INTERRUPT\":\"false\",\"CONNECT_NEXT_PROMPT_VARNAME\":\"connect_nextPrompt\",\"ENABLE_REDACTING\":\"false\",\"REDACTING_REGEX\":\"\\\\b\\\\d{4}\\\\b(?![-])|\\\\b\\\\d{9}\\\\b|\\\\b\\\\d{3}-\\\\d{2}-\\\\d{4}\\\\b\"}"
      }
    },
    "CustomQnABotSettings": {
      "Type": "AWS::SSM::Parameter",
      "Properties": {
        "Description": "Custom QnABot Settings - Modify to override defaults, or to add new settings",
        "Type": "String",
        "Value": "{}"
      }
    },
    "UsersTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "BillingMode": "PAY_PER_REQUEST",
        "AttributeDefinitions": [
          {"AttributeName": "UserId", "AttributeType": "S"}
        ],
        "KeySchema": [{"AttributeName": "UserId", "KeyType": "HASH"}]
      }
    },
    "ElasticsearchDomain": {
      "Type": "AWS::Elasticsearch::Domain",
      "DependsOn": ["PreUpgradeExport"],
      "Condition": "CreateDomain",
      "Properties": {
        "ElasticsearchClusterConfig": {
          "DedicatedMasterEnabled": false,
          "InstanceCount": {"Ref": "ElasticSearchNodeCount"},
          "InstanceType": {
            "Fn::If": [
              "Encrypted",
              "c5.large.elasticsearch",
              "t2.small.elasticsearch"
            ]
          },
          "ZoneAwarenessEnabled": "true"
        },
        "EBSOptions": {
          "EBSEnabled": true,
          "VolumeSize": 10,
          "VolumeType": "gp2"
        },
        "ElasticsearchVersion": "7.7",
        "SnapshotOptions": {"AutomatedSnapshotStartHour": "0"},
        "AdvancedOptions": {"rest.action.multi.allow_explicit_index": "true"},
        "EncryptionAtRestOptions": {
          "Enabled": {"Fn::If": ["Encrypted", true, false]}
        },
        "NodeToNodeEncryptionOptions": {
          "Enabled": {"Fn::If": ["Encrypted", true, false]}
        },
        "DomainEndpointOptions": {
          "EnforceHTTPS": {"Fn::If": ["Encrypted", true, false]}
        }
      }
    },
    "ElasticsearchDomainUpdate": {
      "Type": "Custom::ElasticSearchUpdate",
      "DependsOn": ["CognitoDomain"],
      "Properties": {
        "ServiceToken": {"Fn::GetAtt": ["CFNLambda", "Arn"]},
        "DomainName": {"Fn::GetAtt": ["ESVar", "ESDomain"]},
        "CognitoOptions": {
          "Enabled": true,
          "IdentityPoolId": {"Ref": "KibanaIdPool"},
          "RoleArn": {"Fn::GetAtt": ["ESCognitoRole", "Arn"]},
          "UserPoolId": {"Ref": "UserPool"}
        },
        "AccessPolicies": {
          "Fn::Sub": "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Sid\":\"CognitoAuth\",\"Principal\":{\"AWS\":\"${KibanaRole.Arn}\"},\"Effect\":\"Allow\",\"Action\":\"es:ESHttp*\",\"Resource\":\"${ESVar.ESArn}/*\"}]}"
        }
      }
    },
    "ESCognitoRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {"Service": "es.amazonaws.com"},
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Path": "/",
        "ManagedPolicyArns": ["arn:aws:iam::aws:policy/AmazonESCognitoAccess"]
      }
    },
    "ESInfo": {
      "Type": "Custom::ESProxy",
      "Condition": "DontCreateDomain",
      "Properties": {
        "ServiceToken": {"Fn::GetAtt": ["ESProxyLambda", "Arn"]},
        "name": "EMPTY"
      }
    },
    "ESInfoLambda": {
      "Type": "AWS::Lambda::Function",
      "Condition": "DontCreateDomain",
      "Properties": {
        "Code": {
          "ZipFile": "var aws=require('aws-sdk')\naws.config.region=process.env.AWS_REGION\nvar es=new aws.ES()\n\nexports.handler = function(event, context) {\n    console.log(JSON.stringify(event,null,2))\n\n    if(event.RequestType!==\"Delete\"){\n        es.describeElasticsearchDomain({\n            DomainName:event.ResourceProperties.name\n        }).promise()\n        .then(info=>{\n            send(event, context, SUCCESS,{\n                Name:DomainStatus.DomainName,\n                Arn:DomainStatus.ARN,\n                Endpoint:DomainStatus.Endpoints\n            })\n        })\n        .catch(x=>{\n            console.log(x)\n            send(event, context, FAILED)\n        })\n       \n    }else{\n        send(event, context, SUCCESS)\n    }\n}\n\n\nconst SUCCESS = \"SUCCESS\";\nconst FAILED = \"FAILED\";\n\nfunction send(event, context, responseStatus, responseData, physicalResourceId, noEcho) {\n\n    var responseBody = JSON.stringify({\n        Status: responseStatus,\n        Reason: \"See the details in CloudWatch Log Stream: \" + context.logStreamName,\n        PhysicalResourceId: physicalResourceId || context.logStreamName,\n        StackId: event.StackId,\n        RequestId: event.RequestId,\n        LogicalResourceId: event.LogicalResourceId,\n        NoEcho: noEcho || false,\n        Data: responseData\n    });\n\n    console.log(\"Response body:\\n\", responseBody);\n\n    var https = require(\"https\");\n    var url = require(\"url\");\n\n    var parsedUrl = url.parse(event.ResponseURL);\n    var options = {\n        hostname: parsedUrl.hostname,\n        port: 443,\n        path: parsedUrl.path,\n        method: \"PUT\",\n        headers: {\n            \"content-type\": \"\",\n            \"content-length\": responseBody.length\n        }\n    };\n\n    var request = https.request(options, function(response) {\n        console.log(\"Status code: \" + response.statusCode);\n        console.log(\"Status message: \" + response.statusMessage);\n        context.done();\n    });\n\n    request.on(\"error\", function(error) {\n        console.log(\"send(..) failed executing https.request(..): \" + error);\n        context.done();\n    });\n\n    request.write(responseBody);\n    request.end();\n}\n"
        },
        "Handler": "index.handler",
        "MemorySize": "128",
        "Role": {"Fn::GetAtt": ["ESProxyLambdaRole", "Arn"]},
        "Runtime": "nodejs10.x",
        "Timeout": 300,
        "Tags": [{"Key": "Type", "Value": "CustomResource"}]
      }
    },
    "FeedbackFirehose": {
      "Type": "AWS::KinesisFirehose::DeliveryStream",
      "Properties": {
        "DeliveryStreamType": "DirectPut",
        "ElasticsearchDestinationConfiguration": {
          "BufferingHints": {"IntervalInSeconds": 60, "SizeInMBs": 5},
          "DomainARN": {"Fn::GetAtt": ["ESVar", "ESArn"]},
          "IndexName": {"Fn::Sub": "${Var.FeedbackIndex}"},
          "IndexRotationPeriod": "NoRotation",
          "RetryOptions": {"DurationInSeconds": 300},
          "RoleARN": {"Fn::GetAtt": ["FirehoseESS3Role", "Arn"]},
          "S3BackupMode": "AllDocuments",
          "S3Configuration": {
            "BucketARN": {"Fn::GetAtt": ["MetricsBucket", "Arn"]},
            "BufferingHints": {"IntervalInSeconds": 60, "SizeInMBs": 5},
            "Prefix": "feedback/",
            "CompressionFormat": "UNCOMPRESSED",
            "RoleARN": {"Fn::GetAtt": ["FirehoseESS3Role", "Arn"]}
          },
          "TypeName": ""
        }
      }
    },
    "GeneralFirehose": {
      "Type": "AWS::KinesisFirehose::DeliveryStream",
      "Properties": {
        "DeliveryStreamType": "DirectPut",
        "ElasticsearchDestinationConfiguration": {
          "BufferingHints": {"IntervalInSeconds": 60, "SizeInMBs": 5},
          "DomainARN": {"Fn::GetAtt": ["ESVar", "ESArn"]},
          "IndexName": {"Fn::Sub": "${Var.MetricsIndex}"},
          "IndexRotationPeriod": "NoRotation",
          "RetryOptions": {"DurationInSeconds": 300},
          "RoleARN": {"Fn::GetAtt": ["FirehoseESS3Role", "Arn"]},
          "S3BackupMode": "AllDocuments",
          "S3Configuration": {
            "BucketARN": {"Fn::GetAtt": ["MetricsBucket", "Arn"]},
            "Prefix": "metrics/",
            "BufferingHints": {"IntervalInSeconds": 60, "SizeInMBs": 5},
            "CompressionFormat": "UNCOMPRESSED",
            "RoleARN": {"Fn::GetAtt": ["FirehoseESS3Role", "Arn"]}
          },
          "TypeName": ""
        }
      }
    },
    "MetricsBucket": {
      "Type": "AWS::S3::Bucket",
      "DeletionPolicy": "Delete",
      "Properties": {
        "BucketEncryption": {
          "Fn::If": [
            "Encrypted",
            {
              "ServerSideEncryptionConfiguration": [
                {"ServerSideEncryptionByDefault": {"SSEAlgorithm": "AES256"}}
              ]
            },
            {"Ref": "AWS::NoValue"}
          ]
        },
        "Tags": [{"Key": "Use", "Value": "Metrics"}]
      }
    },
    "MetricsBucketClear": {
      "Type": "Custom::S3Clear",
      "DependsOn": ["CFNInvokePolicy"],
      "Properties": {
        "ServiceToken": {"Fn::GetAtt": ["CFNLambda", "Arn"]},
        "Bucket": {"Ref": "MetricsBucket"}
      }
    },
    "FirehoseESS3Role": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {"Service": "firehose.amazonaws.com"},
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Sid": "",
                  "Effect": "Allow",
                  "Action": [
                    "s3:AbortMultipartUpload",
                    "s3:GetBucketLocation",
                    "s3:GetObject",
                    "s3:ListBucket",
                    "s3:ListBucketMultipartUploads",
                    "s3:PutObject"
                  ],
                  "Resource": [
                    {"Fn::GetAtt": ["MetricsBucket", "Arn"]},
                    {
                      "Fn::Join": [
                        "",
                        [{"Fn::GetAtt": ["MetricsBucket", "Arn"]}, "/*"]
                      ]
                    }
                  ]
                },
                {
                  "Sid": "",
                  "Effect": "Allow",
                  "Action": [
                    "lambda:InvokeFunction",
                    "lambda:GetFunctionConfiguration"
                  ],
                  "Resource": [
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:lambda:",
                          {"Ref": "AWS::Region"},
                          ":",
                          {"Ref": "AWS::AccountId"},
                          ":function:%FIREHOSE_DEFAULT_FUNCTION%:%FIREHOSE_DEFAULT_VERSION%"
                        ]
                      ]
                    }
                  ]
                },
                {
                  "Sid": "",
                  "Effect": "Allow",
                  "Action": [
                    "es:DescribeElasticsearchDomain",
                    "es:DescribeElasticsearchDomains",
                    "es:DescribeElasticsearchDomainConfig",
                    "es:ESHttpPost",
                    "es:ESHttpPut",
                    "es:ESHttpGet"
                  ],
                  "Resource": [
                    {"Fn::GetAtt": ["ESVar", "ESArn"]},
                    {
                      "Fn::Join": [
                        "",
                        [{"Fn::GetAtt": ["ESVar", "ESArn"]}, "/*"]
                      ]
                    }
                  ]
                },
                {
                  "Sid": "",
                  "Effect": "Allow",
                  "Action": ["logs:PutLogEvents"],
                  "Resource": [
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:logs:",
                          {"Ref": "AWS::Region"},
                          ":",
                          {"Ref": "AWS::AccountId"},
                          ":log-group:/aws/kinesisfirehose/*"
                        ]
                      ]
                    }
                  ]
                }
              ]
            },
            "PolicyName": "QnAFirehose"
          }
        ]
      }
    },
    "ESCFNProxyLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "aws-bigdata-blog",
          "S3Key": {"Fn::Sub": "artifacts/aws-ai-qna-bot/lambda/proxy-es.zip"},
          "S3ObjectVersion": {"Ref": "ESProxyCodeVersion"}
        },
        "Environment": {
          "Variables": {
            "DEFAULT_SETTINGS_PARAM": {"Ref": "DefaultQnABotSettings"},
            "CUSTOM_SETTINGS_PARAM": {"Ref": "CustomQnABotSettings"}
          }
        },
        "Handler": "index.resource",
        "MemorySize": "1408",
        "Role": {"Fn::GetAtt": ["ESProxyLambdaRole", "Arn"]},
        "Runtime": "nodejs10.x",
        "Timeout": 300,
        "Tags": [{"Key": "Type", "Value": "CustomResource"}]
      }
    },
    "MetricsIndex": {
      "Type": "Custom::ESProxy",
      "Properties": {
        "ServiceToken": {"Fn::GetAtt": ["ESCFNProxyLambda", "Arn"]},
        "create": {
          "index": {"Fn::Sub": "${Var.MetricsIndex}"},
          "endpoint": {"Fn::GetAtt": ["ESVar", "ESAddress"]},
          "body": {"Fn::Sub": "{\"settings\":{}}"}
        }
      }
    },
    "FeedbackIndex": {
      "Type": "Custom::ESProxy",
      "Properties": {
        "ServiceToken": {"Fn::GetAtt": ["ESCFNProxyLambda", "Arn"]},
        "create": {
          "index": {"Fn::Sub": "${Var.FeedbackIndex}"},
          "endpoint": {"Fn::GetAtt": ["ESVar", "ESAddress"]},
          "body": {"Fn::Sub": "{\"settings\":{}}"}
        }
      }
    },
    "Index": {
      "Type": "Custom::ESProxy",
      "Properties": {
        "ServiceToken": {"Fn::GetAtt": ["ESCFNProxyLambda", "Arn"]},
        "create": {
          "index": {"Fn::Sub": "${Var.QnaIndex}"},
          "endpoint": {"Fn::GetAtt": ["ESVar", "ESAddress"]},
          "body": {
            "Fn::Sub": "{\"settings\":{\"analysis\":{\"filter\":{\"english_stop\":{\"type\":\"stop\",\"stopwords\":[\"a\",\"an\",\"and\",\"are\",\"as\",\"at\",\"be\",\"but\",\"by\",\"for\",\"if\",\"in\",\"into\",\"is\",\"it\",\"not\",\"of\",\"on\",\"or\",\"such\",\"that\",\"the\",\"their\",\"then\",\"there\",\"these\",\"they\",\"this\",\"to\",\"was\",\"will\",\"with\"]},\"english_keywords\":{\"type\":\"keyword_marker\",\"keywords\":[\"example\"]},\"english_stemmer\":{\"type\":\"stemmer\",\"language\":\"english\"},\"english_possessive_stemmer\":{\"type\":\"stemmer\",\"language\":\"possessive_english\"}},\"analyzer\":{\"custom_english\":{\"type\":\"custom\",\"tokenizer\":\"standard\",\"filter\":[\"english_possessive_stemmer\",\"lowercase\",\"english_stop\",\"english_keywords\",\"english_stemmer\"]},\"custom_english_unique\":{\"type\":\"custom\",\"tokenizer\":\"standard\",\"filter\":[\"english_possessive_stemmer\",\"lowercase\",\"english_stop\",\"english_keywords\",\"english_stemmer\",\"unique\"]}}}},\"mappings\":{\"properties\":{\"qid\":{\"type\":\"keyword\"},\"quniqueterms\":{\"type\":\"text\",\"analyzer\":\"custom_english_unique\"},\"questions\":{\"type\":\"nested\",\"properties\":{\"q\":{\"type\":\"text\",\"analyzer\":\"custom_english\"}}},\"a\":{\"type\":\"text\",\"analyzer\":\"custom_english\"},\"t\":{\"type\":\"text\",\"analyzer\":\"whitespace\"},\"r\":{\"properties\":{\"imageUrl\":{\"type\":\"keyword\"},\"title\":{\"type\":\"text\"}}},\"l\":{\"type\":\"keyword\"},\"question\":{\"type\":\"text\",\"analyzer\":\"custom_english\"},\"incorrectAnswers\":{\"type\":\"text\",\"analyzer\":\"custom_english\"},\"correctAnswers\":{\"type\":\"text\",\"analyzer\":\"custom_english\"}}}}"
          }
        }
      }
    },
    "KibanaDashboards": {
      "Type": "Custom::ESProxy",
      "DependsOn": ["Index"],
      "Properties": {
        "ServiceToken": {"Fn::GetAtt": ["ESCFNProxyLambda", "Arn"]},
        "create": {
          "endpoint": {"Fn::GetAtt": ["ESVar", "ESAddress"]},
          "path": "/_plugin/kibana/api/kibana/dashboards/import",
          "method": "POST",
          "headers": {"kbn-xsrf": "kibana"},
          "body": {
            "version": "7.7.0",
            "objects": [
              {
                "id": "052b1350-a37d-11ea-8370-0f1df276cae1",
                "type": "dashboard",
                "updated_at": "2020-08-21T23:30:32.252Z",
                "version": "WzM2LDFd",
                "attributes": {
                  "description": "Visualize QnABot usage, see what your users are asking, and use the \"No Hits\" and \"Feedback\" charts to assess where you should add or tune QnABot content to make the bot smarter. ",
                  "hits": "0",
                  "kibanaSavedObjectMeta": {
                    "searchSourceJSON": "{\"query\":{\"language\":\"kuery\",\"query\":\"\"},\"filter\":[]}"
                  },
                  "optionsJSON": "{\"hidePanelTitles\":false,\"useMargins\":true}",
                  "panelsJSON": "[{\"version\":\"7.7.0\",\"gridData\":{\"h\":15,\"i\":\"fb115451-3b8a-436f-b916-8a04db4e9d70\",\"w\":17,\"x\":0,\"y\":0},\"panelIndex\":\"fb115451-3b8a-436f-b916-8a04db4e9d70\",\"embeddableConfig\":{\"vis\":{\"legendOpen\":true},\"legendOpen\":false},\"panelRefName\":\"panel_0\"},{\"version\":\"7.7.0\",\"gridData\":{\"h\":15,\"i\":\"5e25d094-b045-4afe-953d-2d619b05b716\",\"w\":14,\"x\":34,\"y\":0},\"panelIndex\":\"5e25d094-b045-4afe-953d-2d619b05b716\",\"embeddableConfig\":{},\"panelRefName\":\"panel_1\"},{\"version\":\"7.7.0\",\"gridData\":{\"h\":15,\"i\":\"cf017f39-a5a3-4d3a-9561-862f4c2eb3c5\",\"w\":17,\"x\":17,\"y\":0},\"panelIndex\":\"cf017f39-a5a3-4d3a-9561-862f4c2eb3c5\",\"embeddableConfig\":{\"vis\":{\"legendOpen\":true},\"legendOpen\":false},\"panelRefName\":\"panel_2\"},{\"version\":\"7.7.0\",\"gridData\":{\"h\":15,\"i\":\"b9b730b1-b3de-42f9-a4de-69197d934a93\",\"w\":24,\"x\":0,\"y\":15},\"panelIndex\":\"b9b730b1-b3de-42f9-a4de-69197d934a93\",\"embeddableConfig\":{},\"panelRefName\":\"panel_3\"},{\"version\":\"7.7.0\",\"gridData\":{\"h\":15,\"i\":\"472ff8b6-83bf-4e4d-a8a5-44ce8f7e3dac\",\"w\":24,\"x\":24,\"y\":15},\"panelIndex\":\"472ff8b6-83bf-4e4d-a8a5-44ce8f7e3dac\",\"embeddableConfig\":{},\"panelRefName\":\"panel_4\"},{\"version\":\"7.7.0\",\"gridData\":{\"h\":15,\"i\":\"92e5cbb2-fa56-4f15-b7b1-72c11e0bebfc\",\"w\":24,\"x\":0,\"y\":30},\"panelIndex\":\"92e5cbb2-fa56-4f15-b7b1-72c11e0bebfc\",\"embeddableConfig\":{},\"panelRefName\":\"panel_5\"},{\"version\":\"7.7.0\",\"gridData\":{\"h\":15,\"i\":\"7ca7cdb0-2472-4eb0-bf7e-ae90f238f869\",\"w\":24,\"x\":24,\"y\":30},\"panelIndex\":\"7ca7cdb0-2472-4eb0-bf7e-ae90f238f869\",\"embeddableConfig\":{},\"panelRefName\":\"panel_6\"},{\"version\":\"7.7.0\",\"gridData\":{\"h\":8,\"i\":\"cba70b74-3264-4153-87d2-68c24b552efa\",\"w\":10,\"x\":0,\"y\":45},\"panelIndex\":\"cba70b74-3264-4153-87d2-68c24b552efa\",\"embeddableConfig\":{},\"panelRefName\":\"panel_7\"}]",
                  "refreshInterval": {"pause": true, "value": 0},
                  "timeFrom": "2020-08-18T15:44:48.334Z",
                  "timeRestore": "false",
                  "timeTo": "2020-08-18T15:59:17.582Z",
                  "title": "QnABot Dashboard",
                  "version": "1"
                },
                "references": [
                  {
                    "id": "a66d5ed0-a378-11ea-8370-0f1df276cae1",
                    "name": "panel_0",
                    "type": "visualization"
                  },
                  {
                    "id": "d905b930-a37a-11ea-a346-0f81312f0c3c",
                    "name": "panel_1",
                    "type": "visualization"
                  },
                  {
                    "id": "12d24870-e16c-11ea-b423-5f0e2ad2220e",
                    "name": "panel_2",
                    "type": "visualization"
                  },
                  {
                    "id": "68d7c450-a37a-11ea-8370-0f1df276cae1",
                    "name": "panel_3",
                    "type": "visualization"
                  },
                  {
                    "id": "d68ac390-a379-11ea-8370-0f1df276cae1",
                    "name": "panel_4",
                    "type": "visualization"
                  },
                  {
                    "id": "6759e170-a37b-11ea-8370-0f1df276cae1",
                    "name": "panel_5",
                    "type": "visualization"
                  },
                  {
                    "id": "985eb570-a37b-11ea-8370-0f1df276cae1",
                    "name": "panel_6",
                    "type": "visualization"
                  },
                  {
                    "id": "2031f610-a4c1-11ea-a012-c353d737e5ec",
                    "name": "panel_7",
                    "type": "visualization"
                  }
                ],
                "migrationVersion": {"dashboard": "7.3.0"}
              },
              {
                "id": "a66d5ed0-a378-11ea-8370-0f1df276cae1",
                "type": "visualization",
                "updated_at": "2020-08-21T23:30:32.252Z",
                "version": "WzI2LDFd",
                "attributes": {
                  "description": "",
                  "kibanaSavedObjectMeta": {
                    "searchSourceJSON": "{\"query\":{\"language\":\"kuery\",\"query\":\"\"},\"filter\":[],\"indexRefName\":\"kibanaSavedObjectMeta.searchSourceJSON.index\"}"
                  },
                  "title": "Requests",
                  "uiStateJSON": "{}",
                  "version": "1",
                  "visState": "{\"title\":\"Requests\",\"type\":\"histogram\",\"params\":{\"addLegend\":true,\"addTimeMarker\":false,\"addTooltip\":true,\"categoryAxes\":[{\"id\":\"CategoryAxis-1\",\"labels\":{\"filter\":true,\"show\":true,\"truncate\":100},\"position\":\"bottom\",\"scale\":{\"type\":\"linear\"},\"show\":true,\"style\":{},\"title\":{},\"type\":\"category\"}],\"dimensions\":{\"x\":{\"accessor\":0,\"format\":{\"id\":\"date\",\"params\":{\"pattern\":\"HH:mm:ss\"}},\"params\":{\"date\":true,\"interval\":\"PT30S\",\"format\":\"HH:mm:ss\",\"bounds\":{\"min\":\"2020-07-06T21:55:15.220Z\",\"max\":\"2020-07-06T22:25:15.220Z\"}},\"aggType\":\"date_histogram\"},\"y\":[{\"accessor\":1,\"format\":{\"id\":\"number\"},\"params\":{},\"aggType\":\"cardinality\"}]},\"grid\":{\"categoryLines\":false},\"labels\":{\"show\":false},\"legendPosition\":\"right\",\"seriesParams\":[{\"data\":{\"id\":\"1\",\"label\":\"Count\"},\"drawLinesBetweenPoints\":true,\"mode\":\"stacked\",\"show\":\"true\",\"showCircles\":true,\"type\":\"histogram\",\"valueAxis\":\"ValueAxis-1\"}],\"thresholdLine\":{\"color\":\"#34130C\",\"show\":false,\"style\":\"full\",\"value\":10,\"width\":1},\"times\":[],\"type\":\"histogram\",\"valueAxes\":[{\"id\":\"ValueAxis-1\",\"labels\":{\"filter\":false,\"rotate\":0,\"show\":true,\"truncate\":100},\"name\":\"LeftAxis-1\",\"position\":\"left\",\"scale\":{\"mode\":\"normal\",\"type\":\"linear\"},\"show\":true,\"style\":{},\"title\":{\"text\":\"Count\"},\"type\":\"value\"}]},\"aggs\":[{\"id\":\"1\",\"enabled\":true,\"type\":\"count\",\"schema\":\"metric\",\"params\":{}},{\"id\":\"2\",\"enabled\":true,\"type\":\"date_histogram\",\"schema\":\"segment\",\"params\":{\"field\":\"datetime\",\"timeRange\":{\"from\":\"now-30m\",\"to\":\"now\"},\"useNormalizedEsInterval\":true,\"interval\":\"auto\",\"drop_partials\":false,\"min_doc_count\":1,\"extended_bounds\":{},\"customLabel\":\"Requests\"}},{\"id\":\"3\",\"enabled\":true,\"type\":\"terms\",\"schema\":\"group\",\"params\":{\"field\":\"entireRequest.sentiment.keyword\",\"orderBy\":\"1\",\"order\":\"desc\",\"size\":5,\"otherBucket\":false,\"otherBucketLabel\":\"Other\",\"missingBucket\":false,\"missingBucketLabel\":\"Missing\",\"customLabel\":\"Sentiment\"}}]}"
                },
                "references": [
                  {
                    "id": "Metrics",
                    "name": "kibanaSavedObjectMeta.searchSourceJSON.index",
                    "type": "index-pattern"
                  }
                ],
                "migrationVersion": {"visualization": "7.7.0"}
              },
              {
                "id": "d905b930-a37a-11ea-a346-0f81312f0c3c",
                "type": "visualization",
                "updated_at": "2020-08-21T23:30:32.252Z",
                "version": "WzI3LDFd",
                "attributes": {
                  "description": "",
                  "kibanaSavedObjectMeta": {
                    "searchSourceJSON": "{\"query\":{\"query\":\"\",\"language\":\"kuery\"},\"filter\":[],\"indexRefName\":\"kibanaSavedObjectMeta.searchSourceJSON.index\"}"
                  },
                  "title": "Client Types",
                  "uiStateJSON": "{}",
                  "version": "1",
                  "visState": "{\"title\":\"Client Types\",\"type\":\"pie\",\"params\":{\"type\":\"pie\",\"addTooltip\":true,\"addLegend\":true,\"legendPosition\":\"right\",\"isDonut\":false,\"labels\":{\"show\":false,\"values\":true,\"last_level\":true,\"truncate\":100},\"dimensions\":{\"metric\":{\"accessor\":1,\"format\":{\"id\":\"number\"},\"params\":{},\"aggType\":\"count\"},\"buckets\":[{\"accessor\":0,\"format\":{\"id\":\"terms\",\"params\":{\"id\":\"string\",\"otherBucketLabel\":\"Other\",\"missingBucketLabel\":\"Missing\"}},\"params\":{},\"aggType\":\"terms\"}]}},\"aggs\":[{\"id\":\"1\",\"enabled\":true,\"type\":\"count\",\"schema\":\"metric\",\"params\":{}},{\"id\":\"2\",\"enabled\":true,\"type\":\"terms\",\"schema\":\"segment\",\"params\":{\"field\":\"clientType.keyword\",\"orderBy\":\"1\",\"order\":\"desc\",\"size\":5,\"otherBucket\":false,\"otherBucketLabel\":\"Other\",\"missingBucket\":false,\"missingBucketLabel\":\"Missing\",\"customLabel\":\"Client Types\"}}]}"
                },
                "references": [
                  {
                    "id": "Metrics",
                    "name": "kibanaSavedObjectMeta.searchSourceJSON.index",
                    "type": "index-pattern"
                  }
                ],
                "migrationVersion": {"visualization": "7.7.0"}
              },
              {
                "id": "12d24870-e16c-11ea-b423-5f0e2ad2220e",
                "type": "visualization",
                "updated_at": "2020-08-21T23:30:32.252Z",
                "version": "WzI4LDFd",
                "attributes": {
                  "description": "",
                  "kibanaSavedObjectMeta": {
                    "searchSourceJSON": "{\"query\":{\"language\":\"kuery\",\"query\":\"\"},\"filter\":[],\"indexRefName\":\"kibanaSavedObjectMeta.searchSourceJSON.index\"}"
                  },
                  "title": "Requests AnswerSource",
                  "uiStateJSON": "{}",
                  "version": "1",
                  "visState": "{\"type\":\"histogram\",\"aggs\":[{\"id\":\"1\",\"enabled\":true,\"type\":\"count\",\"schema\":\"metric\",\"params\":{}},{\"id\":\"2\",\"enabled\":true,\"type\":\"date_histogram\",\"schema\":\"segment\",\"params\":{\"field\":\"datetime\",\"timeRange\":{\"from\":\"2020-08-18T15:44:48.334Z\",\"to\":\"2020-08-18T15:59:17.582Z\"},\"useNormalizedEsInterval\":true,\"scaleMetricValues\":false,\"interval\":\"auto\",\"drop_partials\":false,\"min_doc_count\":1,\"extended_bounds\":{},\"customLabel\":\"Requests\"}},{\"id\":\"3\",\"enabled\":true,\"type\":\"terms\",\"schema\":\"group\",\"params\":{\"field\":\"entireResponse.answerSource.keyword\",\"orderBy\":\"1\",\"order\":\"desc\",\"size\":5,\"otherBucket\":false,\"otherBucketLabel\":\"Other\",\"missingBucket\":false,\"missingBucketLabel\":\"Missing\",\"customLabel\":\"Source\"}}],\"params\":{\"addLegend\":true,\"addTimeMarker\":false,\"addTooltip\":true,\"categoryAxes\":[{\"id\":\"CategoryAxis-1\",\"labels\":{\"filter\":true,\"show\":true,\"truncate\":100},\"position\":\"bottom\",\"scale\":{\"type\":\"linear\"},\"show\":true,\"style\":{},\"title\":{},\"type\":\"category\"}],\"dimensions\":{\"x\":{\"accessor\":0,\"aggType\":\"date_histogram\",\"format\":{\"id\":\"date\",\"params\":{\"pattern\":\"HH:mm:ss\"}},\"params\":{\"bounds\":{\"max\":\"2020-07-06T22:25:15.220Z\",\"min\":\"2020-07-06T21:55:15.220Z\"},\"date\":true,\"format\":\"HH:mm:ss\",\"interval\":\"PT30S\"}},\"y\":[{\"accessor\":1,\"aggType\":\"cardinality\",\"format\":{\"id\":\"number\"},\"params\":{}}]},\"grid\":{\"categoryLines\":false},\"labels\":{\"show\":false},\"legendPosition\":\"right\",\"seriesParams\":[{\"data\":{\"id\":\"1\",\"label\":\"Count\"},\"drawLinesBetweenPoints\":true,\"mode\":\"stacked\",\"show\":\"true\",\"showCircles\":true,\"type\":\"histogram\",\"valueAxis\":\"ValueAxis-1\"}],\"thresholdLine\":{\"color\":\"#34130C\",\"show\":false,\"style\":\"full\",\"value\":10,\"width\":1},\"times\":[],\"type\":\"histogram\",\"valueAxes\":[{\"id\":\"ValueAxis-1\",\"labels\":{\"filter\":false,\"rotate\":0,\"show\":true,\"truncate\":100},\"name\":\"LeftAxis-1\",\"position\":\"left\",\"scale\":{\"mode\":\"normal\",\"type\":\"linear\"},\"show\":true,\"style\":{},\"title\":{\"text\":\"Count\"},\"type\":\"value\"}]},\"title\":\"Requests AnswerSource\"}"
                },
                "references": [
                  {
                    "id": "Metrics",
                    "name": "kibanaSavedObjectMeta.searchSourceJSON.index",
                    "type": "index-pattern"
                  }
                ],
                "migrationVersion": {"visualization": "7.7.0"}
              },
              {
                "id": "68d7c450-a37a-11ea-8370-0f1df276cae1",
                "type": "visualization",
                "updated_at": "2020-08-21T23:30:32.252Z",
                "version": "WzI5LDFd",
                "attributes": {
                  "description": "",
                  "kibanaSavedObjectMeta": {
                    "searchSourceJSON": "{\"query\":{\"query\":\"\",\"language\":\"kuery\"},\"filter\":[],\"indexRefName\":\"kibanaSavedObjectMeta.searchSourceJSON.index\"}"
                  },
                  "title": "Logged Utterances",
                  "uiStateJSON": "{}",
                  "version": "1",
                  "visState": "{\"title\":\"Logged Utterances\",\"type\":\"tagcloud\",\"params\":{\"scale\":\"linear\",\"orientation\":\"single\",\"minFontSize\":18,\"maxFontSize\":72,\"showLabel\":true,\"metric\":{\"type\":\"vis_dimension\",\"accessor\":0,\"format\":{\"id\":\"string\",\"params\":{}}}},\"aggs\":[{\"id\":\"1\",\"enabled\":true,\"type\":\"count\",\"schema\":\"metric\",\"params\":{}},{\"id\":\"2\",\"enabled\":true,\"type\":\"terms\",\"schema\":\"segment\",\"params\":{\"field\":\"utterance.keyword\",\"orderBy\":\"1\",\"order\":\"desc\",\"size\":1000,\"otherBucket\":false,\"otherBucketLabel\":\"Other\",\"missingBucket\":false,\"missingBucketLabel\":\"Missing\",\"customLabel\":\"Logged Utterances\"}}]}"
                },
                "references": [
                  {
                    "id": "Metrics",
                    "name": "kibanaSavedObjectMeta.searchSourceJSON.index",
                    "type": "index-pattern"
                  }
                ],
                "migrationVersion": {"visualization": "7.7.0"}
              },
              {
                "id": "d68ac390-a379-11ea-8370-0f1df276cae1",
                "type": "visualization",
                "updated_at": "2020-08-21T23:30:32.252Z",
                "version": "WzMwLDFd",
                "attributes": {
                  "description": "",
                  "kibanaSavedObjectMeta": {
                    "searchSourceJSON": "{\"query\":{\"query\":\"entireResponse.got_hits:0\",\"language\":\"kuery\"},\"filter\":[],\"indexRefName\":\"kibanaSavedObjectMeta.searchSourceJSON.index\"}"
                  },
                  "title": "No Hits",
                  "uiStateJSON": "{}",
                  "version": "1",
                  "visState": "{\"title\":\"No Hits\",\"type\":\"tagcloud\",\"params\":{\"scale\":\"linear\",\"orientation\":\"single\",\"minFontSize\":18,\"maxFontSize\":72,\"showLabel\":true,\"metric\":{\"type\":\"vis_dimension\",\"accessor\":0,\"format\":{\"id\":\"string\",\"params\":{}}}},\"aggs\":[{\"id\":\"1\",\"enabled\":true,\"type\":\"count\",\"schema\":\"metric\",\"params\":{}},{\"id\":\"2\",\"enabled\":true,\"type\":\"terms\",\"schema\":\"segment\",\"params\":{\"field\":\"utterance.keyword\",\"orderBy\":\"1\",\"order\":\"desc\",\"size\":1000,\"otherBucket\":false,\"otherBucketLabel\":\"Other\",\"missingBucket\":false,\"missingBucketLabel\":\"Missing\",\"customLabel\":\"No Hits\"}}]}"
                },
                "references": [
                  {
                    "id": "Metrics",
                    "name": "kibanaSavedObjectMeta.searchSourceJSON.index",
                    "type": "index-pattern"
                  }
                ],
                "migrationVersion": {"visualization": "7.7.0"}
              },
              {
                "id": "6759e170-a37b-11ea-8370-0f1df276cae1",
                "type": "visualization",
                "updated_at": "2020-08-21T23:30:32.252Z",
                "version": "WzMyLDFd",
                "attributes": {
                  "description": "",
                  "kibanaSavedObjectMeta": {
                    "searchSourceJSON": "{\"query\":{\"query\":\"feedback=correct\",\"language\":\"kuery\"},\"filter\":[],\"indexRefName\":\"kibanaSavedObjectMeta.searchSourceJSON.index\"}"
                  },
                  "title": "Positive Feedback",
                  "uiStateJSON": "{}",
                  "version": "1",
                  "visState": "{\"title\":\"Positive Feedback\",\"type\":\"tagcloud\",\"params\":{\"scale\":\"linear\",\"orientation\":\"single\",\"minFontSize\":18,\"maxFontSize\":72,\"showLabel\":true,\"metric\":{\"type\":\"vis_dimension\",\"accessor\":0,\"format\":{\"id\":\"string\",\"params\":{}}}},\"aggs\":[{\"id\":\"1\",\"enabled\":true,\"type\":\"count\",\"schema\":\"metric\",\"params\":{}},{\"id\":\"2\",\"enabled\":true,\"type\":\"terms\",\"schema\":\"segment\",\"params\":{\"field\":\"utterance.keyword\",\"orderBy\":\"1\",\"order\":\"desc\",\"size\":100,\"otherBucket\":false,\"otherBucketLabel\":\"Other\",\"missingBucket\":false,\"missingBucketLabel\":\"Missing\",\"customLabel\":\"Thumbs Up\"}}]}"
                },
                "references": [
                  {
                    "id": "Feedback",
                    "name": "kibanaSavedObjectMeta.searchSourceJSON.index",
                    "type": "index-pattern"
                  }
                ],
                "migrationVersion": {"visualization": "7.7.0"}
              },
              {
                "id": "985eb570-a37b-11ea-8370-0f1df276cae1",
                "type": "visualization",
                "updated_at": "2020-08-21T23:30:32.252Z",
                "version": "WzMzLDFd",
                "attributes": {
                  "description": "",
                  "kibanaSavedObjectMeta": {
                    "searchSourceJSON": "{\"query\":{\"query\":\"feedback=incorrect\",\"language\":\"kuery\"},\"filter\":[],\"indexRefName\":\"kibanaSavedObjectMeta.searchSourceJSON.index\"}"
                  },
                  "title": "Negative Feedback",
                  "uiStateJSON": "{}",
                  "version": "1",
                  "visState": "{\"title\":\"Negative Feedback\",\"type\":\"tagcloud\",\"params\":{\"scale\":\"linear\",\"orientation\":\"single\",\"minFontSize\":18,\"maxFontSize\":72,\"showLabel\":true,\"metric\":{\"type\":\"vis_dimension\",\"accessor\":1,\"format\":{\"id\":\"string\",\"params\":{}}},\"bucket\":{\"type\":\"vis_dimension\",\"accessor\":0,\"format\":{\"id\":\"terms\",\"params\":{\"id\":\"string\",\"otherBucketLabel\":\"Other\",\"missingBucketLabel\":\"Missing\"}}}},\"aggs\":[{\"id\":\"1\",\"enabled\":true,\"type\":\"count\",\"schema\":\"metric\",\"params\":{}},{\"id\":\"2\",\"enabled\":true,\"type\":\"terms\",\"schema\":\"segment\",\"params\":{\"field\":\"utterance.keyword\",\"orderBy\":\"1\",\"order\":\"desc\",\"size\":100,\"otherBucket\":false,\"otherBucketLabel\":\"Other\",\"missingBucket\":false,\"missingBucketLabel\":\"Missing\",\"customLabel\":\"Thumbs Down\"}}]}"
                },
                "references": [
                  {
                    "id": "Feedback",
                    "name": "kibanaSavedObjectMeta.searchSourceJSON.index",
                    "type": "index-pattern"
                  }
                ],
                "migrationVersion": {"visualization": "7.7.0"}
              },
              {
                "id": "2031f610-a4c1-11ea-a012-c353d737e5ec",
                "type": "visualization",
                "updated_at": "2020-08-21T23:30:32.252Z",
                "version": "WzM1LDFd",
                "attributes": {
                  "description": "",
                  "kibanaSavedObjectMeta": {
                    "searchSourceJSON": "{\"query\":{\"query\":\"\",\"language\":\"kuery\"},\"filter\":[],\"indexRefName\":\"kibanaSavedObjectMeta.searchSourceJSON.index\"}"
                  },
                  "title": "QnAItemCount",
                  "uiStateJSON": "{}",
                  "version": "1",
                  "visState": "{\"title\":\"QnAItemCount\",\"type\":\"metric\",\"params\":{\"metric\":{\"percentageMode\":false,\"useRanges\":false,\"colorSchema\":\"Green to Red\",\"metricColorMode\":\"None\",\"colorsRange\":[{\"type\":\"range\",\"from\":0,\"to\":10000}],\"labels\":{\"show\":true},\"invertColors\":false,\"style\":{\"bgFill\":\"#000\",\"bgColor\":false,\"labelColor\":false,\"subText\":\"\",\"fontSize\":60}},\"dimensions\":{\"metrics\":[{\"type\":\"vis_dimension\",\"accessor\":0,\"format\":{\"id\":\"number\",\"params\":{}}}]},\"addTooltip\":true,\"addLegend\":false,\"type\":\"metric\"},\"aggs\":[{\"id\":\"1\",\"enabled\":true,\"type\":\"count\",\"schema\":\"metric\",\"params\":{\"customLabel\":\"QnA Item Count\"}}]}"
                },
                "references": [
                  {
                    "id": "QnaItems",
                    "name": "kibanaSavedObjectMeta.searchSourceJSON.index",
                    "type": "index-pattern"
                  }
                ],
                "migrationVersion": {"visualization": "7.7.0"}
              },
              {
                "id": "Metrics",
                "type": "index-pattern",
                "updated_at": "2020-08-21T23:30:32.252Z",
                "version": "WzI1LDFd",
                "attributes": {
                  "fields": "[{\"name\":\"_id\",\"type\":\"string\",\"esTypes\":[\"_id\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":false},{\"name\":\"_index\",\"type\":\"string\",\"esTypes\":[\"_index\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":false},{\"name\":\"_score\",\"type\":\"number\",\"count\":0,\"scripted\":false,\"searchable\":false,\"aggregatable\":false,\"readFromDocValues\":false},{\"name\":\"_source\",\"type\":\"_source\",\"esTypes\":[\"_source\"],\"count\":0,\"scripted\":false,\"searchable\":false,\"aggregatable\":false,\"readFromDocValues\":false},{\"name\":\"_type\",\"type\":\"string\",\"esTypes\":[\"_type\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":false},{\"name\":\"answer\",\"type\":\"string\",\"esTypes\":[\"text\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":false,\"readFromDocValues\":false},{\"name\":\"answer.keyword\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true,\"subType\":{\"multi\":{\"parent\":\"answer\"}}},{\"name\":\"clientType\",\"type\":\"string\",\"esTypes\":[\"text\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":false,\"readFromDocValues\":false},{\"name\":\"clientType.keyword\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true,\"subType\":{\"multi\":{\"parent\":\"clientType\"}}},{\"name\":\"datetime\",\"type\":\"date\",\"esTypes\":[\"date\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"name\":\"entireRequest._clientType\",\"type\":\"string\",\"esTypes\":[\"text\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":false,\"readFromDocValues\":false},{\"name\":\"entireRequest._clientType.keyword\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true,\"subType\":{\"multi\":{\"parent\":\"entireRequest._clientType\"}}},{\"name\":\"entireRequest._event.bot.alias\",\"type\":\"string\",\"esTypes\":[\"text\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":false,\"readFromDocValues\":false},{\"name\":\"entireRequest._event.bot.alias.keyword\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true,\"subType\":{\"multi\":{\"parent\":\"entireRequest._event.bot.alias\"}}},{\"name\":\"entireRequest._event.bot.name\",\"type\":\"string\",\"esTypes\":[\"text\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":false,\"readFromDocValues\":false},{\"name\":\"entireRequest._event.bot.name.keyword\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true,\"subType\":{\"multi\":{\"parent\":\"entireRequest._event.bot.name\"}}},{\"name\":\"entireRequest._event.bot.version\",\"type\":\"string\",\"esTypes\":[\"text\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":false,\"readFromDocValues\":false},{\"name\":\"entireRequest._event.bot.version.keyword\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true,\"subType\":{\"multi\":{\"parent\":\"entireRequest._event.bot.version\"}}},{\"name\":\"entireRequest._event.currentIntent.confirmationStatus\",\"type\":\"string\",\"esTypes\":[\"text\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":false,\"readFromDocValues\":false},{\"name\":\"entireRequest._event.currentIntent.confirmationStatus.keyword\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true,\"subType\":{\"multi\":{\"parent\":\"entireRequest._event.currentIntent.confirmationStatus\"}}},{\"name\":\"entireRequest._event.currentIntent.name\",\"type\":\"string\",\"esTypes\":[\"text\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":false,\"readFromDocValues\":false},{\"name\":\"entireRequest._event.currentIntent.name.keyword\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true,\"subType\":{\"multi\":{\"parent\":\"entireRequest._event.currentIntent.name\"}}},{\"name\":\"entireRequest._event.currentIntent.slotDetails.slot.originalValue\",\"type\":\"string\",\"esTypes\":[\"text\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":false,\"readFromDocValues\":false},{\"name\":\"entireRequest._event.currentIntent.slotDetails.slot.originalValue.keyword\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true,\"subType\":{\"multi\":{\"parent\":\"entireRequest._event.currentIntent.slotDetails.slot.originalValue\"}}},{\"name\":\"entireRequest._event.currentIntent.slotDetails.slot.resolutions.value\",\"type\":\"string\",\"esTypes\":[\"text\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":false,\"readFromDocValues\":false},{\"name\":\"entireRequest._event.currentIntent.slotDetails.slot.resolutions.value.keyword\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true,\"subType\":{\"multi\":{\"parent\":\"entireRequest._event.currentIntent.slotDetails.slot.resolutions.value\"}}},{\"name\":\"entireRequest._event.currentIntent.slots.slot\",\"type\":\"string\",\"esTypes\":[\"text\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":false,\"readFromDocValues\":false},{\"name\":\"entireRequest._event.currentIntent.slots.slot.keyword\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true,\"subType\":{\"multi\":{\"parent\":\"entireRequest._event.currentIntent.slots.slot\"}}},{\"name\":\"entireRequest._event.errorFound\",\"type\":\"boolean\",\"esTypes\":[\"boolean\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"name\":\"entireRequest._event.inputTranscript\",\"type\":\"string\",\"esTypes\":[\"text\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":false,\"readFromDocValues\":false},{\"name\":\"entireRequest._event.inputTranscript.keyword\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true,\"subType\":{\"multi\":{\"parent\":\"entireRequest._event.inputTranscript\"}}},{\"name\":\"entireRequest._event.invocationSource\",\"type\":\"string\",\"esTypes\":[\"text\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":false,\"readFromDocValues\":false},{\"name\":\"entireRequest._event.invocationSource.keyword\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true,\"subType\":{\"multi\":{\"parent\":\"entireRequest._event.invocationSource\"}}},{\"name\":\"entireRequest._event.messageVersion\",\"type\":\"string\",\"esTypes\":[\"text\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":false,\"readFromDocValues\":false},{\"name\":\"entireRequest._event.messageVersion.keyword\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true,\"subType\":{\"multi\":{\"parent\":\"entireRequest._event.messageVersion\"}}},{\"name\":\"entireRequest._event.outputDialogMode\",\"type\":\"string\",\"esTypes\":[\"text\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":false,\"readFromDocValues\":false},{\"name\":\"entireRequest._event.outputDialogMode.keyword\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true,\"subType\":{\"multi\":{\"parent\":\"entireRequest._event.outputDialogMode\"}}},{\"name\":\"entireRequest._event.recentIntentSummaryView.confirmationStatus\",\"type\":\"string\",\"esTypes\":[\"text\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":false,\"readFromDocValues\":false},{\"name\":\"entireRequest._event.recentIntentSummaryView.confirmationStatus.keyword\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true,\"subType\":{\"multi\":{\"parent\":\"entireRequest._event.recentIntentSummaryView.confirmationStatus\"}}},{\"name\":\"entireRequest._event.recentIntentSummaryView.dialogActionType\",\"type\":\"string\",\"esTypes\":[\"text\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":false,\"readFromDocValues\":false},{\"name\":\"entireRequest._event.recentIntentSummaryView.dialogActionType.keyword\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true,\"subType\":{\"multi\":{\"parent\":\"entireRequest._event.recentIntentSummaryView.dialogActionType\"}}},{\"name\":\"entireRequest._event.recentIntentSummaryView.fulfillmentState\",\"type\":\"string\",\"esTypes\":[\"text\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":false,\"readFromDocValues\":false},{\"name\":\"entireRequest._event.recentIntentSummaryView.fulfillmentState.keyword\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true,\"subType\":{\"multi\":{\"parent\":\"entireRequest._event.recentIntentSummaryView.fulfillmentState\"}}},{\"name\":\"entireRequest._event.recentIntentSummaryView.intentName\",\"type\":\"string\",\"esTypes\":[\"text\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":false,\"readFromDocValues\":false},{\"name\":\"entireRequest._event.recentIntentSummaryView.intentName.keyword\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true,\"subType\":{\"multi\":{\"parent\":\"entireRequest._event.recentIntentSummaryView.intentName\"}}},{\"name\":\"entireRequest._event.recentIntentSummaryView.slots.slot\",\"type\":\"string\",\"esTypes\":[\"text\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":false,\"readFromDocValues\":false},{\"name\":\"entireRequest._event.recentIntentSummaryView.slots.slot.keyword\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true,\"subType\":{\"multi\":{\"parent\":\"entireRequest._event.recentIntentSummaryView.slots.slot\"}}},{\"name\":\"entireRequest._event.sessionAttributes.qnabot_gotanswer\",\"type\":\"string\",\"esTypes\":[\"text\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":false,\"readFromDocValues\":false},{\"name\":\"entireRequest._event.sessionAttributes.qnabot_gotanswer.keyword\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true,\"subType\":{\"multi\":{\"parent\":\"entireRequest._event.sessionAttributes.qnabot_gotanswer\"}}},{\"name\":\"entireRequest._event.sessionAttributes.qnabot_qid\",\"type\":\"string\",\"esTypes\":[\"text\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":false,\"readFromDocValues\":false},{\"name\":\"entireRequest._event.sessionAttributes.qnabot_qid.keyword\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true,\"subType\":{\"multi\":{\"parent\":\"entireRequest._event.sessionAttributes.qnabot_qid\"}}},{\"name\":\"entireRequest._event.sessionAttributes.qnabotcontext\",\"type\":\"string\",\"esTypes\":[\"text\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":false,\"readFromDocValues\":false},{\"name\":\"entireRequest._event.sessionAttributes.qnabotcontext.keyword\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true,\"subType\":{\"multi\":{\"parent\":\"entireRequest._event.sessionAttributes.qnabotcontext\"}}},{\"name\":\"entireRequest._event.userId\",\"type\":\"string\",\"esTypes\":[\"text\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":false,\"readFromDocValues\":false},{\"name\":\"entireRequest._event.userId.keyword\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true,\"subType\":{\"multi\":{\"parent\":\"entireRequest._event.userId\"}}},{\"name\":\"entireRequest._info.es.address\",\"type\":\"string\",\"esTypes\":[\"text\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":false,\"readFromDocValues\":false},{\"name\":\"entireRequest._info.es.address.keyword\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true,\"subType\":{\"multi\":{\"parent\":\"entireRequest._info.es.address\"}}},{\"name\":\"entireRequest._info.es.index\",\"type\":\"string\",\"esTypes\":[\"text\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":false,\"readFromDocValues\":false},{\"name\":\"entireRequest._info.es.index.keyword\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true,\"subType\":{\"multi\":{\"parent\":\"entireRequest._info.es.index\"}}},{\"name\":\"entireRequest._info.es.service.proxy\",\"type\":\"string\",\"esTypes\":[\"text\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":false,\"readFromDocValues\":false},{\"name\":\"entireRequest._info.es.service.proxy.keyword\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true,\"subType\":{\"multi\":{\"parent\":\"entireRequest._info.es.service.proxy\"}}},{\"name\":\"entireRequest._info.es.service.qid\",\"type\":\"string\",\"esTypes\":[\"text\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":false,\"readFromDocValues\":false},{\"name\":\"entireRequest._info.es.service.qid.keyword\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true,\"subType\":{\"multi\":{\"parent\":\"entireRequest._info.es.service.qid\"}}},{\"name\":\"entireRequest._info.es.type\",\"type\":\"string\",\"esTypes\":[\"text\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":false,\"readFromDocValues\":false},{\"name\":\"entireRequest._info.es.type.keyword\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true,\"subType\":{\"multi\":{\"parent\":\"entireRequest._info.es.type\"}}},{\"name\":\"entireRequest._preferredResponseType\",\"type\":\"string\",\"esTypes\":[\"text\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":false,\"readFromDocValues\":false},{\"name\":\"entireRequest._preferredResponseType.keyword\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true,\"subType\":{\"multi\":{\"parent\":\"entireRequest._preferredResponseType\"}}},{\"name\":\"entireRequest._settings.ALT_SEARCH_KENDRA_INDEXES\",\"type\":\"string\",\"esTypes\":[\"text\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":false,\"readFromDocValues\":false},{\"name\":\"entireRequest._settings.ALT_SEARCH_KENDRA_INDEXES.keyword\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true,\"subType\":{\"multi\":{\"parent\":\"entireRequest._settings.ALT_SEARCH_KENDRA_INDEXES\"}}},{\"name\":\"entireRequest._settings.DEFAULT_ALEXA_LAUNCH_MESSAGE\",\"type\":\"string\",\"esTypes\":[\"text\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":false,\"readFromDocValues\":false},{\"name\":\"entireRequest._settings.DEFAULT_ALEXA_LAUNCH_MESSAGE.keyword\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true,\"subType\":{\"multi\":{\"parent\":\"entireRequest._settings.DEFAULT_ALEXA_LAUNCH_MESSAGE\"}}},{\"name\":\"entireRequest._settings.DEFAULT_ALEXA_STOP_MESSAGE\",\"type\":\"string\",\"esTypes\":[\"text\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":false,\"readFromDocValues\":false},{\"name\":\"entireRequest._settings.DEFAULT_ALEXA_STOP_MESSAGE.keyword\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true,\"subType\":{\"multi\":{\"parent\":\"entireRequest._settings.DEFAULT_ALEXA_STOP_MESSAGE\"}}},{\"name\":\"entireRequest._settings.DEFAULT_USER_POOL_JWKS_URL\",\"type\":\"string\",\"esTypes\":[\"text\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":false,\"readFromDocValues\":false},{\"name\":\"entireRequest._settings.DEFAULT_USER_POOL_JWKS_URL.keyword\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true,\"subType\":{\"multi\":{\"parent\":\"entireRequest._settings.DEFAULT_USER_POOL_JWKS_URL\"}}},{\"name\":\"entireRequest._settings.ELICIT_RESPONSE_BOT_FAILURE_MESSAGE\",\"type\":\"string\",\"esTypes\":[\"text\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":false,\"readFromDocValues\":false},{\"name\":\"entireRequest._settings.ELICIT_RESPONSE_BOT_FAILURE_MESSAGE.keyword\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true,\"subType\":{\"multi\":{\"parent\":\"entireRequest._settings.ELICIT_RESPONSE_BOT_FAILURE_MESSAGE\"}}},{\"name\":\"entireRequest._settings.ELICIT_RESPONSE_DEFAULT_MSG\",\"type\":\"string\",\"esTypes\":[\"text\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":false,\"readFromDocValues\":false},{\"name\":\"entireRequest._settings.ELICIT_RESPONSE_DEFAULT_MSG.keyword\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true,\"subType\":{\"multi\":{\"parent\":\"entireRequest._settings.ELICIT_RESPONSE_DEFAULT_MSG\"}}},{\"name\":\"entireRequest._settings.ELICIT_RESPONSE_MAX_RETRIES\",\"type\":\"number\",\"esTypes\":[\"long\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"name\":\"entireRequest._settings.ELICIT_RESPONSE_RETRY_MESSAGE\",\"type\":\"string\",\"esTypes\":[\"text\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":false,\"readFromDocValues\":false},{\"name\":\"entireRequest._settings.ELICIT_RESPONSE_RETRY_MESSAGE.keyword\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true,\"subType\":{\"multi\":{\"parent\":\"entireRequest._settings.ELICIT_RESPONSE_RETRY_MESSAGE\"}}},{\"name\":\"entireRequest._settings.EMPTYMESSAGE\",\"type\":\"string\",\"esTypes\":[\"text\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":false,\"readFromDocValues\":false},{\"name\":\"entireRequest._settings.EMPTYMESSAGE.keyword\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true,\"subType\":{\"multi\":{\"parent\":\"entireRequest._settings.EMPTYMESSAGE\"}}},{\"name\":\"entireRequest._settings.ENABLE_DEBUG_RESPONSES\",\"type\":\"boolean\",\"esTypes\":[\"boolean\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"name\":\"entireRequest._settings.ENABLE_MULTI_LANGUAGE_SUPPORT\",\"type\":\"boolean\",\"esTypes\":[\"boolean\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"name\":\"entireRequest._settings.ENABLE_REDACTING\",\"type\":\"boolean\",\"esTypes\":[\"boolean\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"name\":\"entireRequest._settings.ENABLE_SENTIMENT_SUPPORT\",\"type\":\"boolean\",\"esTypes\":[\"boolean\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"name\":\"entireRequest._settings.ENFORCE_VERIFIED_IDENTITY\",\"type\":\"boolean\",\"esTypes\":[\"boolean\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"name\":\"entireRequest._settings.ERRORMESSAGE\",\"type\":\"string\",\"esTypes\":[\"text\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":false,\"readFromDocValues\":false},{\"name\":\"entireRequest._settings.ERRORMESSAGE.keyword\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true,\"subType\":{\"multi\":{\"parent\":\"entireRequest._settings.ERRORMESSAGE\"}}},{\"name\":\"entireRequest._settings.ES_KEYWORD_SYNTAX_TYPES\",\"type\":\"string\",\"esTypes\":[\"text\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":false,\"readFromDocValues\":false},{\"name\":\"entireRequest._settings.ES_KEYWORD_SYNTAX_TYPES.keyword\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true,\"subType\":{\"multi\":{\"parent\":\"entireRequest._settings.ES_KEYWORD_SYNTAX_TYPES\"}}},{\"name\":\"entireRequest._settings.ES_MINIMUM_SHOULD_MATCH\",\"type\":\"string\",\"esTypes\":[\"text\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":false,\"readFromDocValues\":false},{\"name\":\"entireRequest._settings.ES_MINIMUM_SHOULD_MATCH.keyword\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true,\"subType\":{\"multi\":{\"parent\":\"entireRequest._settings.ES_MINIMUM_SHOULD_MATCH\"}}},{\"name\":\"entireRequest._settings.ES_NO_HITS_QUESTION\",\"type\":\"string\",\"esTypes\":[\"text\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":false,\"readFromDocValues\":false},{\"name\":\"entireRequest._settings.ES_NO_HITS_QUESTION.keyword\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true,\"subType\":{\"multi\":{\"parent\":\"entireRequest._settings.ES_NO_HITS_QUESTION\"}}},{\"name\":\"entireRequest._settings.ES_PHRASE_BOOST\",\"type\":\"string\",\"esTypes\":[\"text\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":false,\"readFromDocValues\":false},{\"name\":\"entireRequest._settings.ES_PHRASE_BOOST.keyword\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true,\"subType\":{\"multi\":{\"parent\":\"entireRequest._settings.ES_PHRASE_BOOST\"}}},{\"name\":\"entireRequest._settings.ES_SCORE_ANSWER_FIELD\",\"type\":\"boolean\",\"esTypes\":[\"boolean\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"name\":\"entireRequest._settings.ES_SYNTAX_CONFIDENCE_LIMIT\",\"type\":\"string\",\"esTypes\":[\"text\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":false,\"readFromDocValues\":false},{\"name\":\"entireRequest._settings.ES_SYNTAX_CONFIDENCE_LIMIT.keyword\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true,\"subType\":{\"multi\":{\"parent\":\"entireRequest._settings.ES_SYNTAX_CONFIDENCE_LIMIT\"}}},{\"name\":\"entireRequest._settings.ES_USE_FUZZY_MATCH\",\"type\":\"boolean\",\"esTypes\":[\"boolean\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"name\":\"entireRequest._settings.ES_USE_KEYWORD_FILTERS\",\"type\":\"boolean\",\"esTypes\":[\"boolean\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"name\":\"entireRequest._settings.KENDRA_FAQ_CONFIG_MAX_RETRIES\",\"type\":\"number\",\"esTypes\":[\"long\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"name\":\"entireRequest._settings.KENDRA_FAQ_CONFIG_RETRY_DELAY\",\"type\":\"number\",\"esTypes\":[\"long\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"name\":\"entireRequest._settings.KENDRA_FAQ_ES_FALLBACK\",\"type\":\"boolean\",\"esTypes\":[\"boolean\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"name\":\"entireRequest._settings.KENDRA_FAQ_INDEX\",\"type\":\"string\",\"esTypes\":[\"text\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":false,\"readFromDocValues\":false},{\"name\":\"entireRequest._settings.KENDRA_FAQ_INDEX.keyword\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true,\"subType\":{\"multi\":{\"parent\":\"entireRequest._settings.KENDRA_FAQ_INDEX\"}}},{\"name\":\"entireRequest._settings.MINIMUM_CONFIDENCE_SCORE\",\"type\":\"number\",\"esTypes\":[\"float\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"name\":\"entireRequest._settings.NO_VERIFIED_IDENTITY_QUESTION\",\"type\":\"string\",\"esTypes\":[\"text\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":false,\"readFromDocValues\":false},{\"name\":\"entireRequest._settings.NO_VERIFIED_IDENTITY_QUESTION.keyword\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true,\"subType\":{\"multi\":{\"parent\":\"entireRequest._settings.NO_VERIFIED_IDENTITY_QUESTION\"}}},{\"name\":\"entireRequest._settings.REDACTING_REGEX\",\"type\":\"string\",\"esTypes\":[\"text\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":false,\"readFromDocValues\":false},{\"name\":\"entireRequest._settings.REDACTING_REGEX.keyword\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true,\"subType\":{\"multi\":{\"parent\":\"entireRequest._settings.REDACTING_REGEX\"}}},{\"name\":\"entireRequest._settings.SMS_HINT_REMINDER\",\"type\":\"string\",\"esTypes\":[\"text\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":false,\"readFromDocValues\":false},{\"name\":\"entireRequest._settings.SMS_HINT_REMINDER.keyword\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true,\"subType\":{\"multi\":{\"parent\":\"entireRequest._settings.SMS_HINT_REMINDER\"}}},{\"name\":\"entireRequest._settings.SMS_HINT_REMINDER_ENABLE\",\"type\":\"boolean\",\"esTypes\":[\"boolean\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"name\":\"entireRequest._settings.SMS_HINT_REMINDER_INTERVAL_HRS\",\"type\":\"string\",\"esTypes\":[\"text\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":false,\"readFromDocValues\":false},{\"name\":\"entireRequest._settings.SMS_HINT_REMINDER_INTERVAL_HRS.keyword\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true,\"subType\":{\"multi\":{\"parent\":\"entireRequest._settings.SMS_HINT_REMINDER_INTERVAL_HRS\"}}},{\"name\":\"entireRequest._type\",\"type\":\"string\",\"esTypes\":[\"text\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":false,\"readFromDocValues\":false},{\"name\":\"entireRequest._type.keyword\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true,\"subType\":{\"multi\":{\"parent\":\"entireRequest._type\"}}},{\"name\":\"entireRequest._userId\",\"type\":\"string\",\"esTypes\":[\"text\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":false,\"readFromDocValues\":false},{\"name\":\"entireRequest._userId.keyword\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true,\"subType\":{\"multi\":{\"parent\":\"entireRequest._userId\"}}},{\"name\":\"entireRequest._userInfo.FirstSeen\",\"type\":\"string\",\"esTypes\":[\"text\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":false,\"readFromDocValues\":false},{\"name\":\"entireRequest._userInfo.FirstSeen.keyword\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true,\"subType\":{\"multi\":{\"parent\":\"entireRequest._userInfo.FirstSeen\"}}},{\"name\":\"entireRequest._userInfo.InteractionCount\",\"type\":\"number\",\"esTypes\":[\"long\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"name\":\"entireRequest._userInfo.LastSeen\",\"type\":\"string\",\"esTypes\":[\"text\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":false,\"readFromDocValues\":false},{\"name\":\"entireRequest._userInfo.LastSeen.keyword\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true,\"subType\":{\"multi\":{\"parent\":\"entireRequest._userInfo.LastSeen\"}}},{\"name\":\"entireRequest._userInfo.TimeSinceLastInteraction\",\"type\":\"number\",\"esTypes\":[\"float\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"name\":\"entireRequest._userInfo.UserId\",\"type\":\"string\",\"esTypes\":[\"text\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":false,\"readFromDocValues\":false},{\"name\":\"entireRequest._userInfo.UserId.keyword\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true,\"subType\":{\"multi\":{\"parent\":\"entireRequest._userInfo.UserId\"}}},{\"name\":\"entireRequest._userInfo.isVerifiedIdentity\",\"type\":\"string\",\"esTypes\":[\"text\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":false,\"readFromDocValues\":false},{\"name\":\"entireRequest._userInfo.isVerifiedIdentity.keyword\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true,\"subType\":{\"multi\":{\"parent\":\"entireRequest._userInfo.isVerifiedIdentity\"}}},{\"name\":\"entireRequest.kendraResultsCached\",\"type\":\"string\",\"esTypes\":[\"text\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":false,\"readFromDocValues\":false},{\"name\":\"entireRequest.kendraResultsCached.keyword\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true,\"subType\":{\"multi\":{\"parent\":\"entireRequest.kendraResultsCached\"}}},{\"name\":\"entireRequest.question\",\"type\":\"string\",\"esTypes\":[\"text\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":false,\"readFromDocValues\":false},{\"name\":\"entireRequest.question.keyword\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true,\"subType\":{\"multi\":{\"parent\":\"entireRequest.question\"}}},{\"name\":\"entireRequest.sentiment\",\"type\":\"string\",\"esTypes\":[\"text\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":false,\"readFromDocValues\":false},{\"name\":\"entireRequest.sentiment.keyword\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true,\"subType\":{\"multi\":{\"parent\":\"entireRequest.sentiment\"}}},{\"name\":\"entireRequest.session.qnabot_gotanswer\",\"type\":\"boolean\",\"esTypes\":[\"boolean\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"name\":\"entireRequest.session.qnabot_qid\",\"type\":\"string\",\"esTypes\":[\"text\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":false,\"readFromDocValues\":false},{\"name\":\"entireRequest.session.qnabot_qid.keyword\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true,\"subType\":{\"multi\":{\"parent\":\"entireRequest.session.qnabot_qid\"}}},{\"name\":\"entireRequest.session.qnabotcontext.kendra.kendraIndexId\",\"type\":\"string\",\"esTypes\":[\"text\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":false,\"readFromDocValues\":false},{\"name\":\"entireRequest.session.qnabotcontext.kendra.kendraIndexId.keyword\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true,\"subType\":{\"multi\":{\"parent\":\"entireRequest.session.qnabotcontext.kendra.kendraIndexId\"}}},{\"name\":\"entireRequest.session.qnabotcontext.kendra.kendraQueryId\",\"type\":\"string\",\"esTypes\":[\"text\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":false,\"readFromDocValues\":false},{\"name\":\"entireRequest.session.qnabotcontext.kendra.kendraQueryId.keyword\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true,\"subType\":{\"multi\":{\"parent\":\"entireRequest.session.qnabotcontext.kendra.kendraQueryId\"}}},{\"name\":\"entireRequest.session.qnabotcontext.kendra.kendraResponsibleQid\",\"type\":\"string\",\"esTypes\":[\"text\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":false,\"readFromDocValues\":false},{\"name\":\"entireRequest.session.qnabotcontext.kendra.kendraResponsibleQid.keyword\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true,\"subType\":{\"multi\":{\"parent\":\"entireRequest.session.qnabotcontext.kendra.kendraResponsibleQid\"}}},{\"name\":\"entireRequest.session.qnabotcontext.kendra.kendraResultId\",\"type\":\"string\",\"esTypes\":[\"text\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":false,\"readFromDocValues\":false},{\"name\":\"entireRequest.session.qnabotcontext.kendra.kendraResultId.keyword\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true,\"subType\":{\"multi\":{\"parent\":\"entireRequest.session.qnabotcontext.kendra.kendraResultId\"}}},{\"name\":\"entireRequest.session.qnabotcontext.navigation.hasParent\",\"type\":\"boolean\",\"esTypes\":[\"boolean\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"name\":\"entireRequest.session.qnabotcontext.navigation.next\",\"type\":\"string\",\"esTypes\":[\"text\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":false,\"readFromDocValues\":false},{\"name\":\"entireRequest.session.qnabotcontext.navigation.next.keyword\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true,\"subType\":{\"multi\":{\"parent\":\"entireRequest.session.qnabotcontext.navigation.next\"}}},{\"name\":\"entireRequest.session.qnabotcontext.previous.a\",\"type\":\"string\",\"esTypes\":[\"text\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":false,\"readFromDocValues\":false},{\"name\":\"entireRequest.session.qnabotcontext.previous.a.keyword\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true,\"subType\":{\"multi\":{\"parent\":\"entireRequest.session.qnabotcontext.previous.a\"}}},{\"name\":\"entireRequest.session.qnabotcontext.previous.q\",\"type\":\"string\",\"esTypes\":[\"text\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":false,\"readFromDocValues\":false},{\"name\":\"entireRequest.session.qnabotcontext.previous.q.keyword\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true,\"subType\":{\"multi\":{\"parent\":\"entireRequest.session.qnabotcontext.previous.q\"}}},{\"name\":\"entireRequest.session.qnabotcontext.previous.qid\",\"type\":\"string\",\"esTypes\":[\"text\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":false,\"readFromDocValues\":false},{\"name\":\"entireRequest.session.qnabotcontext.previous.qid.keyword\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true,\"subType\":{\"multi\":{\"parent\":\"entireRequest.session.qnabotcontext.previous.qid\"}}},{\"name\":\"entireResponse._userInfo.FirstSeen\",\"type\":\"string\",\"esTypes\":[\"text\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":false,\"readFromDocValues\":false},{\"name\":\"entireResponse._userInfo.FirstSeen.keyword\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true,\"subType\":{\"multi\":{\"parent\":\"entireResponse._userInfo.FirstSeen\"}}},{\"name\":\"entireResponse._userInfo.InteractionCount\",\"type\":\"number\",\"esTypes\":[\"long\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"name\":\"entireResponse._userInfo.LastSeen\",\"type\":\"string\",\"esTypes\":[\"text\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":false,\"readFromDocValues\":false},{\"name\":\"entireResponse._userInfo.LastSeen.keyword\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true,\"subType\":{\"multi\":{\"parent\":\"entireResponse._userInfo.LastSeen\"}}},{\"name\":\"entireResponse._userInfo.TimeSinceLastInteraction\",\"type\":\"number\",\"esTypes\":[\"float\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"name\":\"entireResponse._userInfo.UserId\",\"type\":\"string\",\"esTypes\":[\"text\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":false,\"readFromDocValues\":false},{\"name\":\"entireResponse._userInfo.UserId.keyword\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true,\"subType\":{\"multi\":{\"parent\":\"entireResponse._userInfo.UserId\"}}},{\"name\":\"entireResponse._userInfo.isVerifiedIdentity\",\"type\":\"string\",\"esTypes\":[\"text\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":false,\"readFromDocValues\":false},{\"name\":\"entireResponse._userInfo.isVerifiedIdentity.keyword\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true,\"subType\":{\"multi\":{\"parent\":\"entireResponse._userInfo.isVerifiedIdentity\"}}},{\"name\":\"entireResponse.answerSource\",\"type\":\"string\",\"esTypes\":[\"text\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":false,\"readFromDocValues\":false},{\"name\":\"entireResponse.answerSource.keyword\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true,\"subType\":{\"multi\":{\"parent\":\"entireResponse.answerSource\"}}},{\"name\":\"entireResponse.card.send\",\"type\":\"boolean\",\"esTypes\":[\"boolean\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"name\":\"entireResponse.card.text\",\"type\":\"string\",\"esTypes\":[\"text\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":false,\"readFromDocValues\":false},{\"name\":\"entireResponse.card.text.keyword\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true,\"subType\":{\"multi\":{\"parent\":\"entireResponse.card.text\"}}},{\"name\":\"entireResponse.card.title\",\"type\":\"string\",\"esTypes\":[\"text\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":false,\"readFromDocValues\":false},{\"name\":\"entireResponse.card.title.keyword\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true,\"subType\":{\"multi\":{\"parent\":\"entireResponse.card.title\"}}},{\"name\":\"entireResponse.card.url\",\"type\":\"string\",\"esTypes\":[\"text\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":false,\"readFromDocValues\":false},{\"name\":\"entireResponse.card.url.keyword\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true,\"subType\":{\"multi\":{\"parent\":\"entireResponse.card.url\"}}},{\"name\":\"entireResponse.got_hits\",\"type\":\"number\",\"esTypes\":[\"long\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"name\":\"entireResponse.kendraResultsCached.QueryId\",\"type\":\"string\",\"esTypes\":[\"text\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":false,\"readFromDocValues\":false},{\"name\":\"entireResponse.kendraResultsCached.QueryId.keyword\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true,\"subType\":{\"multi\":{\"parent\":\"entireResponse.kendraResultsCached.QueryId\"}}},{\"name\":\"entireResponse.kendraResultsCached.ResultItems.AdditionalAttributes.Key\",\"type\":\"string\",\"esTypes\":[\"text\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":false,\"readFromDocValues\":false},{\"name\":\"entireResponse.kendraResultsCached.ResultItems.AdditionalAttributes.Key.keyword\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true,\"subType\":{\"multi\":{\"parent\":\"entireResponse.kendraResultsCached.ResultItems.AdditionalAttributes.Key\"}}},{\"name\":\"entireResponse.kendraResultsCached.ResultItems.AdditionalAttributes.Value.TextWithHighlightsValue.Highlights.BeginOffset\",\"type\":\"number\",\"esTypes\":[\"long\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"name\":\"entireResponse.kendraResultsCached.ResultItems.AdditionalAttributes.Value.TextWithHighlightsValue.Highlights.EndOffset\",\"type\":\"number\",\"esTypes\":[\"long\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"name\":\"entireResponse.kendraResultsCached.ResultItems.AdditionalAttributes.Value.TextWithHighlightsValue.Highlights.TopAnswer\",\"type\":\"boolean\",\"esTypes\":[\"boolean\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"name\":\"entireResponse.kendraResultsCached.ResultItems.AdditionalAttributes.Value.TextWithHighlightsValue.Text\",\"type\":\"string\",\"esTypes\":[\"text\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":false,\"readFromDocValues\":false},{\"name\":\"entireResponse.kendraResultsCached.ResultItems.AdditionalAttributes.Value.TextWithHighlightsValue.Text.keyword\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true,\"subType\":{\"multi\":{\"parent\":\"entireResponse.kendraResultsCached.ResultItems.AdditionalAttributes.Value.TextWithHighlightsValue.Text\"}}},{\"name\":\"entireResponse.kendraResultsCached.ResultItems.AdditionalAttributes.ValueType\",\"type\":\"string\",\"esTypes\":[\"text\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":false,\"readFromDocValues\":false},{\"name\":\"entireResponse.kendraResultsCached.ResultItems.AdditionalAttributes.ValueType.keyword\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true,\"subType\":{\"multi\":{\"parent\":\"entireResponse.kendraResultsCached.ResultItems.AdditionalAttributes.ValueType\"}}},{\"name\":\"entireResponse.kendraResultsCached.ResultItems.DocumentAttributes.Key\",\"type\":\"string\",\"esTypes\":[\"text\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":false,\"readFromDocValues\":false},{\"name\":\"entireResponse.kendraResultsCached.ResultItems.DocumentAttributes.Key.keyword\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true,\"subType\":{\"multi\":{\"parent\":\"entireResponse.kendraResultsCached.ResultItems.DocumentAttributes.Key\"}}},{\"name\":\"entireResponse.kendraResultsCached.ResultItems.DocumentAttributes.Value.StringValue\",\"type\":\"string\",\"esTypes\":[\"text\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":false,\"readFromDocValues\":false},{\"name\":\"entireResponse.kendraResultsCached.ResultItems.DocumentAttributes.Value.StringValue.keyword\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true,\"subType\":{\"multi\":{\"parent\":\"entireResponse.kendraResultsCached.ResultItems.DocumentAttributes.Value.StringValue\"}}},{\"name\":\"entireResponse.kendraResultsCached.ResultItems.DocumentExcerpt.Highlights.BeginOffset\",\"type\":\"number\",\"esTypes\":[\"long\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"name\":\"entireResponse.kendraResultsCached.ResultItems.DocumentExcerpt.Highlights.EndOffset\",\"type\":\"number\",\"esTypes\":[\"long\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"name\":\"entireResponse.kendraResultsCached.ResultItems.DocumentExcerpt.Highlights.TopAnswer\",\"type\":\"boolean\",\"esTypes\":[\"boolean\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"name\":\"entireResponse.kendraResultsCached.ResultItems.DocumentExcerpt.Text\",\"type\":\"string\",\"esTypes\":[\"text\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":false,\"readFromDocValues\":false},{\"name\":\"entireResponse.kendraResultsCached.ResultItems.DocumentExcerpt.Text.keyword\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true,\"subType\":{\"multi\":{\"parent\":\"entireResponse.kendraResultsCached.ResultItems.DocumentExcerpt.Text\"}}},{\"name\":\"entireResponse.kendraResultsCached.ResultItems.DocumentId\",\"type\":\"string\",\"esTypes\":[\"text\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":false,\"readFromDocValues\":false},{\"name\":\"entireResponse.kendraResultsCached.ResultItems.DocumentId.keyword\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true,\"subType\":{\"multi\":{\"parent\":\"entireResponse.kendraResultsCached.ResultItems.DocumentId\"}}},{\"name\":\"entireResponse.kendraResultsCached.ResultItems.DocumentTitle.Highlights.BeginOffset\",\"type\":\"number\",\"esTypes\":[\"long\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"name\":\"entireResponse.kendraResultsCached.ResultItems.DocumentTitle.Highlights.EndOffset\",\"type\":\"number\",\"esTypes\":[\"long\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"name\":\"entireResponse.kendraResultsCached.ResultItems.DocumentTitle.Highlights.TopAnswer\",\"type\":\"boolean\",\"esTypes\":[\"boolean\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"name\":\"entireResponse.kendraResultsCached.ResultItems.DocumentTitle.Text\",\"type\":\"string\",\"esTypes\":[\"text\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":false,\"readFromDocValues\":false},{\"name\":\"entireResponse.kendraResultsCached.ResultItems.DocumentTitle.Text.keyword\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true,\"subType\":{\"multi\":{\"parent\":\"entireResponse.kendraResultsCached.ResultItems.DocumentTitle.Text\"}}},{\"name\":\"entireResponse.kendraResultsCached.ResultItems.DocumentURI\",\"type\":\"string\",\"esTypes\":[\"text\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":false,\"readFromDocValues\":false},{\"name\":\"entireResponse.kendraResultsCached.ResultItems.DocumentURI.keyword\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true,\"subType\":{\"multi\":{\"parent\":\"entireResponse.kendraResultsCached.ResultItems.DocumentURI\"}}},{\"name\":\"entireResponse.kendraResultsCached.ResultItems.Id\",\"type\":\"string\",\"esTypes\":[\"text\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":false,\"readFromDocValues\":false},{\"name\":\"entireResponse.kendraResultsCached.ResultItems.Id.keyword\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true,\"subType\":{\"multi\":{\"parent\":\"entireResponse.kendraResultsCached.ResultItems.Id\"}}},{\"name\":\"entireResponse.kendraResultsCached.ResultItems.Type\",\"type\":\"string\",\"esTypes\":[\"text\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":false,\"readFromDocValues\":false},{\"name\":\"entireResponse.kendraResultsCached.ResultItems.Type.keyword\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true,\"subType\":{\"multi\":{\"parent\":\"entireResponse.kendraResultsCached.ResultItems.Type\"}}},{\"name\":\"entireResponse.kendraResultsCached.TotalNumberOfResults\",\"type\":\"number\",\"esTypes\":[\"long\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"name\":\"entireResponse.kendraResultsCached.originalKendraIndexId\",\"type\":\"string\",\"esTypes\":[\"text\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":false,\"readFromDocValues\":false},{\"name\":\"entireResponse.kendraResultsCached.originalKendraIndexId.keyword\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true,\"subType\":{\"multi\":{\"parent\":\"entireResponse.kendraResultsCached.originalKendraIndexId\"}}},{\"name\":\"entireResponse.message\",\"type\":\"string\",\"esTypes\":[\"text\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":false,\"readFromDocValues\":false},{\"name\":\"entireResponse.message.keyword\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true,\"subType\":{\"multi\":{\"parent\":\"entireResponse.message\"}}},{\"name\":\"entireResponse.plainMessage\",\"type\":\"string\",\"esTypes\":[\"text\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":false,\"readFromDocValues\":false},{\"name\":\"entireResponse.plainMessage.keyword\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true,\"subType\":{\"multi\":{\"parent\":\"entireResponse.plainMessage\"}}},{\"name\":\"entireResponse.result.a\",\"type\":\"string\",\"esTypes\":[\"text\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":false,\"readFromDocValues\":false},{\"name\":\"entireResponse.result.a.keyword\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true,\"subType\":{\"multi\":{\"parent\":\"entireResponse.result.a\"}}},{\"name\":\"entireResponse.result.answersource\",\"type\":\"string\",\"esTypes\":[\"text\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":false,\"readFromDocValues\":false},{\"name\":\"entireResponse.result.answersource.keyword\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true,\"subType\":{\"multi\":{\"parent\":\"entireResponse.result.answersource\"}}},{\"name\":\"entireResponse.result.autotranslate.a\",\"type\":\"boolean\",\"esTypes\":[\"boolean\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"name\":\"entireResponse.result.l\",\"type\":\"string\",\"esTypes\":[\"text\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":false,\"readFromDocValues\":false},{\"name\":\"entireResponse.result.l.keyword\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true,\"subType\":{\"multi\":{\"parent\":\"entireResponse.result.l\"}}},{\"name\":\"entireResponse.result.q\",\"type\":\"string\",\"esTypes\":[\"text\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":false,\"readFromDocValues\":false},{\"name\":\"entireResponse.result.q.keyword\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true,\"subType\":{\"multi\":{\"parent\":\"entireResponse.result.q\"}}},{\"name\":\"entireResponse.result.qid\",\"type\":\"string\",\"esTypes\":[\"text\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":false,\"readFromDocValues\":false},{\"name\":\"entireResponse.result.qid.keyword\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true,\"subType\":{\"multi\":{\"parent\":\"entireResponse.result.qid\"}}},{\"name\":\"entireResponse.result.questions.q\",\"type\":\"string\",\"esTypes\":[\"text\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":false,\"readFromDocValues\":false},{\"name\":\"entireResponse.result.questions.q.keyword\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true,\"subType\":{\"multi\":{\"parent\":\"entireResponse.result.questions.q\"}}},{\"name\":\"entireResponse.result.quniqueterms\",\"type\":\"string\",\"esTypes\":[\"text\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":false,\"readFromDocValues\":false},{\"name\":\"entireResponse.result.quniqueterms.keyword\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true,\"subType\":{\"multi\":{\"parent\":\"entireResponse.result.quniqueterms\"}}},{\"name\":\"entireResponse.result.type\",\"type\":\"string\",\"esTypes\":[\"text\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":false,\"readFromDocValues\":false},{\"name\":\"entireResponse.result.type.keyword\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true,\"subType\":{\"multi\":{\"parent\":\"entireResponse.result.type\"}}},{\"name\":\"entireResponse.session.appContext\",\"type\":\"string\",\"esTypes\":[\"text\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":false,\"readFromDocValues\":false},{\"name\":\"entireResponse.session.appContext.keyword\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true,\"subType\":{\"multi\":{\"parent\":\"entireResponse.session.appContext\"}}},{\"name\":\"entireResponse.session.qnabot_gotanswer\",\"type\":\"string\",\"esTypes\":[\"text\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":false,\"readFromDocValues\":false},{\"name\":\"entireResponse.session.qnabot_gotanswer.keyword\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true,\"subType\":{\"multi\":{\"parent\":\"entireResponse.session.qnabot_gotanswer\"}}},{\"name\":\"entireResponse.session.qnabot_qid\",\"type\":\"string\",\"esTypes\":[\"text\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":false,\"readFromDocValues\":false},{\"name\":\"entireResponse.session.qnabot_qid.keyword\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true,\"subType\":{\"multi\":{\"parent\":\"entireResponse.session.qnabot_qid\"}}},{\"name\":\"entireResponse.session.qnabotcontext\",\"type\":\"string\",\"esTypes\":[\"text\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":false,\"readFromDocValues\":false},{\"name\":\"entireResponse.session.qnabotcontext.keyword\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true,\"subType\":{\"multi\":{\"parent\":\"entireResponse.session.qnabotcontext\"}}},{\"name\":\"entireResponse.type\",\"type\":\"string\",\"esTypes\":[\"text\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":false,\"readFromDocValues\":false},{\"name\":\"entireResponse.type.keyword\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true,\"subType\":{\"multi\":{\"parent\":\"entireResponse.type\"}}},{\"name\":\"qid\",\"type\":\"string\",\"esTypes\":[\"text\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":false,\"readFromDocValues\":false},{\"name\":\"qid.keyword\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true,\"subType\":{\"multi\":{\"parent\":\"qid\"}}},{\"name\":\"topic\",\"type\":\"string\",\"esTypes\":[\"text\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":false,\"readFromDocValues\":false},{\"name\":\"topic.keyword\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true,\"subType\":{\"multi\":{\"parent\":\"topic\"}}},{\"name\":\"utterance\",\"type\":\"string\",\"esTypes\":[\"text\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":false,\"readFromDocValues\":false},{\"name\":\"utterance.keyword\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true,\"subType\":{\"multi\":{\"parent\":\"utterance\"}}}]",
                  "timeFieldName": "datetime",
                  "title": "<INDEX_METRICS>"
                },
                "references": [],
                "migrationVersion": {"index-pattern": "7.6.0"}
              },
              {
                "id": "Feedback",
                "type": "index-pattern",
                "updated_at": "2020-08-21T23:30:32.252Z",
                "version": "WzMxLDFd",
                "attributes": {
                  "fields": "[{\"name\":\"_id\",\"type\":\"string\",\"esTypes\":[\"_id\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":false},{\"name\":\"_index\",\"type\":\"string\",\"esTypes\":[\"_index\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":false},{\"name\":\"_score\",\"type\":\"number\",\"count\":0,\"scripted\":false,\"searchable\":false,\"aggregatable\":false,\"readFromDocValues\":false},{\"name\":\"_source\",\"type\":\"_source\",\"esTypes\":[\"_source\"],\"count\":0,\"scripted\":false,\"searchable\":false,\"aggregatable\":false,\"readFromDocValues\":false},{\"name\":\"_type\",\"type\":\"string\",\"esTypes\":[\"_type\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":false},{\"name\":\"alternate\",\"type\":\"string\",\"esTypes\":[\"text\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":false,\"readFromDocValues\":false},{\"name\":\"alternate.keyword\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true,\"subType\":{\"multi\":{\"parent\":\"alternate\"}}},{\"name\":\"answer\",\"type\":\"string\",\"esTypes\":[\"text\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":false,\"readFromDocValues\":false},{\"name\":\"answer.keyword\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true,\"subType\":{\"multi\":{\"parent\":\"answer\"}}},{\"name\":\"datetime\",\"type\":\"date\",\"esTypes\":[\"date\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"name\":\"feedback\",\"type\":\"string\",\"esTypes\":[\"text\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":false,\"readFromDocValues\":false},{\"name\":\"feedback.keyword\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true,\"subType\":{\"multi\":{\"parent\":\"feedback\"}}},{\"name\":\"qid\",\"type\":\"string\",\"esTypes\":[\"text\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":false,\"readFromDocValues\":false},{\"name\":\"qid.keyword\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true,\"subType\":{\"multi\":{\"parent\":\"qid\"}}},{\"name\":\"utterance\",\"type\":\"string\",\"esTypes\":[\"text\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":false,\"readFromDocValues\":false},{\"name\":\"utterance.keyword\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true,\"subType\":{\"multi\":{\"parent\":\"utterance\"}}}]",
                  "timeFieldName": "datetime",
                  "title": "<INDEX_FEEDBACK>"
                },
                "references": [],
                "migrationVersion": {"index-pattern": "7.6.0"}
              },
              {
                "id": "QnaItems",
                "type": "index-pattern",
                "updated_at": "2020-08-21T23:30:32.252Z",
                "version": "WzM0LDFd",
                "attributes": {
                  "fields": "[{\"name\":\"_id\",\"type\":\"string\",\"esTypes\":[\"_id\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":false},{\"name\":\"_index\",\"type\":\"string\",\"esTypes\":[\"_index\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":false},{\"name\":\"_score\",\"type\":\"number\",\"count\":0,\"scripted\":false,\"searchable\":false,\"aggregatable\":false,\"readFromDocValues\":false},{\"name\":\"_source\",\"type\":\"_source\",\"esTypes\":[\"_source\"],\"count\":0,\"scripted\":false,\"searchable\":false,\"aggregatable\":false,\"readFromDocValues\":false},{\"name\":\"_type\",\"type\":\"string\",\"esTypes\":[\"_type\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":false},{\"name\":\"a\",\"type\":\"string\",\"esTypes\":[\"text\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":false,\"readFromDocValues\":false},{\"name\":\"alt.markdown\",\"type\":\"string\",\"esTypes\":[\"text\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":false,\"readFromDocValues\":false},{\"name\":\"alt.markdown.keyword\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true,\"subType\":{\"multi\":{\"parent\":\"alt.markdown\"}}},{\"name\":\"alt.ssml\",\"type\":\"string\",\"esTypes\":[\"text\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":false,\"readFromDocValues\":false},{\"name\":\"alt.ssml.keyword\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true,\"subType\":{\"multi\":{\"parent\":\"alt.ssml\"}}},{\"name\":\"args\",\"type\":\"string\",\"esTypes\":[\"text\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":false,\"readFromDocValues\":false},{\"name\":\"args.keyword\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true,\"subType\":{\"multi\":{\"parent\":\"args\"}}},{\"name\":\"conditionalChaining\",\"type\":\"string\",\"esTypes\":[\"text\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":false,\"readFromDocValues\":false},{\"name\":\"conditionalChaining.keyword\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true,\"subType\":{\"multi\":{\"parent\":\"conditionalChaining\"}}},{\"name\":\"correctAnswers\",\"type\":\"string\",\"esTypes\":[\"text\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":false,\"readFromDocValues\":false},{\"name\":\"elicitResponse.response_sessionattr_namespace\",\"type\":\"string\",\"esTypes\":[\"text\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":false,\"readFromDocValues\":false},{\"name\":\"elicitResponse.response_sessionattr_namespace.keyword\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true,\"subType\":{\"multi\":{\"parent\":\"elicitResponse.response_sessionattr_namespace\"}}},{\"name\":\"elicitResponse.responsebot_hook\",\"type\":\"string\",\"esTypes\":[\"text\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":false,\"readFromDocValues\":false},{\"name\":\"elicitResponse.responsebot_hook.keyword\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true,\"subType\":{\"multi\":{\"parent\":\"elicitResponse.responsebot_hook\"}}},{\"name\":\"incorrectAnswers\",\"type\":\"string\",\"esTypes\":[\"text\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":false,\"readFromDocValues\":false},{\"name\":\"l\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"name\":\"next\",\"type\":\"string\",\"esTypes\":[\"text\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":false,\"readFromDocValues\":false},{\"name\":\"next.keyword\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true,\"subType\":{\"multi\":{\"parent\":\"next\"}}},{\"name\":\"qid\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"name\":\"question\",\"type\":\"string\",\"esTypes\":[\"text\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":false,\"readFromDocValues\":false},{\"name\":\"questions.q\",\"type\":\"string\",\"esTypes\":[\"text\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":false,\"readFromDocValues\":false},{\"name\":\"quiz\",\"type\":\"string\",\"esTypes\":[\"text\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":false,\"readFromDocValues\":false},{\"name\":\"quiz.keyword\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true,\"subType\":{\"multi\":{\"parent\":\"quiz\"}}},{\"name\":\"quniqueterms\",\"type\":\"string\",\"esTypes\":[\"text\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":false,\"readFromDocValues\":false},{\"name\":\"r.buttons.text\",\"type\":\"string\",\"esTypes\":[\"text\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":false,\"readFromDocValues\":false},{\"name\":\"r.buttons.text.keyword\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true,\"subType\":{\"multi\":{\"parent\":\"r.buttons.text\"}}},{\"name\":\"r.buttons.value\",\"type\":\"string\",\"esTypes\":[\"text\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":false,\"readFromDocValues\":false},{\"name\":\"r.buttons.value.keyword\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true,\"subType\":{\"multi\":{\"parent\":\"r.buttons.value\"}}},{\"name\":\"r.imageUrl\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"name\":\"r.subTitle\",\"type\":\"string\",\"esTypes\":[\"text\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":false,\"readFromDocValues\":false},{\"name\":\"r.subTitle.keyword\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true,\"subType\":{\"multi\":{\"parent\":\"r.subTitle\"}}},{\"name\":\"r.text\",\"type\":\"string\",\"esTypes\":[\"text\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":false,\"readFromDocValues\":false},{\"name\":\"r.text.keyword\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true,\"subType\":{\"multi\":{\"parent\":\"r.text\"}}},{\"name\":\"r.title\",\"type\":\"string\",\"esTypes\":[\"text\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":false,\"readFromDocValues\":false},{\"name\":\"r.url\",\"type\":\"string\",\"esTypes\":[\"text\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":false,\"readFromDocValues\":false},{\"name\":\"r.url.keyword\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true,\"subType\":{\"multi\":{\"parent\":\"r.url\"}}},{\"name\":\"responses.correct\",\"type\":\"string\",\"esTypes\":[\"text\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":false,\"readFromDocValues\":false},{\"name\":\"responses.correct.keyword\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true,\"subType\":{\"multi\":{\"parent\":\"responses.correct\"}}},{\"name\":\"responses.end\",\"type\":\"string\",\"esTypes\":[\"text\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":false,\"readFromDocValues\":false},{\"name\":\"responses.end.keyword\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true,\"subType\":{\"multi\":{\"parent\":\"responses.end\"}}},{\"name\":\"responses.incorrect\",\"type\":\"string\",\"esTypes\":[\"text\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":false,\"readFromDocValues\":false},{\"name\":\"responses.incorrect.keyword\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true,\"subType\":{\"multi\":{\"parent\":\"responses.incorrect\"}}},{\"name\":\"selected\",\"type\":\"boolean\",\"esTypes\":[\"boolean\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"name\":\"t\",\"type\":\"string\",\"esTypes\":[\"text\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":false,\"readFromDocValues\":false},{\"name\":\"type\",\"type\":\"string\",\"esTypes\":[\"text\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":false,\"readFromDocValues\":false},{\"name\":\"type.keyword\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"count\":0,\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true,\"subType\":{\"multi\":{\"parent\":\"type\"}}}]",
                  "title": "<INDEX_QNA>"
                },
                "references": [],
                "migrationVersion": {"index-pattern": "7.6.0"}
              }
            ]
          },
          "replaceTokenInBody": [
            {"f": "<INDEX_QNA>", "r": {"Fn::Sub": "${Var.QnaIndex}"}},
            {"f": "<INDEX_METRICS>", "r": {"Fn::Sub": "${Var.MetricsIndex}"}},
            {"f": "<INDEX_FEEDBACK>", "r": {"Fn::Sub": "${Var.FeedbackIndex}"}}
          ]
        }
      }
    },
    "ExamplesStack": {
      "Type": "AWS::CloudFormation::Stack",
      "Condition": "BuildExamples",
      "Properties": {
        "TemplateURL": {
          "Fn::Sub": "http://aws-bigdata-blog.s3.${AWS::Region}.amazonaws.com/artifacts/aws-ai-qna-bot/templates/examples.json"
        },
        "Parameters": {
          "QnAType": {"Fn::GetAtt": ["Var", "QnAType"]},
          "QuizType": {"Fn::GetAtt": ["Var", "QuizType"]},
          "Index": {"Fn::GetAtt": ["Var", "QnaIndex"]},
          "ESAddress": {"Fn::GetAtt": ["ESVar", "ESAddress"]},
          "BootstrapBucket": "aws-bigdata-blog",
          "BootstrapPrefix": "artifacts/aws-ai-qna-bot",
          "FeedbackFirehose": {"Fn::GetAtt": ["FeedbackFirehose", "Arn"]},
          "FeedbackFirehoseName": {"Ref": "FeedbackFirehose"},
          "CFNLambda": {"Fn::GetAtt": ["CFNLambda", "Arn"]},
          "CFNLambdaRole": {"Fn::GetAtt": ["CFNLambdaRole", "Arn"]},
          "ApiUrlName": {"Fn::GetAtt": ["ApiUrl", "Name"]},
          "AssetBucket": {"Ref": "AssetBucket"},
          "FulfillmentLambdaRole": {"Ref": "FulfillmentLambdaRole"},
          "QIDLambdaArn": {"Fn::GetAtt": ["ESQidLambda", "Arn"]}
        }
      }
    },
    "ExportStack": {
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "TemplateURL": {
          "Fn::Sub": "http://aws-bigdata-blog.s3.${AWS::Region}.amazonaws.com/artifacts/aws-ai-qna-bot/templates/export.json"
        },
        "Parameters": {
          "CFNLambda": {"Fn::GetAtt": ["CFNLambda", "Arn"]},
          "CFNInvokePolicy": {"Ref": "CFNInvokePolicy"},
          "BootstrapBucket": "aws-bigdata-blog",
          "BootstrapPrefix": "artifacts/aws-ai-qna-bot",
          "VarIndex": {"Fn::GetAtt": ["Var", "QnaIndex"]},
          "EsEndpoint": {"Fn::GetAtt": ["ESVar", "ESAddress"]},
          "EsProxyLambda": {"Fn::GetAtt": ["ESProxyLambda", "Arn"]},
          "ExportBucket": {"Ref": "ExportBucket"},
          "FallbackIntent": {"Ref": "IntentFallback"},
          "Intent": {"Ref": "Intent"},
          "BotName": {"Ref": "LexBot"},
          "Api": {"Ref": "API"},
          "ApiRootResourceId": {"Fn::GetAtt": ["API", "RootResourceId"]},
          "Encryption": {"Ref": "Encryption"},
          "Stage": {"Ref": "Stage"},
          "ApiDeploymentId": {"Ref": "Deployment"},
          "DefaultQnABotSettings": {"Ref": "DefaultQnABotSettings"},
          "CustomQnABotSettings": {"Ref": "CustomQnABotSettings"}
        }
      }
    },
    "ImportStack": {
      "Type": "AWS::CloudFormation::Stack",
      "DependsOn": ["PreUpgradeExport", "ElasticsearchDomainUpdate"],
      "Properties": {
        "TemplateURL": {
          "Fn::Sub": "http://aws-bigdata-blog.s3.${AWS::Region}.amazonaws.com/artifacts/aws-ai-qna-bot/templates/import.json"
        },
        "Parameters": {
          "CFNLambda": {"Fn::GetAtt": ["CFNLambda", "Arn"]},
          "CFNInvokePolicy": {"Ref": "CFNInvokePolicy"},
          "BootstrapBucket": "aws-bigdata-blog",
          "BootstrapPrefix": "artifacts/aws-ai-qna-bot",
          "EsEndpoint": {"Fn::GetAtt": ["ESVar", "ESAddress"]},
          "EsProxyLambda": {"Fn::GetAtt": ["ESProxyLambda", "Arn"]},
          "ImportBucket": {"Ref": "ImportBucket"},
          "ExportBucket": {"Ref": "ExportBucket"},
          "VarIndex": {"Fn::GetAtt": ["Var", "QnaIndex"]},
          "MetricsIndex": {"Fn::GetAtt": ["Var", "MetricsIndex"]},
          "FeedbackIndex": {"Fn::GetAtt": ["Var", "FeedbackIndex"]},
          "Encryption": {"Ref": "Encryption"}
        }
      }
    },
    "QNAInvokePermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {"Fn::GetAtt": ["FulfillmentLambda", "Arn"]},
        "Principal": "lex.amazonaws.com"
      }
    },
    "SlotType": {
      "Type": "Custom::LexSlotType",
      "Properties": {
        "ServiceToken": {"Fn::GetAtt": ["CFNLambda", "Arn"]},
        "createVersion": true,
        "description": "custom slot type 4.3.2 - v1",
        "enumerationValues": [
          {"value": "what is a chat bot"},
          {"value": "exit"},
          {"value": "quit"},
          {"value": "start the quiz"},
          {"value": "how much does it cost"},
          {"value": "what is a data warehouse"},
          {"value": "what is coronary artery disease"},
          {"value": "what is an electric vehicle"},
          {"value": "tell me about amazon alexa"},
          {"value": "tell me about body mass index"},
          {"value": "tell me about healthy eating"},
          {"value": "how do I know if I am a linux expert"},
          {"value": "should I stop smoking"},
          {"value": "how bad is excessive alcohol consumption"},
          {"value": "do I get enough sleep"},
          {"value": "tell me about cloud computing"},
          {"value": "do I get enough exercise"},
          {"value": "what is a good training program for windows"},
          {"value": "is programming bad for you"},
          {"value": "is bacon good for you"},
          {"value": "what is a stack overflow"},
          {"value": "should I use a document store"},
          {"value": "give me advice on regular training"},
          {"value": "what are the benfits of a cardio workout"},
          {"value": "should I learn javascript programming"},
          {"value": "is working in support good for my career"},
          {"value": "where can i learn python"},
          {"value": "how quickly will I recover from triple bypass surgery"},
          {"value": "how quickly will I find employment after graduating"},
          {"value": "how serious is a core dump"},
          {"value": "what is a graphics processing unit"},
          {"value": "what should I do when i see errors in the logfile"},
          {"value": "tell me about serverless computing"},
          {"value": "are computer viruses serious"},
          {"value": "what is a slam dunk"},
          {"value": "what is a first down"},
          {"value": "what is normal blood pressure"},
          {"value": "how many people live in Ireland"},
          {"value": "how do I measure my volume"},
          {"value": "what car is the fastest from zero to sixty"},
          {"value": "tell me the benefits of green vegetables"},
          {"value": "when should I call emergency services"},
          {"value": "where is the nearest computer repair store"},
          {"value": "when should I hire a consultant"},
          {"value": "tell me about artificial intelligence"},
          {"value": "does my family history affect my risk"},
          {"value": "is is important to run regular backups"},
          {"value": "do I have an unusual appearance"},
          {"value": "is there a gene associated with musical ability"},
          {"value": "what is data science"},
          {"value": "how do I donate money"},
          {"value": "how do I volunteer time"},
          {"value": "tell me about the phrase life is good"},
          {"value": "will robots rule the world"},
          {"value": "hello"},
          {"value": "feedback"},
          {"value": "One"},
          {"value": "Two"},
          {"value": "Three"},
          {"value": "next"},
          {"value": "previous"},
          {"value": "help"},
          {"value": "help me"},
          {"value": "yes"},
          {"value": "no"},
          {"value": "thumbs up"},
          {"value": "thumbs down"},
          {"value": "a"},
          {"value": "b"},
          {"value": "c"},
          {"value": "d"},
          {"value": "e"},
          {"value": "f"},
          {"value": "g"},
          {"value": "A"},
          {"value": "B"},
          {"value": "C"},
          {"value": "D"},
          {"value": "E"},
          {"value": "F"},
          {"value": "G"},
          {"value": "1234567890"}
        ]
      }
    },
    "Intent": {
      "Type": "Custom::LexIntent",
      "Properties": {
        "ServiceToken": {"Fn::GetAtt": ["CFNLambda", "Arn"]},
        "prefix": "fulfilment",
        "description": "custom intent 4.3.2 - v1",
        "createVersion": true,
        "sampleUtterances": ["{slot}"],
        "slots": [
          {
            "name": "slot",
            "slotType": {"Ref": "SlotType"},
            "slotConstraint": "Optional",
            "slotTypeVersion": "QNABOT-AUTO-ASSIGNED"
          }
        ],
        "fulfillmentActivity": {
          "type": "CodeHook",
          "codeHook": {
            "uri": {"Fn::GetAtt": ["FulfillmentLambda", "Arn"]},
            "messageVersion": "1.0"
          }
        }
      },
      "DependsOn": "QNAInvokePermission"
    },
    "IntentFallback": {
      "Type": "Custom::LexIntent",
      "Properties": {
        "ServiceToken": {"Fn::GetAtt": ["CFNLambda", "Arn"]},
        "prefix": "qnabotfallbackfulfilment",
        "description": "custom fallback intent 4.3.2 - v1",
        "createVersion": true,
        "fulfillmentActivity": {
          "type": "CodeHook",
          "codeHook": {
            "uri": {"Fn::GetAtt": ["FulfillmentLambda", "Arn"]},
            "messageVersion": "1.0"
          }
        },
        "parentIntentSignature": "AMAZON.FallbackIntent"
      },
      "DependsOn": "QNAInvokePermission"
    },
    "LexBot": {
      "Type": "Custom::LexBot",
      "Properties": {
        "ServiceToken": {"Fn::GetAtt": ["CFNLambda", "Arn"]},
        "name": {"Fn::Sub": "${AWS::StackName}-Bot"},
        "description": "QnABot primary bot 4.3.2 - v1",
        "locale": "en-US",
        "voiceId": "Joanna",
        "childDirected": false,
        "createVersion": true,
        "intents": [
          {"intentName": {"Ref": "Intent"}},
          {"intentName": {"Ref": "IntentFallback"}}
        ],
        "abortStatement": {
          "messages": [
            {
              "content": "Sorry, I did not understand that",
              "contentType": "PlainText"
            }
          ]
        }
      }
    },
    "VersionAlias": {
      "Type": "Custom::LexAlias",
      "DependsOn": "LexBot",
      "Properties": {
        "ServiceToken": {"Fn::GetAtt": ["CFNLambda", "Arn"]},
        "botName": {"Ref": "LexBot"},
        "name": "live",
        "description": "QnABot live alias 4.3.2 - v1"
      }
    },
    "Alexa": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {"Fn::GetAtt": ["FulfillmentLambda", "Arn"]},
        "Principal": "alexa-appkit.amazon.com"
      }
    },
    "FulfillmentCodeVersion": {
      "Type": "Custom::S3Version",
      "Properties": {
        "ServiceToken": {"Fn::GetAtt": ["CFNLambda", "Arn"]},
        "Bucket": "aws-bigdata-blog",
        "Key": {"Fn::Sub": "artifacts/aws-ai-qna-bot/lambda/fulfillment.zip"},
        "BuildDate": "2020-11-09T02:53:31.221Z"
      }
    },
    "FulfillmentLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "aws-bigdata-blog",
          "S3Key": {
            "Fn::Sub": "artifacts/aws-ai-qna-bot/lambda/fulfillment.zip"
          },
          "S3ObjectVersion": {"Ref": "FulfillmentCodeVersion"}
        },
        "Environment": {
          "Variables": {
            "ES_TYPE": {"Fn::GetAtt": ["Var", "QnAType"]},
            "ES_INDEX": {"Fn::GetAtt": ["Var", "QnaIndex"]},
            "ES_ADDRESS": {"Fn::GetAtt": ["ESVar", "ESAddress"]},
            "LAMBDA_DEFAULT_QUERY": {"Ref": "ESQueryLambda"},
            "LAMBDA_LOG": {"Ref": "ESLoggingLambda"},
            "ES_SERVICE_QID": {"Ref": "ESQidLambda"},
            "ES_SERVICE_PROXY": {"Ref": "ESProxyLambda"},
            "DYNAMODB_USERSTABLE": {"Ref": "UsersTable"},
            "DEFAULT_USER_POOL_JWKS_PARAM": {"Ref": "DefaultUserPoolJwksUrl"},
            "DEFAULT_SETTINGS_PARAM": {"Ref": "DefaultQnABotSettings"},
            "CUSTOM_SETTINGS_PARAM": {"Ref": "CustomQnABotSettings"},
            "ExampleJSLambdaQuiz": {
              "Fn::GetAtt": ["ExamplesStack", "Outputs.ExampleJSLambdaQuiz"]
            },
            "ExampleJSLambdahook": {
              "Fn::GetAtt": ["ExamplesStack", "Outputs.ExampleJSLambdahook"]
            },
            "ExamplePYTHONLambdaBotBroker": {
              "Fn::GetAtt": [
                "ExamplesStack",
                "Outputs.ExamplePYTHONLambdaBotBroker"
              ]
            },
            "ExamplePYTHONLambdaConnectCallback": {
              "Fn::GetAtt": [
                "ExamplesStack",
                "Outputs.ExamplePYTHONLambdaConnectCallback"
              ]
            },
            "ExamplePYTHONLambdaFeedback": {
              "Fn::GetAtt": [
                "ExamplesStack",
                "Outputs.ExamplePYTHONLambdaFeedback"
              ]
            },
            "ExamplePYTHONLambdaNext": {
              "Fn::GetAtt": ["ExamplesStack", "Outputs.ExamplePYTHONLambdaNext"]
            },
            "ExamplePYTHONLambdaPrevious": {
              "Fn::GetAtt": [
                "ExamplesStack",
                "Outputs.ExamplePYTHONLambdaPrevious"
              ]
            },
            "ExamplePYTHONLambdahello": {
              "Fn::GetAtt": [
                "ExamplesStack",
                "Outputs.ExamplePYTHONLambdahello"
              ]
            },
            "EXTCustomJSHook": {
              "Fn::GetAtt": ["ExamplesStack", "Outputs.EXTCustomJSHook"]
            },
            "EXTKendraFallback": {
              "Fn::GetAtt": ["ExamplesStack", "Outputs.EXTKendraFallback"]
            },
            "EXTCustomPYHook": {
              "Fn::GetAtt": ["ExamplesStack", "Outputs.EXTCustomPYHook"]
            },
            "QNAYesNo": {"Fn::GetAtt": ["ExamplesStack", "Outputs.QNAYesNo"]},
            "QNAYesNoExit": {
              "Fn::GetAtt": ["ExamplesStack", "Outputs.QNAYesNoExit"]
            },
            "QNADate": {"Fn::GetAtt": ["ExamplesStack", "Outputs.QNADate"]},
            "QNADayOfWeek": {
              "Fn::GetAtt": ["ExamplesStack", "Outputs.QNADayOfWeek"]
            },
            "QNAMonth": {"Fn::GetAtt": ["ExamplesStack", "Outputs.QNAMonth"]},
            "QNANumber": {"Fn::GetAtt": ["ExamplesStack", "Outputs.QNANumber"]},
            "QNAAge": {"Fn::GetAtt": ["ExamplesStack", "Outputs.QNAAge"]},
            "QNAPhoneNumber": {
              "Fn::GetAtt": ["ExamplesStack", "Outputs.QNAPhoneNumber"]
            },
            "QNATime": {"Fn::GetAtt": ["ExamplesStack", "Outputs.QNATime"]},
            "QNAEmailAddress": {
              "Fn::GetAtt": ["ExamplesStack", "Outputs.QNAEmailAddress"]
            },
            "QNAName": {"Fn::GetAtt": ["ExamplesStack", "Outputs.QNAName"]},
            "QNAWage": {"Fn::GetAtt": ["ExamplesStack", "Outputs.QNAWage"]},
            "QNASocialSecurity": {
              "Fn::GetAtt": ["ExamplesStack", "Outputs.QNASocialSecurity"]
            },
            "QNAPin": {"Fn::GetAtt": ["ExamplesStack", "Outputs.QNAPin"]}
          }
        },
        "Handler": "index.handler",
        "MemorySize": "1408",
        "Role": {"Fn::GetAtt": ["FulfillmentLambdaRole", "Arn"]},
        "Runtime": "nodejs10.x",
        "Timeout": 300,
        "Tags": [{"Key": "Type", "Value": "Fulfillment"}]
      }
    },
    "InvokePolicy": {
      "Type": "AWS::IAM::ManagedPolicy",
      "Properties": {
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": ["lambda:InvokeFunction"],
              "Resource": [
                "arn:aws:lambda:*:*:function:qna-*",
                "arn:aws:lambda:*:*:function:QNA-*",
                {"Fn::GetAtt": ["ESQueryLambda", "Arn"]},
                {"Fn::GetAtt": ["ESProxyLambda", "Arn"]},
                {"Fn::GetAtt": ["ESLoggingLambda", "Arn"]},
                {"Fn::GetAtt": ["ESQidLambda", "Arn"]},
                {
                  "Fn::GetAtt": ["ExamplesStack", "Outputs.ExampleJSLambdaQuiz"]
                },
                {
                  "Fn::GetAtt": ["ExamplesStack", "Outputs.ExampleJSLambdahook"]
                },
                {
                  "Fn::GetAtt": [
                    "ExamplesStack",
                    "Outputs.ExamplePYTHONLambdaBotBroker"
                  ]
                },
                {
                  "Fn::GetAtt": [
                    "ExamplesStack",
                    "Outputs.ExamplePYTHONLambdaConnectCallback"
                  ]
                },
                {
                  "Fn::GetAtt": [
                    "ExamplesStack",
                    "Outputs.ExamplePYTHONLambdaFeedback"
                  ]
                },
                {
                  "Fn::GetAtt": [
                    "ExamplesStack",
                    "Outputs.ExamplePYTHONLambdaNext"
                  ]
                },
                {
                  "Fn::GetAtt": [
                    "ExamplesStack",
                    "Outputs.ExamplePYTHONLambdaPrevious"
                  ]
                },
                {
                  "Fn::GetAtt": [
                    "ExamplesStack",
                    "Outputs.ExamplePYTHONLambdahello"
                  ]
                },
                {"Fn::GetAtt": ["ExamplesStack", "Outputs.EXTCustomJSHook"]},
                {"Fn::GetAtt": ["ExamplesStack", "Outputs.EXTKendraFallback"]},
                {"Fn::GetAtt": ["ExamplesStack", "Outputs.EXTCustomPYHook"]}
              ]
            }
          ]
        },
        "Roles": [{"Ref": "FulfillmentLambdaRole"}]
      }
    },
    "LexBotPolicy": {
      "Type": "AWS::IAM::ManagedPolicy",
      "Properties": {
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": ["lex:PostText"],
              "Resource": ["arn:aws:lex:*:*:bot:QNA*"]
            }
          ]
        },
        "Roles": [{"Ref": "FulfillmentLambdaRole"}]
      }
    },
    "FulfillmentLambdaRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {"Service": "lambda.amazonaws.com"},
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Path": "/",
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
          "arn:aws:iam::aws:policy/TranslateReadOnly",
          "arn:aws:iam::aws:policy/ComprehendReadOnly",
          {"Ref": "QueryPolicy"}
        ],
        "Policies": [
          {
            "PolicyName": "ParamStorePolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": ["ssm:GetParameter", "ssm:GetParameters"],
                  "Resource": [
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:ssm:",
                          {"Fn::Sub": "${AWS::Region}:"},
                          {"Fn::Sub": "${AWS::AccountId}:"},
                          "parameter/",
                          {"Ref": "DefaultQnABotSettings"}
                        ]
                      ]
                    },
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:ssm:",
                          {"Fn::Sub": "${AWS::Region}:"},
                          {"Fn::Sub": "${AWS::AccountId}:"},
                          "parameter/",
                          {"Ref": "CustomQnABotSettings"}
                        ]
                      ]
                    },
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:ssm:",
                          {"Fn::Sub": "${AWS::Region}:"},
                          {"Fn::Sub": "${AWS::AccountId}:"},
                          "parameter/",
                          {"Ref": "DefaultUserPoolJwksUrl"}
                        ]
                      ]
                    }
                  ]
                }
              ]
            }
          },
          {
            "PolicyName": "DynamoDBPolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": ["dynamodb:GetItem", "dynamodb:PutItem"],
                  "Resource": [{"Fn::GetAtt": ["UsersTable", "Arn"]}]
                }
              ]
            }
          }
        ]
      }
    },
    "LexBuildLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "aws-bigdata-blog",
          "S3Key": {"Fn::Sub": "artifacts/aws-ai-qna-bot/lambda/lex-build.zip"},
          "S3ObjectVersion": {"Ref": "LexBuildCodeVersion"}
        },
        "Environment": {
          "Variables": {
            "UTTERANCE_BUCKET": {"Ref": "AssetBucket"},
            "UTTERANCE_KEY": "default-utterances.json",
            "POLL_LAMBDA": {"Fn::GetAtt": ["LexBuildLambdaPoll", "Arn"]},
            "STATUS_BUCKET": {"Ref": "BuildStatusBucket"},
            "STATUS_KEY": "status.json",
            "BOTNAME": {"Ref": "LexBot"},
            "BOTALIAS": {"Ref": "VersionAlias"},
            "SLOTTYPE": {"Ref": "SlotType"},
            "INTENT": {"Ref": "Intent"},
            "INTENTFALLBACK": {"Ref": "IntentFallback"},
            "ADDRESS": {
              "Fn::Join": [
                "",
                ["https://", {"Fn::GetAtt": ["ESVar", "ESAddress"]}]
              ]
            },
            "INDEX": {"Fn::GetAtt": ["Var", "index"]}
          }
        },
        "Handler": "index.handler",
        "MemorySize": "128",
        "Role": {"Fn::GetAtt": ["LexBuildLambdaRole", "Arn"]},
        "Runtime": "nodejs10.x",
        "Timeout": 300,
        "Tags": [{"Key": "Type", "Value": "Api"}]
      }
    },
    "LexBuildLambdaStart": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "var aws=require('aws-sdk')\naws.config.region=process.env.AWS_REGION\nvar lambda=new aws.Lambda()\nvar lex=new aws.LexModelBuildingService\nvar s3=new aws.S3()\nvar crypto=require('crypto')\n\nexports.handler=function(event,context,callback){\n    var token=crypto.randomBytes(16).toString('base64')\n    return s3.putObject({\n        Bucket:process.env.STATUS_BUCKET,\n        Key:process.env.STATUS_KEY,\n        Body:JSON.stringify({\n            status:\"Starting\",\n            token:token\n        })\n    }).promise()\n    .then(function(){\n        return lambda.invoke({\n           FunctionName:process.env.BUILD_FUNCTION,\n           InvocationType:\"Event\",\n           Payload:\"{}\"\n        }).promise()\n    })\n    .then(()=>callback(null,{token}))\n    .catch(callback)\n}\n\n\n"
        },
        "Environment": {
          "Variables": {
            "STATUS_BUCKET": {"Ref": "BuildStatusBucket"},
            "STATUS_KEY": "status.json",
            "BUILD_FUNCTION": {"Fn::GetAtt": ["LexBuildLambda", "Arn"]}
          }
        },
        "Handler": "index.handler",
        "MemorySize": "128",
        "Role": {"Fn::GetAtt": ["LexBuildLambdaRole", "Arn"]},
        "Runtime": "nodejs10.x",
        "Timeout": 300,
        "Tags": [{"Key": "Type", "Value": "Api"}]
      }
    },
    "LexBuildLambdaPoll": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "var aws=require('aws-sdk')\naws.config.region=process.env.AWS_REGION\nvar lambda=new aws.Lambda()\nvar lex=new aws.LexModelBuildingService\nvar s3=new aws.S3()\nvar crypto=require('crypto')\n\nexports.handler=function(event,context,callback){\n    return s3.getObject({\n        Bucket:process.env.STATUS_BUCKET,\n        Key:process.env.STATUS_KEY\n    }).promise()\n    .then(x=>JSON.parse(x.Body.toString()))\n    .then(status=>{\n        return lex.getBot({\n            name:process.env.BOT_NAME,\n            versionOrAlias:\"$LATEST\"\n        }).promise()\n        .then(result=>{\n            status.status=result.status\n            if(result.status===\"BUILDING\"){\n                return new Promise(function(res,rej){\n                    setTimeout(()=>{\n                        lambda.invoke({\n                           FunctionName:process.env.AWS_LAMBDA_FUNCTION_NAME,\n                           InvocationType:\"Event\",\n                           Payload:JSON.stringify(event)\n                        }).promise()\n                        .then(res).catch(rej)\n                    },2*1000    \n                    )\n                })\n            }else{\n                return s3.putObject({\n                    Bucket:process.env.STATUS_BUCKET,\n                    Key:process.env.STATUS_KEY,\n                    Body:JSON.stringify(status)\n                }).promise()\n            }\n        })\n    })\n    .then(()=>callback(null))\n    .catch(callback)\n}\n"
        },
        "Environment": {
          "Variables": {
            "STATUS_KEY": "status.json",
            "STATUS_BUCKET": {"Ref": "BuildStatusBucket"},
            "BOT_NAME": {"Ref": "LexBot"}
          }
        },
        "Handler": "index.handler",
        "MemorySize": "128",
        "Role": {"Fn::GetAtt": ["LexBuildLambdaRole", "Arn"]},
        "Runtime": "nodejs10.x",
        "Timeout": 300,
        "Tags": [{"Key": "Type", "Value": "Api"}]
      }
    },
    "LexBuildCodeVersion": {
      "Type": "Custom::S3Version",
      "Properties": {
        "ServiceToken": {"Fn::GetAtt": ["CFNLambda", "Arn"]},
        "Bucket": "aws-bigdata-blog",
        "Key": {"Fn::Sub": "artifacts/aws-ai-qna-bot/lambda/lex-build.zip"},
        "BuildDate": "2020-11-09T02:53:31.222Z"
      }
    },
    "LexBuildInvokePolicy": {
      "Type": "AWS::IAM::ManagedPolicy",
      "Properties": {
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": ["lambda:InvokeFunction"],
              "Resource": [
                {"Fn::GetAtt": ["LexBuildLambda", "Arn"]},
                {"Fn::GetAtt": ["LexBuildLambdaPoll", "Arn"]}
              ]
            }
          ]
        },
        "Roles": [{"Ref": "LexBuildLambdaRole"}]
      }
    },
    "LexBuildLambdaRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {"Service": "lambda.amazonaws.com"},
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "AssetBucketAccess",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": ["s3:Get*"],
                  "Resource": [
                    {"Fn::Sub": "arn:aws:s3:::${AssetBucket}*"},
                    {"Fn::Sub": "arn:aws:s3:::${BuildStatusBucket}*"}
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": ["s3:Put*"],
                  "Resource": [
                    {"Fn::Sub": "arn:aws:s3:::${BuildStatusBucket}*"}
                  ]
                }
              ]
            }
          }
        ],
        "Path": "/",
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
          {"Ref": "QueryPolicy"},
          "arn:aws:iam::aws:policy/AmazonLexFullAccess"
        ]
      }
    },
    "BuildStatusBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "LifecycleConfiguration": {
          "Rules": [
            {"NoncurrentVersionExpirationInDays": 1, "Status": "Enabled"},
            {
              "AbortIncompleteMultipartUpload": {"DaysAfterInitiation": 1},
              "Status": "Enabled"
            }
          ]
        },
        "VersioningConfiguration": {"Status": "Enabled"},
        "BucketEncryption": {
          "Fn::If": [
            "Encrypted",
            {
              "ServerSideEncryptionConfiguration": [
                {"ServerSideEncryptionByDefault": {"SSEAlgorithm": "AES256"}}
              ]
            },
            {"Ref": "AWS::NoValue"}
          ]
        }
      }
    },
    "BuildStatusClear": {
      "Type": "Custom::S3Clear",
      "DependsOn": ["CFNInvokePolicy"],
      "Properties": {
        "ServiceToken": {"Fn::GetAtt": ["CFNLambda", "Arn"]},
        "Bucket": {"Ref": "BuildStatusBucket"}
      }
    },
    "LexAccessPolicy": {
      "Type": "AWS::IAM::ManagedPolicy",
      "Properties": {
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": ["lex:PostContent", "lex:PostText"],
              "Resource": ["*"]
            },
            {
              "Effect": "Allow",
              "Action": ["polly:SynthesizeSpeech"],
              "Resource": ["*"]
            }
          ]
        },
        "Roles": {
          "Fn::If": [
            "Public",
            [
              {"Ref": "AdminRole"},
              {"Ref": "UnauthenticatedRole"},
              {"Ref": "UserRole"}
            ],
            [{"Ref": "AdminRole"}, {"Ref": "UserRole"}]
          ]
        }
      }
    },
    "ApiGatewayCloudWatchLogsRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {"Service": ["apigateway.amazonaws.com"]},
              "Action": ["sts:AssumeRole"]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "ApiGatewayLogsPolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:DescribeLogGroups",
                    "logs:DescribeLogStreams",
                    "logs:PutLogEvents",
                    "logs:GetLogEvents",
                    "logs:FilterLogEvents"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },
    "ApiGatewayRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {"Service": ["apigateway.amazonaws.com"]},
              "Action": ["sts:AssumeRole"]
            }
          ]
        }
      }
    },
    "ESProxyCodeVersion": {
      "Type": "Custom::S3Version",
      "Properties": {
        "ServiceToken": {"Fn::GetAtt": ["CFNLambda", "Arn"]},
        "Bucket": "aws-bigdata-blog",
        "Key": {"Fn::Sub": "artifacts/aws-ai-qna-bot/lambda/proxy-es.zip"},
        "BuildDate": "2020-11-09T02:53:31.223Z"
      }
    },
    "UtteranceLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "aws-bigdata-blog",
          "S3Key": {"Fn::Sub": "artifacts/aws-ai-qna-bot/lambda/proxy-es.zip"},
          "S3ObjectVersion": {"Ref": "ESProxyCodeVersion"}
        },
        "Environment": {
          "Variables": {
            "ES_INDEX": {"Fn::GetAtt": ["Var", "QnaIndex"]},
            "ES_ADDRESS": {"Fn::GetAtt": ["ESVar", "ESAddress"]},
            "UTTERANCE_BUCKET": {"Ref": "AssetBucket"},
            "UTTERANCE_KEY": "default-utterances.json"
          }
        },
        "Handler": "index.utterances",
        "MemorySize": "1408",
        "Role": {"Fn::GetAtt": ["ESProxyLambdaRole", "Arn"]},
        "Runtime": "nodejs10.x",
        "Timeout": 300,
        "Tags": [{"Key": "Type", "Value": "Service"}]
      }
    },
    "ESQidLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "aws-bigdata-blog",
          "S3Key": {"Fn::Sub": "artifacts/aws-ai-qna-bot/lambda/proxy-es.zip"},
          "S3ObjectVersion": {"Ref": "ESProxyCodeVersion"}
        },
        "Environment": {
          "Variables": {
            "ES_INDEX": {"Fn::GetAtt": ["Var", "QnaIndex"]},
            "ES_ADDRESS": {"Fn::GetAtt": ["ESVar", "ESAddress"]}
          }
        },
        "Handler": "index.qid",
        "MemorySize": "1408",
        "Role": {"Fn::GetAtt": ["ESProxyLambdaRole", "Arn"]},
        "Runtime": "nodejs10.x",
        "Timeout": 300,
        "Tags": [{"Key": "Type", "Value": "Service"}]
      }
    },
    "ESCleaningLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "aws-bigdata-blog",
          "S3Key": {"Fn::Sub": "artifacts/aws-ai-qna-bot/lambda/proxy-es.zip"},
          "S3ObjectVersion": {"Ref": "ESProxyCodeVersion"}
        },
        "Environment": {
          "Variables": {
            "ES_INDEX": {"Fn::GetAtt": ["Var", "QnaIndex"]},
            "ES_ADDRESS": {"Fn::GetAtt": ["ESVar", "ESAddress"]},
            "FEEDBACK_DELETE_RANGE_MINUTES": 43200,
            "METRICS_DELETE_RANGE_MINUTES": 43200
          }
        },
        "Handler": "index.cleanmetrics",
        "MemorySize": "1408",
        "Role": {"Fn::GetAtt": ["ESProxyLambdaRole", "Arn"]},
        "Runtime": "nodejs10.x",
        "Timeout": 300,
        "Tags": [{"Key": "Type", "Value": "Service"}]
      }
    },
    "ScheduledESCleaning": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "Description": "",
        "ScheduleExpression": "rate(1 day)",
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {"Fn::GetAtt": ["ESCleaningLambda", "Arn"]},
            "Id": "ES_Cleaning_Function"
          }
        ]
      }
    },
    "PermissionForEventsToInvokeLambda": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {"Ref": "ESCleaningLambda"},
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": {"Fn::GetAtt": ["ScheduledESCleaning", "Arn"]}
      }
    },
    "ESLoggingLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "aws-bigdata-blog",
          "S3Key": {"Fn::Sub": "artifacts/aws-ai-qna-bot/lambda/proxy-es.zip"},
          "S3ObjectVersion": {"Ref": "ESProxyCodeVersion"}
        },
        "Environment": {
          "Variables": {"FIREHOSE_NAME": {"Ref": "GeneralFirehose"}}
        },
        "Handler": "index.logging",
        "MemorySize": "1408",
        "Role": {"Fn::GetAtt": ["ESLoggingLambdaRole", "Arn"]},
        "Runtime": "nodejs10.x",
        "Timeout": 300,
        "Tags": [{"Key": "Type", "Value": "Logging"}]
      }
    },
    "ESQueryLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "aws-bigdata-blog",
          "S3Key": {"Fn::Sub": "artifacts/aws-ai-qna-bot/lambda/proxy-es.zip"},
          "S3ObjectVersion": {"Ref": "ESProxyCodeVersion"}
        },
        "Environment": {
          "Variables": {
            "DEFAULT_SETTINGS_PARAM": {"Ref": "DefaultQnABotSettings"},
            "CUSTOM_SETTINGS_PARAM": {"Ref": "CustomQnABotSettings"}
          }
        },
        "Handler": "index.query",
        "MemorySize": "1408",
        "Role": {"Fn::GetAtt": ["ESProxyLambdaRole", "Arn"]},
        "Runtime": "nodejs10.x",
        "Timeout": 300,
        "Tags": [{"Key": "Type", "Value": "Query"}]
      }
    },
    "ESProxyLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "aws-bigdata-blog",
          "S3Key": {"Fn::Sub": "artifacts/aws-ai-qna-bot/lambda/proxy-es.zip"},
          "S3ObjectVersion": {"Ref": "ESProxyCodeVersion"}
        },
        "Environment": {
          "Variables": {
            "ES_TYPE": {"Fn::GetAtt": ["Var", "QnAType"]},
            "ES_INDEX": {"Fn::GetAtt": ["Var", "QnaIndex"]},
            "ES_ADDRESS": {"Fn::GetAtt": ["ESVar", "ESAddress"]},
            "DEFAULT_SETTINGS_PARAM": {"Ref": "DefaultQnABotSettings"},
            "CUSTOM_SETTINGS_PARAM": {"Ref": "CustomQnABotSettings"}
          }
        },
        "Handler": "index.handler",
        "MemorySize": "1408",
        "Role": {"Fn::GetAtt": ["ESProxyLambdaRole", "Arn"]},
        "Runtime": "nodejs10.x",
        "Timeout": 300,
        "Tags": [{"Key": "Type", "Value": "Service"}]
      }
    },
    "ESProxyLambdaRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {"Service": "lambda.amazonaws.com"},
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Path": "/",
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
          "arn:aws:iam::aws:policy/TranslateReadOnly",
          {"Ref": "QueryPolicy"},
          "arn:aws:iam::aws:policy/AmazonLexFullAccess"
        ],
        "Policies": [
          {
            "PolicyName": "ParamStorePolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": ["ssm:GetParameter", "ssm:GetParameters"],
                  "Resource": "*"
                }
              ]
            }
          },
          {
            "PolicyName": "LambdaInvokePolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": ["lambda:InvokeFunction"],
                  "Resource": [
                    "arn:aws:lambda:*:*:function:qna*",
                    "arn:aws:lambda:*:*:function:QNA*"
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "ESLoggingLambdaRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {"Service": "lambda.amazonaws.com"},
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "LambdaGeneralFirehoseQNALambda",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": ["lambda:InvokeFunction"],
                  "Resource": [
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:lambda:",
                          {"Ref": "AWS::Region"},
                          ":",
                          {"Ref": "AWS::AccountId"},
                          ":function:qna-*"
                        ]
                      ]
                    },
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:lambda:",
                          {"Ref": "AWS::Region"},
                          ":",
                          {"Ref": "AWS::AccountId"},
                          ":function:QNA-*"
                        ]
                      ]
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": ["firehose:PutRecord", "firehose:PutRecordBatch"],
                  "Resource": [{"Fn::GetAtt": ["GeneralFirehose", "Arn"]}]
                }
              ]
            }
          }
        ],
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        ]
      }
    },
    "QueryPolicy": {
      "Type": "AWS::IAM::ManagedPolicy",
      "Properties": {
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {"Effect": "Allow", "Action": ["es:*"], "Resource": ["*"]},
            {
              "Effect": "Allow",
              "Action": ["kendra:Query"],
              "Resource": [
                {
                  "Fn::Sub": "arn:aws:kendra:${AWS::Region}:${AWS::AccountId}:index/*"
                }
              ]
            },
            {
              "Effect": "Allow",
              "Action": ["s3:Get*"],
              "Resource": [{"Fn::Sub": "arn:aws:s3:::${AssetBucket}*"}]
            },
            {
              "Effect": "Allow",
              "Action": ["comprehend:DetectSyntax"],
              "Resource": ["*"]
            }
          ]
        }
      }
    },
    "LexProxyLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "var aws=require('aws-sdk')\naws.config.region=process.env.AWS_REGION\nvar lex=new aws.LexModelBuildingService()\n\nexports.handler = (event, context, callback) => {\n    console.log('Received event:', JSON.stringify(event, null, 2));\n    \n    lex[event.fnc](event.params).promise()\n    .then(function(x){\n        console.log(\"Response: \"+JSON.stringify(x,null,2))\n        callback(null,x)\n    })\n    .catch(function(y){\n        console.log(\"Error: \"+y)\n        callback(JSON.stringify({\n            type:\"[InternalServiceError]\",\n            data:y\n        }))\n    })\n};\n\n"
        },
        "Handler": "index.handler",
        "MemorySize": "128",
        "Role": {"Fn::GetAtt": ["LexProxyLambdaRole", "Arn"]},
        "Runtime": "nodejs10.x",
        "Timeout": 300,
        "Tags": [{"Key": "Type", "Value": "Api"}]
      }
    },
    "LexStatusLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "var aws=require('aws-sdk')\naws.config.region=process.env.AWS_REGION\nvar lex=new aws.LexModelBuildingService()\nvar s3=new aws.S3()\nexports.handler = (event, context, callback) => {\n    console.log('Received event:', JSON.stringify(event, null, 2));\n    \n    s3.getObject({\n        Bucket:process.env.STATUS_BUCKET,\n        Key:process.env.STATUS_KEY\n    }).promise()\n    .then(x=>JSON.parse(x.Body.toString()))\n    .catch(x=>{\n        console.log(x)\n        return {}\n    })\n    .then(result=>{\n        return lex.getBot({\n            name:process.env.BOT_NAME,\n            versionOrAlias:\"$LATEST\"\n        }).promise()\n        .then(bot=>{\n            bot.build=result\n            return bot\n        })\n    })\n    .then(function(x){\n        console.log(\"Response: \"+JSON.stringify(x,null,2))\n        callback(null,x)\n    })\n    .catch(function(y){\n        console.log(\"Error: \"+y)\n        callback(JSON.stringify({\n            type:\"[InternalServiceError]\",\n            data:y\n        }))\n    })\n};\n\n"
        },
        "Environment": {
          "Variables": {
            "STATUS_KEY": "status.json",
            "STATUS_BUCKET": {"Ref": "BuildStatusBucket"},
            "BOT_NAME": {"Ref": "LexBot"}
          }
        },
        "Handler": "index.handler",
        "MemorySize": "128",
        "Role": {"Fn::GetAtt": ["LexProxyLambdaRole", "Arn"]},
        "Runtime": "nodejs10.x",
        "Timeout": 300,
        "Tags": [{"Key": "Type", "Value": "Api"}]
      }
    },
    "LexProxyLambdaRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {"Service": "lambda.amazonaws.com"},
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Path": "/",
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
          "arn:aws:iam::aws:policy/AmazonLexFullAccess"
        ],
        "Policies": [
          {
            "PolicyName": "Access",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": ["s3:Get*"],
                  "Resource": [
                    {"Fn::Sub": "arn:aws:s3:::${BuildStatusBucket}*"}
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "KibanaRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {"Federated": "cognito-identity.amazonaws.com"},
              "Action": "sts:AssumeRoleWithWebIdentity",
              "Condition": {
                "StringEquals": {
                  "cognito-identity.amazonaws.com:aud": {"Ref": "KibanaIdPool"}
                }
              }
            }
          ]
        },
        "Path": "/",
        "ManagedPolicyArns": [],
        "Policies": []
      }
    },
    "AdminRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {"Federated": "cognito-identity.amazonaws.com"},
              "Action": "sts:AssumeRoleWithWebIdentity",
              "Condition": {
                "StringEquals": {
                  "cognito-identity.amazonaws.com:aud": {"Ref": "IdPool"}
                }
              }
            }
          ]
        },
        "Path": "/",
        "ManagedPolicyArns": [],
        "Policies": [
          {
            "PolicyName": "apiAccess",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": ["es:ESHttp*"],
                  "Resource": [{"Fn::GetAtt": ["ESVar", "ESArn"]}]
                },
                {
                  "Effect": "Allow",
                  "Action": ["execute-api:*"],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${API}/*/*/*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": ["s3:PutObject"],
                  "Resource": [
                    {"Fn::Sub": "arn:aws:s3:::${ImportBucket}/data/*"},
                    {"Fn::Sub": "arn:aws:s3:::${TestAllBucket}/data/*"}
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": ["s3:GetObject"],
                  "Resource": [
                    {"Fn::Sub": "arn:aws:s3:::${ExportBucket}/data/*"},
                    {"Fn::Sub": "arn:aws:s3:::${TestAllBucket}/data/*"}
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": ["ssm:GetParameters", "ssm:PutParameter"],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${DefaultQnABotSettings}"
                    },
                    {
                      "Fn::Sub": "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${CustomQnABotSettings}"
                    }
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "UserRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {"Federated": "cognito-identity.amazonaws.com"},
              "Action": "sts:AssumeRoleWithWebIdentity",
              "Condition": {
                "StringEquals": {
                  "cognito-identity.amazonaws.com:aud": {"Ref": "IdPool"}
                }
              }
            }
          ]
        },
        "Path": "/",
        "ManagedPolicyArns": []
      }
    },
    "UnauthenticatedRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {"Federated": "cognito-identity.amazonaws.com"},
              "Action": "sts:AssumeRoleWithWebIdentity",
              "Condition": {
                "StringEquals": {
                  "cognito-identity.amazonaws.com:aud": {"Ref": "IdPool"}
                }
              }
            }
          ]
        },
        "Path": "/",
        "ManagedPolicyArns": []
      }
    },
    "CFNLambdaRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {"Service": "lambda.amazonaws.com"},
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Path": "/",
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        ],
        "Policies": [
          {
            "PolicyName": "access",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {"Effect": "Allow", "Action": ["es:*"], "Resource": ["*"]},
                {
                  "Effect": "Allow",
                  "Action": [
                    "lex:PutSlotType",
                    "lex:GetSlotType",
                    "lex:DeleteSlotType",
                    "lex:PutIntent",
                    "lex:GetIntent",
                    "lex:DeleteIntent",
                    "lex:PutBot",
                    "lex:GetBot",
                    "lex:DeleteBot",
                    "lex:PutBotAlias",
                    "lex:DeleteBotAlias",
                    "lex:GetBotAlias",
                    "lex:GetBotVersions",
                    "lex:GetIntentVersions",
                    "lex:GetSlotTypeVersions"
                  ],
                  "Resource": ["*"]
                },
                {
                  "Effect": "Allow",
                  "Action": ["apigateway:*"],
                  "Resource": ["*"]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "cognito-identity:SetIdentityPoolRoles",
                    "cognito-identity:GetIdentityPoolRoles",
                    "iam:PassRole",
                    "iam:CreateServiceLinkedRole"
                  ],
                  "Resource": ["*"]
                },
                {
                  "Effect": "Allow",
                  "Action": ["cognito-idp:*"],
                  "Resource": ["*"]
                },
                {
                  "Effect": "Allow",
                  "Action": ["s3:*"],
                  "Resource": [{"Fn::Sub": "arn:aws:s3:::*"}]
                }
              ]
            }
          }
        ]
      }
    },
    "Bot": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {"Fn::GetAtt": ["API", "RootResourceId"]},
        "PathPart": "bot",
        "RestApiId": {"Ref": "API"}
      }
    },
    "AlexaApi": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {"Ref": "Bot"},
        "PathPart": "alexa",
        "RestApiId": {"Ref": "API"}
      }
    },
    "AlexaSchema": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "AWS_IAM",
        "HttpMethod": "GET",
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod": "POST",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {"Ref": "AWS::Region"},
                ":lambda:path/2015-03-31/functions/",
                {"Fn::GetAtt": ["UtteranceLambda", "Arn"]},
                "/invocations"
              ]
            ]
          },
          "IntegrationResponses": [
            {
              "StatusCode": 200,
              "ResponseTemplates": {
                "application/json": {
                  "Fn::Sub": "#set($inputRoot = $input.path('$'))\n#set($utterances = $inputRoot.utterances)\n\n{\n  \"interactionModel\": {\n    \"languageModel\": {\n      \"invocationName\": \"q and a\",\n      \"types\": [\n        {\n          \"name\": \"EXAMPLE_QUESTIONS\",\n          \"values\": [\n            #foreach( $utterance in $utterances)\n                {\"name\":{\n                    \"value\":\"$utterance\" \n                }}#if( $foreach.hasNext ),#end\n            #end\n          ]\n        }\n        ## {\n        ##     \"name\": \"EXAMPLE_QUESTIONS\",\n        ##     \"values\": [\n        ##         {\n        ##             \"name\": {\n        ##                 \"value\": \"this is required\"\n        ##             }\n        ##         }\n        ##     ]\n        ##   }\n      ],\n      \"intents\": [\n        {\n          \"slots\": [\n            {\n              \"name\": \"QnA_slot\",\n              \"type\": \"EXAMPLE_QUESTIONS\"\n            }\n          ],\n          \"name\": \"Qna_intent\",\n          \"samples\": [\n            \"{QnA_slot}\"\n          ]\n        },\n        {\n          \"name\": \"AMAZON.StopIntent\"\n        },\n        {\n          \"name\": \"AMAZON.RepeatIntent\"\n        },\n        {\n          \"name\": \"AMAZON.FallbackIntent\"\n        },\n        {\n          \"name\": \"AMAZON.CancelIntent\"\n        }\n      ]\n    }\n  }\n}\n"
                }
              }
            },
            {
              "SelectionPattern": ".*[InternalServiceError].*",
              "StatusCode": 500,
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
              }
            },
            {
              "SelectionPattern": ".*[BadRequest].*",
              "StatusCode": 400,
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
              }
            },
            {
              "SelectionPattern": ".*[Conflict].*",
              "StatusCode": 409,
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
              }
            },
            {
              "SelectionPattern": ".*[NotFound].*",
              "StatusCode": 404,
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
              }
            }
          ],
          "RequestTemplates": {
            "application/json": {
              "Fn::Sub": "{\n    \"name\":\"${SlotType}\",\n    \"version\":\"\\$LATEST\"\n}                \n               \n\n"
            }
          }
        },
        "ResourceId": {"Ref": "AlexaApi"},
        "MethodResponses": [
          {
            "StatusCode": 200,
            "ResponseParameters": {"method.response.header.date": true}
          },
          {"StatusCode": 404},
          {"StatusCode": 500}
        ],
        "RestApiId": {"Ref": "API"}
      }
    },
    "BotPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "AWS_IAM",
        "HttpMethod": "POST",
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod": "POST",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {"Ref": "AWS::Region"},
                ":lambda:path/2015-03-31/functions/",
                {"Fn::GetAtt": ["LexBuildLambdaStart", "Arn"]},
                "/invocations"
              ]
            ]
          },
          "IntegrationResponses": [
            {
              "StatusCode": 200,
              "ResponseTemplates": {
                "application/json": {
                  "Fn::Sub": "{\"token\":\"$input.path('$.token')\"}\n"
                }
              }
            },
            {
              "SelectionPattern": ".*[InternalServiceError].*",
              "StatusCode": 500,
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
              }
            },
            {
              "SelectionPattern": ".*[BadRequest].*",
              "StatusCode": 400,
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
              }
            },
            {
              "SelectionPattern": ".*[Conflict].*",
              "StatusCode": 409,
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
              }
            },
            {
              "SelectionPattern": ".*[NotFound].*",
              "StatusCode": 404,
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
              }
            }
          ]
        },
        "ResourceId": {"Ref": "Bot"},
        "MethodResponses": [
          {
            "StatusCode": 200,
            "ResponseParameters": {"method.response.header.date": true}
          },
          {"StatusCode": 404},
          {"StatusCode": 500}
        ],
        "RestApiId": {"Ref": "API"}
      }
    },
    "BotGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "AWS_IAM",
        "HttpMethod": "GET",
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod": "POST",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {"Ref": "AWS::Region"},
                ":lambda:path/2015-03-31/functions/",
                {"Fn::GetAtt": ["LexStatusLambda", "Arn"]},
                "/invocations"
              ]
            ]
          },
          "IntegrationResponses": [
            {
              "StatusCode": 200,
              "ResponseTemplates": {
                "application/json": {
                  "Fn::Sub": "#set ( $root=\"https://${!context.apiId}.execute-api.${!stageVariables.Region}.amazonaws.com/${!context.stage}\")\n#set($inputRoot = $input.path('$'))\n\n{\n    \"lambdaArn\": \"${FulfillmentLambda.Arn}\",\n    \"lambdaRole\":\"${FulfillmentLambdaRole}\",\n    \"intent\":\"${Intent}\",\n    \"intentFallback\":\"${IntentFallback}\",\n    \"status\":\"$inputRoot.status\",\n    \"build\":$input.json('$.build'),\n    \"botname\":\"${LexBot}\",\n    \"botversion\":\"${VersionAlias}\",\n    \"messages\":{\n        \"clarification\":[\n            #foreach($message in $input.path('$.clarificationPrompt.messages'))\n            \"$message.content\"#if( $foreach.hasNext ),#end\n            #end\n        ],\n        \"abort\":[\n            #foreach($message in $input.path('$.abortStatement.messages'))\n            \"$message.content\"#if( $foreach.hasNext ),#end\n            #end\n        ]\n    },\n    \"_links\":{\n        \"alexa\":{\n            \"href\":\"$root/bot/alexa\"\n        }\n    }\n}\n\n"
                }
              }
            },
            {
              "SelectionPattern": ".*[InternalServiceError].*",
              "StatusCode": 500,
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
              }
            },
            {
              "SelectionPattern": ".*[BadRequest].*",
              "StatusCode": 400,
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
              }
            },
            {
              "SelectionPattern": ".*[Conflict].*",
              "StatusCode": 409,
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
              }
            },
            {
              "SelectionPattern": ".*[NotFound].*",
              "StatusCode": 404,
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
              }
            }
          ],
          "RequestTemplates": {
            "application/json": {
              "Fn::Sub": "{\n    \"fnc\":\"getBot\",\n    \"params\":{\n        \"name\":\"${LexBot}\",\n        \"versionOrAlias\":\"\\$LATEST\"\n    }\n}                \n               \n\n"
            }
          }
        },
        "ResourceId": {"Ref": "Bot"},
        "MethodResponses": [
          {
            "StatusCode": 200,
            "ResponseParameters": {"method.response.header.date": true}
          },
          {"StatusCode": 404},
          {"StatusCode": 500}
        ],
        "RestApiId": {"Ref": "API"}
      }
    },
    "BotDoc": {
      "Type": "AWS::ApiGateway::DocumentationPart",
      "Properties": {
        "Location": {"Type": "RESOURCE", "Path": "/bot"},
        "Properties": "{\"description\":\"\"}",
        "RestApiId": {"Ref": "API"}
      }
    },
    "Health": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {"Fn::GetAtt": ["API", "RootResourceId"]},
        "PathPart": "health",
        "RestApiId": {"Ref": "API"}
      }
    },
    "HealthGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "AWS_IAM",
        "HttpMethod": "GET",
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod": "POST",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {"Ref": "AWS::Region"},
                ":lambda:path/2015-03-31/functions/",
                {"Fn::GetAtt": ["ESProxyLambda", "Arn"]},
                "/invocations"
              ]
            ]
          },
          "IntegrationResponses": [
            {
              "StatusCode": 200,
              "ResponseTemplates": {
                "application/json": {"Fn::Sub": "{\"status\":\"health\"}\n\n"}
              }
            },
            {
              "SelectionPattern": ".*[InternalServiceError].*",
              "StatusCode": 500,
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
              }
            },
            {
              "SelectionPattern": ".*[BadRequest].*",
              "StatusCode": 400,
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
              }
            },
            {
              "SelectionPattern": ".*[Conflict].*",
              "StatusCode": 409,
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
              }
            },
            {
              "SelectionPattern": ".*[NotFound].*",
              "StatusCode": 404,
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
              }
            }
          ],
          "RequestTemplates": {
            "application/json": {
              "Fn::Sub": "{\n    \"endpoint\":\"${ESVar.ESAddress}\",\n    \"method\":\"GET\",\n    \"path\":\"/_cluster/health\"\n}\n\n"
            }
          }
        },
        "ResourceId": {"Ref": "Health"},
        "MethodResponses": [
          {
            "StatusCode": 200,
            "ResponseParameters": {"method.response.header.date": true}
          },
          {"StatusCode": 404},
          {"StatusCode": 500}
        ],
        "RestApiId": {"Ref": "API"}
      }
    },
    "rootGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "GET",
        "Integration": {
          "Type": "MOCK",
          "IntegrationResponses": [
            {
              "ResponseTemplates": {
                "application/json": {
                  "Fn::Sub": "#set ( $root=\"https://${!context.apiId}.execute-api.${!stageVariables.Region}.amazonaws.com/${!context.stage}\")\n\n{\n    \"region\":\"${!stageVariables.Region}\",\n    \"Version\":\"${InfoVar.Version}\",\n    \"BuildDate\":\"${InfoVar.BuildDateString}\",\n    \"BotName\":\"${LexBot}\",\n    \"BotVersion\":\"${VersionAlias}\",\n    \"PoolId\":\"${IdPool}\",\n    \"StackName\":\"${AWS::StackName}\",\n    \"ClientIdClient\":\"${ClientClient}\",\n    \"ClientIdDesigner\":\"${ClientDesigner}\",\n    \"UserPool\":\"${UserPool}\",\n    \"DefaultQnABotSettings\":\"${DefaultQnABotSettings}\",\n    \"CustomQnABotSettings\":\"${CustomQnABotSettings}\",\n    \"Id\":\"$stageVariables.Id\",\n    \"_links\":{\n        \"root\":{\n            \"href\":\"$root\"\n        },\n        \"questions\":{\n            \"href\":\"$root/questions\"\n        },\n        \"bot\":{\n            \"href\":\"$root/bot\"\n        },\n        \"jobs\":{\n            \"href\":\"$root/jobs\"\n        },\n        \"connect\":{\n            \"href\":\"$root/connect\"\n        },\n        \"examples\":{\n            \"href\":\"$root/examples/documents\"\n        },\n        \"DesignerLogin\":{\n            \"href\":\"$stageVariables.DesignerLoginUrl\"\n        },\n        \"ClientLogin\":{\n            \"href\":\"$stageVariables.ClientLoginUrl\"\n        },\n        \"CognitoEndpoint\":{\n            \"href\":\"$stageVariables.CognitoEndpoint\"\n        },\n        \"Services\":{\n            \"href\":\"$root/services\"\n        },\n        \"Kibana\":{\n            \"href\":\"https://${Urls.Kibana}\"\n        }\n    }\n}\n\n"
                }
              },
              "StatusCode": "200"
            }
          ],
          "RequestTemplates": {"application/json": "{\"statusCode\": 200}"}
        },
        "ResourceId": {"Fn::GetAtt": ["API", "RootResourceId"]},
        "MethodResponses": [{"StatusCode": 200}],
        "RestApiId": {"Ref": "API"}
      }
    },
    "Questions": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {"Fn::GetAtt": ["API", "RootResourceId"]},
        "PathPart": "questions",
        "RestApiId": {"Ref": "API"}
      }
    },
    "QuestionsGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "AWS_IAM",
        "HttpMethod": "GET",
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod": "POST",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {"Ref": "AWS::Region"},
                ":lambda:path/2015-03-31/functions/",
                {"Fn::GetAtt": ["ESProxyLambda", "Arn"]},
                "/invocations"
              ]
            ]
          },
          "IntegrationResponses": [
            {
              "StatusCode": 200,
              "ResponseTemplates": {
                "application/json": {
                  "Fn::Sub": "#set($inputRoot = $input.path('$'))\n\n{\n    \"total\":$inputRoot.hits.total.value,\n    \"version\":\"1\",\n    \"qa\":[\n        #foreach( $hit in $inputRoot.hits.hits)\n            {\n                #set($Scorepath =  '$.hits.hits['+$foreach.index+']._score')\n                \"_score\":$input.json($Scorepath),\n                #set($Bodypath =  '$.hits.hits['+$foreach.index+']._source')\n                #foreach($paramName in $input.path($Bodypath).keySet())\n                    #if( $paramName == 'questions')\n                        \"q\":[\n                            #foreach( $question in $input.path($Bodypath).get($paramName))\n                                \"$question.q\"\n                                #if($foreach.hasNext),#end\n                            #end\n                        ]\n                    #else\n                        #set( $body =  $Bodypath+\".\"+$paramName)\n                        \"$paramName\" :$input.json($body) \n                    #end\n                #if($foreach.hasNext),#end\n                #end\n            }#if( $foreach.hasNext ),#end\n        #end\n    ]\n}\n\n"
                }
              }
            },
            {
              "SelectionPattern": ".*[InternalServiceError].*",
              "StatusCode": 500,
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
              }
            },
            {
              "SelectionPattern": ".*[BadRequest].*",
              "StatusCode": 400,
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
              }
            },
            {
              "SelectionPattern": ".*[Conflict].*",
              "StatusCode": 409,
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
              }
            },
            {
              "SelectionPattern": ".*[NotFound].*",
              "StatusCode": 404,
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
              }
            }
          ],
          "RequestTemplates": {
            "application/json": {
              "Fn::Sub": "#if ( $input.params('perpage').length()==0 )\n    #set ( $perpage = 10 )\n#else\n    #set ( $perpage = $input.params('perpage') )\n#end\n\n#if ( $input.params('from').length()==0)\n    #set ( $from = 0 )\n#else\n    #set ( $from = $input.params('from') )\n#end\n\n#if ( $input.params('order').length()==0 )\n    #set ( $order = \"asc\" )\n#else\n    #set ( $order = $input.params('order') )\n#end\n    \n{\n    \"endpoint\":\"${ESVar.ESAddress}\",\n    \"method\":\"POST\",\n\n    \n    #if($input.params('query').length()>0)\n    \"path\":\"/${Var.QnaIndex}/_search?search_type=dfs_query_then_fetch\",\n    \"question\": \"$util.urlDecode($input.params('query'))\",\n    #else\n    \"path\":\"/${Var.QnaIndex}/_search?search_type=dfs_query_then_fetch\",\n    \"question\": \"\",\n    #end\n    \n    #if ($input.params('topic'))\n    \"topic\": \"$util.urlDecode($input.params('topic'))\",\n    #else\n    \"topic\": \"\",\n    #end\n\n    \"size\":\"$perpage\",\n    \"from\":\"$from\",\n\n\n    \"body\":{\n        #if($input.params('query').length()>0)\n        \"comment\": \"ES Query for test queries are now built dynamically by ESProxy Lambda handler.\"\n        #else\n        \"size\":\"$perpage\",\n        \"from\":\"$from\",\n        \"query\": {\n            \"bool\":{\n                #if($input.params('filter').length()==0)\n                \"must\":{\"match_all\":{}}\n                #else\n                \"filter\":{\"regexp\":{\n                    \"qid\":\"$util.urlDecode($input.params('filter'))\"\n                }}\n                #end\n            }\n        }\n        ,\"sort\":{\n            \"qid\":{\n                \"order\":\"$order\" \n            }\n        }\n        #end\n    }\n}\n\n"
            }
          }
        },
        "RequestParameters": {
          "method.request.querystring.query": false,
          "method.request.querystring.topic": false,
          "method.request.querystring.from": false,
          "method.request.querystring.filter": false,
          "method.request.querystring.order": false,
          "method.request.querystring.perpage": false
        },
        "ResourceId": {"Ref": "Questions"},
        "MethodResponses": [
          {
            "StatusCode": 200,
            "ResponseParameters": {"method.response.header.date": true}
          },
          {"StatusCode": 404},
          {"StatusCode": 500}
        ],
        "RestApiId": {"Ref": "API"}
      }
    },
    "QuestionsDelete": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "AWS_IAM",
        "HttpMethod": "DELETE",
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod": "POST",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {"Ref": "AWS::Region"},
                ":lambda:path/2015-03-31/functions/",
                {"Fn::GetAtt": ["ESProxyLambda", "Arn"]},
                "/invocations"
              ]
            ]
          },
          "IntegrationResponses": [
            {
              "StatusCode": 204,
              "ResponseTemplates": {
                "application/json": {
                  "Fn::Sub": "{\n    \"message\":\"success\",\n    \"count\":\"$input.path('$.deleted')\"\n}\n"
                }
              }
            },
            {
              "SelectionPattern": ".*[InternalServiceError].*",
              "StatusCode": 500,
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
              }
            },
            {
              "SelectionPattern": ".*[BadRequest].*",
              "StatusCode": 400,
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
              }
            },
            {
              "SelectionPattern": ".*[Conflict].*",
              "StatusCode": 409,
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
              }
            },
            {
              "SelectionPattern": ".*[NotFound].*",
              "StatusCode": 404,
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
              }
            }
          ],
          "RequestTemplates": {
            "application/json": {
              "Fn::Sub": "{\n    \"endpoint\":\"${ESVar.ESAddress}\",\n    \"method\":\"POST\",\n    \"path\":\"/${Var.QnaIndex}/_delete_by_query?refresh=true\",\n    \"body\":{\n        \"query\":{\n            #if($input.path('$.query').length()!=0)\n            \"bool\":{\n                \"must\":{\"match_all\":{}},\n                \"filter\":{\"regexp\":{\n                    \"qid\":\"$input.path('$.query')\"\n                }}\n            }\n            #else\n            \"terms\":{\n                \"qid\":[\n                #foreach($qid in $input.path('$.list'))\n                    \"$qid\"#if($foreach.hasNext),#end\n                #end]\n            }\n            #end\n        }\n    }\n}\n\n\n"
            }
          }
        },
        "ResourceId": {"Ref": "Questions"},
        "MethodResponses": [
          {
            "StatusCode": 204,
            "ResponseParameters": {"method.response.header.date": true}
          },
          {"StatusCode": 404},
          {"StatusCode": 500}
        ],
        "RestApiId": {"Ref": "API"}
      }
    },
    "Question": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {"Ref": "Questions"},
        "PathPart": "{ID}",
        "RestApiId": {"Ref": "API"}
      }
    },
    "QuestionHead": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "AWS_IAM",
        "HttpMethod": "HEAD",
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod": "POST",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {"Ref": "AWS::Region"},
                ":lambda:path/2015-03-31/functions/",
                {"Fn::GetAtt": ["ESProxyLambda", "Arn"]},
                "/invocations"
              ]
            ]
          },
          "IntegrationResponses": [
            {
              "StatusCode": 200,
              "ResponseTemplates": {
                "application/json": {"Fn::Sub": "{\"status\":\"exists\"}\n"}
              }
            },
            {
              "SelectionPattern": ".*[InternalServiceError].*",
              "StatusCode": 500,
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
              }
            },
            {
              "SelectionPattern": ".*[BadRequest].*",
              "StatusCode": 400,
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
              }
            },
            {
              "SelectionPattern": ".*[Conflict].*",
              "StatusCode": 409,
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
              }
            },
            {
              "SelectionPattern": ".*[NotFound].*",
              "StatusCode": 404,
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
              }
            }
          ],
          "RequestTemplates": {
            "application/json": {
              "Fn::Sub": "{\n    \"endpoint\":\"${ESVar.ESAddress}\",\n    \"method\":\"HEAD\",\n    \"path\":\"/${Var.QnaIndex}/_all/$util.urlDecode($input.params('ID'))\"\n}\n\n\n"
            }
          }
        },
        "RequestParameters": {"method.request.path.Id": true},
        "ResourceId": {"Ref": "Question"},
        "MethodResponses": [
          {
            "StatusCode": 200,
            "ResponseParameters": {"method.response.header.date": true}
          },
          {"StatusCode": 404},
          {"StatusCode": 500}
        ],
        "RestApiId": {"Ref": "API"}
      }
    },
    "QuestionPut": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "AWS_IAM",
        "HttpMethod": "PUT",
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod": "POST",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {"Ref": "AWS::Region"},
                ":lambda:path/2015-03-31/functions/",
                {"Fn::GetAtt": ["ESProxyLambda", "Arn"]},
                "/invocations"
              ]
            ]
          },
          "IntegrationResponses": [
            {
              "StatusCode": 201,
              "ResponseTemplates": {
                "application/json": {
                  "Fn::Sub": "#set($inputRoot = $input.path('$'))\n#set($Idpath =  '$._id')\n#set($Successpath =  '$._shards.successful')\n\n{\n    \"result\":\"$inputRoot.result\",\n    \"id\":$input.json($Idpath),\n    \"success\":$input.json($Successpath)\n}\n\n"
                }
              }
            },
            {
              "SelectionPattern": ".*[InternalServiceError].*",
              "StatusCode": 500,
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
              }
            },
            {
              "SelectionPattern": ".*[BadRequest].*",
              "StatusCode": 400,
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
              }
            },
            {
              "SelectionPattern": ".*[Conflict].*",
              "StatusCode": 409,
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
              }
            },
            {
              "SelectionPattern": ".*[NotFound].*",
              "StatusCode": 404,
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
              }
            }
          ],
          "RequestTemplates": {
            "application/json": {
              "Fn::Sub": "#set($inputRoot = $input.path('$'))\n\n#if($input.json('$.type').length())\n    #set($type=$inputRoot.type)\n#else\n    #set($type=\"qna\")\n#end\n\n{\n    \"endpoint\":\"${ESVar.ESAddress}\",\n    \"method\":\"PUT\",\n    \"path\":\"/${Var.QnaIndex}/_doc/$input.params('ID')?refresh=wait_for\",\n    \"body\":{\n        #foreach($paramName in $inputRoot.keySet())\n            #if( $paramName == 'q' && $type==\"qna\")\n                ## generate quniqueterms field by concatenating questions in q array\n                \"quniqueterms\":\" #foreach( $q in $inputRoot.get($paramName))$q #end \",\n                ## replace q array with nested questions array\n                \"questions\":[\n                    #foreach( $q in $inputRoot.get($paramName))\n                        {\"q\":\"$q\"}\n                        #if($foreach.hasNext),#end\n                    #end\n                ]\n                #if($foreach.hasNext),#end\n            #else\n                #set( $body =  '$.'+$paramName)\n                \"$paramName\" :$input.json($body) \n                #if($foreach.hasNext),#end\n            #end\n        #end\n    }\n}\n\n\n"
            }
          }
        },
        "RequestParameters": {"method.request.path.Id": true},
        "ResourceId": {"Ref": "Question"},
        "MethodResponses": [
          {
            "StatusCode": 201,
            "ResponseParameters": {"method.response.header.date": true}
          },
          {"StatusCode": 404},
          {"StatusCode": 500}
        ],
        "RestApiId": {"Ref": "API"}
      }
    },
    "QuestionsOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "AWS_IAM",
        "HttpMethod": "OPTIONS",
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod": "POST",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {"Ref": "AWS::Region"},
                ":lambda:path/2015-03-31/functions/",
                {"Fn::GetAtt": ["SchemaLambda", "Arn"]},
                "/invocations"
              ]
            ]
          },
          "IntegrationResponses": [
            {"StatusCode": 200},
            {
              "SelectionPattern": ".*[InternalServiceError].*",
              "StatusCode": 500,
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
              }
            },
            {
              "SelectionPattern": ".*[BadRequest].*",
              "StatusCode": 400,
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
              }
            },
            {
              "SelectionPattern": ".*[Conflict].*",
              "StatusCode": 409,
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
              }
            },
            {
              "SelectionPattern": ".*[NotFound].*",
              "StatusCode": 404,
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
              }
            }
          ],
          "RequestTemplates": {
            "application/json": {
              "Fn::Sub": "{\n    \"comment\": \"API mapping no-op since ES 7.x upgrade. Schema now returned directly from SchemaLambda, rather than from Elasticsearch metadata\"\n}\n\n"
            }
          }
        },
        "ResourceId": {"Ref": "Questions"},
        "MethodResponses": [
          {
            "StatusCode": 200,
            "ResponseParameters": {"method.response.header.date": true}
          },
          {"StatusCode": 404},
          {"StatusCode": 500}
        ],
        "RestApiId": {"Ref": "API"}
      }
    },
    "QuestionDelete": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "AWS_IAM",
        "HttpMethod": "DELETE",
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod": "POST",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {"Ref": "AWS::Region"},
                ":lambda:path/2015-03-31/functions/",
                {"Fn::GetAtt": ["ESProxyLambda", "Arn"]},
                "/invocations"
              ]
            ]
          },
          "IntegrationResponses": [
            {
              "StatusCode": 204,
              "ResponseTemplates": {
                "application/json": {
                  "Fn::Sub": "#set($inputRoot = $input.path('$'))\n#set($Idpath =  '$._id')\n#set($Successpath =  '$._shards.successful')\n\n{\n    \"result\":\"$inputRoot.result\",\n    \"id\":$input.json($Idpath),\n    \"success\":$input.json($Successpath)\n}\n\n"
                }
              }
            },
            {
              "SelectionPattern": ".*[InternalServiceError].*",
              "StatusCode": 500,
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
              }
            },
            {
              "SelectionPattern": ".*[BadRequest].*",
              "StatusCode": 400,
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
              }
            },
            {
              "SelectionPattern": ".*[Conflict].*",
              "StatusCode": 409,
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
              }
            },
            {
              "SelectionPattern": ".*[NotFound].*",
              "StatusCode": 404,
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
              }
            }
          ],
          "RequestTemplates": {
            "application/json": {
              "Fn::Sub": "{\n    \"endpoint\":\"${ESVar.ESAddress}\",\n    \"method\":\"POST\",\n    \"path\":\"/${Var.QnaIndex}/_delete_by_query?refresh=true\",\n    \"body\":{\n        \"query\":{\n            \"match\":{\n                \"qid\":\"$util.urlDecode($input.params('ID'))\"\n            }\n        }\n    }\n\n}\n\n\n"
            }
          }
        },
        "RequestParameters": {"method.request.path.Id": true},
        "ResourceId": {"Ref": "Question"},
        "MethodResponses": [
          {
            "StatusCode": 204,
            "ResponseParameters": {"method.response.header.date": true}
          },
          {"StatusCode": 404},
          {"StatusCode": 500}
        ],
        "RestApiId": {"Ref": "API"}
      }
    },
    "Static": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {"Fn::GetAtt": ["API", "RootResourceId"]},
        "PathPart": "static",
        "RestApiId": {"Ref": "API"}
      }
    },
    "Proxy": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {"Ref": "Static"},
        "PathPart": "{proxy+}",
        "RestApiId": {"Ref": "API"}
      }
    },
    "ProxyAnyGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "GET",
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod": "GET",
          "Credentials": {"Fn::GetAtt": ["S3AccessRole", "Arn"]},
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {"Ref": "AWS::Region"},
                ":s3:path/",
                {"Ref": "Bucket"},
                "/{proxy}"
              ]
            ]
          },
          "RequestParameters": {
            "integration.request.path.proxy": "method.request.path.proxy"
          },
          "IntegrationResponses": [
            {
              "StatusCode": 200,
              "ResponseParameters": {
                "method.response.header.content-type": "integration.response.header.Content-Type",
                "method.response.header.api-stage": "context.stage"
              }
            },
            {
              "StatusCode": 404,
              "ResponseTemplates": {
                "application/xml": "{\"error\":\"Not found\"}"
              },
              "SelectionPattern": "403"
            }
          ]
        },
        "RequestParameters": {"method.request.path.proxy": false},
        "ResourceId": {"Ref": "Proxy"},
        "MethodResponses": [
          {
            "StatusCode": 200,
            "ResponseParameters": {
              "method.response.header.content-type": false,
              "method.response.header.api-stage": false
            }
          },
          {"StatusCode": 400},
          {"StatusCode": 404}
        ],
        "RestApiId": {"Ref": "API"}
      }
    },
    "ProxyAnyHead": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "HEAD",
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod": "HEAD",
          "Credentials": {"Fn::GetAtt": ["S3AccessRole", "Arn"]},
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {"Ref": "AWS::Region"},
                ":s3:path/",
                {"Ref": "Bucket"},
                "/{proxy}"
              ]
            ]
          },
          "RequestParameters": {
            "integration.request.path.proxy": "method.request.path.proxy"
          },
          "IntegrationResponses": [
            {
              "StatusCode": 200,
              "ResponseParameters": {
                "method.response.header.content-type": "integration.response.header.Content-Type",
                "method.response.header.api-stage": "context.stage"
              }
            },
            {
              "StatusCode": 404,
              "ResponseTemplates": {
                "application/xml": "{\"error\":\"Not found\"}"
              },
              "SelectionPattern": "403"
            }
          ]
        },
        "RequestParameters": {"method.request.path.proxy": false},
        "ResourceId": {"Ref": "Proxy"},
        "MethodResponses": [
          {
            "StatusCode": 200,
            "ResponseParameters": {
              "method.response.header.content-type": false,
              "method.response.header.api-stage": false
            }
          },
          {"StatusCode": 400},
          {"StatusCode": 404}
        ],
        "RestApiId": {"Ref": "API"}
      }
    },
    "Login": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {"Fn::GetAtt": ["API", "RootResourceId"]},
        "PathPart": "pages",
        "RestApiId": {"Ref": "API"}
      }
    },
    "DesignerLoginResource": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {"Ref": "Login"},
        "PathPart": "designer",
        "RestApiId": {"Ref": "API"}
      }
    },
    "ClientLoginResource": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {"Ref": "Login"},
        "PathPart": "client",
        "RestApiId": {"Ref": "API"}
      }
    },
    "DesignerLoginResourceGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "GET",
        "Integration": {
          "Type": "MOCK",
          "IntegrationResponses": [
            {
              "ResponseParameters": {
                "method.response.header.location": {
                  "Fn::Join": [
                    "",
                    ["'", {"Fn::GetAtt": ["DesignerLogin", "loginUrl"]}, "'"]
                  ]
                }
              },
              "StatusCode": "302"
            }
          ],
          "RequestTemplates": {"application/json": "{\"statusCode\": 302}"}
        },
        "ResourceId": {"Ref": "DesignerLoginResource"},
        "MethodResponses": [
          {
            "StatusCode": 302,
            "ResponseParameters": {"method.response.header.location": true}
          }
        ],
        "RestApiId": {"Ref": "API"}
      }
    },
    "ClientLoginResourceGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "GET",
        "Integration": {
          "Type": "MOCK",
          "IntegrationResponses": [
            {
              "ResponseParameters": {
                "method.response.header.location": {
                  "Fn::Join": [
                    "",
                    ["'", {"Fn::GetAtt": ["ClientLogin", "loginUrl"]}, "'"]
                  ]
                }
              },
              "StatusCode": "302"
            }
          ],
          "RequestTemplates": {"application/json": "{\"statusCode\": 302}"}
        },
        "ResourceId": {"Ref": "ClientLoginResource"},
        "MethodResponses": [
          {
            "StatusCode": 302,
            "ResponseParameters": {"method.response.header.location": true}
          }
        ],
        "RestApiId": {"Ref": "API"}
      }
    },
    "Jobs": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {"Fn::GetAtt": ["API", "RootResourceId"]},
        "PathPart": "jobs",
        "RestApiId": {"Ref": "API"}
      }
    },
    "JobsGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "AWS_IAM",
        "HttpMethod": "GET",
        "Integration": {
          "Type": "MOCK",
          "IntegrationResponses": [
            {
              "ResponseTemplates": {
                "application/json": {
                  "Fn::Sub": "#set ( $root=\"https://${!context.apiId}.execute-api.${!stageVariables.Region}.amazonaws.com/${!context.stage}\")\n\n{\n    \"_links\":{\n        \"imports\":{\n            \"href\":\"$root/jobs/imports\",\n            \"bucket\":\"${ImportBucket}\",\n            \"uploadPrefix\":\"data/\",\n            \"statusPrefix\":\"Status/\"\n        },\n        \"exports\":{\n            \"href\":\"$root/jobs/exports\"\n        },\n        \"testall\":{\n            \"href\":\"$root/jobs/testall\",\n            \"bucket\":\"${TestAllBucket}\",\n            \"statusPrefix\":\"Status/\"\n        }\n    }\n}\n\n"
                }
              },
              "StatusCode": "200"
            }
          ],
          "RequestTemplates": {"application/json": "{\"statusCode\": 200}"}
        },
        "ResourceId": {"Ref": "Jobs"},
        "MethodResponses": [{"StatusCode": 200}],
        "RestApiId": {"Ref": "API"}
      }
    },
    "testalls": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {"Ref": "Jobs"},
        "PathPart": "testall",
        "RestApiId": {"Ref": "API"}
      }
    },
    "testallsList": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "AWS_IAM",
        "HttpMethod": "GET",
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod": "POST",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {"Ref": "AWS::Region"},
                ":lambda:path/2015-03-31/functions/",
                {"Fn::GetAtt": ["S3ListLambda", "Arn"]},
                "/invocations"
              ]
            ]
          },
          "IntegrationResponses": [
            {"StatusCode": 200},
            {
              "SelectionPattern": ".*[InternalServiceError].*",
              "StatusCode": 500,
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
              }
            },
            {
              "SelectionPattern": ".*[BadRequest].*",
              "StatusCode": 400,
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
              }
            },
            {
              "SelectionPattern": ".*[Conflict].*",
              "StatusCode": 409,
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
              }
            },
            {
              "SelectionPattern": ".*[NotFound].*",
              "StatusCode": 404,
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
              }
            }
          ],
          "RequestTemplates": {
            "application/json": {
              "Fn::Sub": "#set ( $root=\"https://${!context.apiId}.execute-api.${!stageVariables.Region}.amazonaws.com/${!context.stage}\")\n\n{\n    \"bucket\":\"${TestAllBucket}\",\n    \"prefix\":\"status/\",\n    \"perpage\":\"$input.params('perpage')\",\n    \"token\":\"$input.params('token')\",\n    \"type\":\"testall\",\n    \"root\":\"$root\"\n}\n\n"
            }
          }
        },
        "RequestParameters": {
          "method.request.querystring.perpage": false,
          "method.request.querystring.token": false
        },
        "ResourceId": {"Ref": "testalls"},
        "MethodResponses": [
          {
            "StatusCode": 200,
            "ResponseParameters": {"method.response.header.date": true}
          },
          {"StatusCode": 404},
          {"StatusCode": 500}
        ],
        "RestApiId": {"Ref": "API"}
      }
    },
    "testall": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {"Ref": "testalls"},
        "PathPart": "{proxy+}",
        "RestApiId": {"Ref": "API"}
      }
    },
    "testallPut": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "AWS_IAM",
        "HttpMethod": "PUT",
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod": "PUT",
          "Credentials": {"Fn::GetAtt": ["S3AccessRole", "Arn"]},
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {"Ref": "AWS::Region"},
                ":s3:path/",
                {"Ref": "TestAllBucket"},
                "/status/{proxy}"
              ]
            ]
          },
          "RequestParameters": {
            "integration.request.path.proxy": "method.request.path.proxy"
          },
          "RequestTemplates": {
            "application/json": {
              "Fn::Sub": "#set($inputRoot = $input.path('$'))\n\n{\n    \"bucket\":\"${TestAllBucket}\",\n    \"index\":\"${Var.QnaIndex}\",\n    \"id\":\"$input.params('proxy')\",\n    \"config\":\"status/$input.params('proxy')\",\n    \"tmp\":\"tmp/$input.params('proxy')\",\n    \"key\":\"data/$input.params('proxy')\",\n    \"filter\":\"$inputRoot.get('filter')\",\n    \"status\":\"Started\"\n}\n\n"
            }
          },
          "IntegrationResponses": [
            {
              "StatusCode": 200,
              "ResponseParameters": {
                "method.response.header.content-type": "integration.response.header.Content-Type"
              }
            },
            {
              "StatusCode": 404,
              "ResponseTemplates": {
                "application/xml": "{\"error\":\"Job not found\"}"
              },
              "SelectionPattern": "403"
            }
          ]
        },
        "RequestParameters": {"method.request.path.proxy": false},
        "ResourceId": {"Ref": "testall"},
        "MethodResponses": [
          {
            "StatusCode": 200,
            "ResponseParameters": {"method.response.header.content-type": false}
          },
          {"StatusCode": 400},
          {"StatusCode": 404}
        ],
        "RestApiId": {"Ref": "API"}
      }
    },
    "testallGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "AWS_IAM",
        "HttpMethod": "GET",
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod": "GET",
          "Credentials": {"Fn::GetAtt": ["S3AccessRole", "Arn"]},
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {"Ref": "AWS::Region"},
                ":s3:path/",
                {"Ref": "TestAllBucket"},
                "/status/{proxy}"
              ]
            ]
          },
          "RequestParameters": {
            "integration.request.path.proxy": "method.request.path.proxy"
          },
          "IntegrationResponses": [
            {
              "StatusCode": 200,
              "ResponseParameters": {
                "method.response.header.content-type": "integration.response.header.Content-Type"
              }
            },
            {
              "StatusCode": 404,
              "ResponseTemplates": {
                "application/xml": "{\"error\":\"Job not found\"}"
              },
              "SelectionPattern": "403"
            }
          ]
        },
        "RequestParameters": {"method.request.path.proxy": false},
        "ResourceId": {"Ref": "testall"},
        "MethodResponses": [
          {
            "StatusCode": 200,
            "ResponseParameters": {"method.response.header.content-type": false}
          },
          {"StatusCode": 400},
          {"StatusCode": 404}
        ],
        "RestApiId": {"Ref": "API"}
      }
    },
    "testallDelete": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "AWS_IAM",
        "HttpMethod": "DELETE",
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod": "DELETE",
          "Credentials": {"Fn::GetAtt": ["S3AccessRole", "Arn"]},
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {"Ref": "AWS::Region"},
                ":s3:path/",
                {"Ref": "TestAllBucket"},
                "/status/{proxy}"
              ]
            ]
          },
          "RequestParameters": {
            "integration.request.path.proxy": "method.request.path.proxy"
          },
          "IntegrationResponses": [
            {
              "StatusCode": 200,
              "ResponseParameters": {
                "method.response.header.content-type": "integration.response.header.Content-Type"
              }
            },
            {
              "StatusCode": 404,
              "ResponseTemplates": {
                "application/xml": "{\"error\":\"Job not found\"}"
              },
              "SelectionPattern": "403"
            }
          ]
        },
        "RequestParameters": {"method.request.path.proxy": false},
        "ResourceId": {"Ref": "testall"},
        "MethodResponses": [
          {
            "StatusCode": 200,
            "ResponseParameters": {"method.response.header.content-type": false}
          },
          {"StatusCode": 400},
          {"StatusCode": 404}
        ],
        "RestApiId": {"Ref": "API"}
      }
    },
    "exports": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {"Ref": "Jobs"},
        "PathPart": "exports",
        "RestApiId": {"Ref": "API"}
      }
    },
    "exportsList": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "AWS_IAM",
        "HttpMethod": "GET",
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod": "POST",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {"Ref": "AWS::Region"},
                ":lambda:path/2015-03-31/functions/",
                {"Fn::GetAtt": ["S3ListLambda", "Arn"]},
                "/invocations"
              ]
            ]
          },
          "IntegrationResponses": [
            {"StatusCode": 200},
            {
              "SelectionPattern": ".*[InternalServiceError].*",
              "StatusCode": 500,
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
              }
            },
            {
              "SelectionPattern": ".*[BadRequest].*",
              "StatusCode": 400,
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
              }
            },
            {
              "SelectionPattern": ".*[Conflict].*",
              "StatusCode": 409,
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
              }
            },
            {
              "SelectionPattern": ".*[NotFound].*",
              "StatusCode": 404,
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
              }
            }
          ],
          "RequestTemplates": {
            "application/json": {
              "Fn::Sub": "#set ( $root=\"https://${!context.apiId}.execute-api.${!stageVariables.Region}.amazonaws.com/${!context.stage}\")\n\n{\n    \"bucket\":\"${ExportBucket}\",\n    \"prefix\":\"status/\",\n    \"perpage\":\"$input.params('perpage')\",\n    \"token\":\"$input.params('token')\",\n    \"type\":\"exports\",\n    \"root\":\"$root\"\n}\n\n"
            }
          }
        },
        "RequestParameters": {
          "method.request.querystring.perpage": false,
          "method.request.querystring.token": false
        },
        "ResourceId": {"Ref": "exports"},
        "MethodResponses": [
          {
            "StatusCode": 200,
            "ResponseParameters": {"method.response.header.date": true}
          },
          {"StatusCode": 404},
          {"StatusCode": 500}
        ],
        "RestApiId": {"Ref": "API"}
      }
    },
    "export": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {"Ref": "exports"},
        "PathPart": "{proxy+}",
        "RestApiId": {"Ref": "API"}
      }
    },
    "imports": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {"Ref": "Jobs"},
        "PathPart": "imports",
        "RestApiId": {"Ref": "API"}
      }
    },
    "exportPut": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "AWS_IAM",
        "HttpMethod": "PUT",
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod": "PUT",
          "Credentials": {"Fn::GetAtt": ["S3AccessRole", "Arn"]},
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {"Ref": "AWS::Region"},
                ":s3:path/",
                {"Ref": "ExportBucket"},
                "/status/{proxy}"
              ]
            ]
          },
          "RequestParameters": {
            "integration.request.path.proxy": "method.request.path.proxy"
          },
          "RequestTemplates": {
            "application/json": {
              "Fn::Sub": "#set($inputRoot = $input.path('$'))\n\n{\n    \"bucket\":\"${ExportBucket}\",\n    \"index\":\"${Var.QnaIndex}\",\n    \"id\":\"$input.params('proxy')\",\n    \"config\":\"status/$input.params('proxy')\",\n    \"tmp\":\"tmp/$input.params('proxy')\",\n    \"key\":\"$inputRoot.get('prefix')data/$input.params('proxy')\",\n    \"filter\":\"$inputRoot.get('filter')\",\n    \"status\":\"Started\"\n}"
            }
          },
          "IntegrationResponses": [
            {
              "StatusCode": 200,
              "ResponseParameters": {
                "method.response.header.content-type": "integration.response.header.Content-Type"
              }
            },
            {
              "StatusCode": 404,
              "ResponseTemplates": {
                "application/xml": "{\"error\":\"Job not found\"}"
              },
              "SelectionPattern": "403"
            }
          ]
        },
        "RequestParameters": {"method.request.path.proxy": false},
        "ResourceId": {"Ref": "export"},
        "MethodResponses": [
          {
            "StatusCode": 200,
            "ResponseParameters": {"method.response.header.content-type": false}
          },
          {"StatusCode": 400},
          {"StatusCode": 404}
        ],
        "RestApiId": {"Ref": "API"}
      }
    },
    "exportGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "AWS_IAM",
        "HttpMethod": "GET",
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod": "GET",
          "Credentials": {"Fn::GetAtt": ["S3AccessRole", "Arn"]},
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {"Ref": "AWS::Region"},
                ":s3:path/",
                {"Ref": "ExportBucket"},
                "/status/{proxy}"
              ]
            ]
          },
          "RequestParameters": {
            "integration.request.path.proxy": "method.request.path.proxy"
          },
          "IntegrationResponses": [
            {
              "StatusCode": 200,
              "ResponseParameters": {
                "method.response.header.content-type": "integration.response.header.Content-Type"
              }
            },
            {
              "StatusCode": 404,
              "ResponseTemplates": {
                "application/xml": "{\"error\":\"Job not found\"}"
              },
              "SelectionPattern": "403"
            }
          ]
        },
        "RequestParameters": {"method.request.path.proxy": false},
        "ResourceId": {"Ref": "export"},
        "MethodResponses": [
          {
            "StatusCode": 200,
            "ResponseParameters": {"method.response.header.content-type": false}
          },
          {"StatusCode": 400},
          {"StatusCode": 404}
        ],
        "RestApiId": {"Ref": "API"}
      }
    },
    "exportDelete": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "AWS_IAM",
        "HttpMethod": "DELETE",
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod": "DELETE",
          "Credentials": {"Fn::GetAtt": ["S3AccessRole", "Arn"]},
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {"Ref": "AWS::Region"},
                ":s3:path/",
                {"Ref": "ExportBucket"},
                "/status/{proxy}"
              ]
            ]
          },
          "RequestParameters": {
            "integration.request.path.proxy": "method.request.path.proxy"
          },
          "IntegrationResponses": [
            {
              "StatusCode": 200,
              "ResponseParameters": {
                "method.response.header.content-type": "integration.response.header.Content-Type"
              }
            },
            {
              "StatusCode": 404,
              "ResponseTemplates": {
                "application/xml": "{\"error\":\"Job not found\"}"
              },
              "SelectionPattern": "403"
            }
          ]
        },
        "RequestParameters": {"method.request.path.proxy": false},
        "ResourceId": {"Ref": "export"},
        "MethodResponses": [
          {
            "StatusCode": 200,
            "ResponseParameters": {"method.response.header.content-type": false}
          },
          {"StatusCode": 400},
          {"StatusCode": 404}
        ],
        "RestApiId": {"Ref": "API"}
      }
    },
    "importsList": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "AWS_IAM",
        "HttpMethod": "GET",
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod": "POST",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {"Ref": "AWS::Region"},
                ":lambda:path/2015-03-31/functions/",
                {"Fn::GetAtt": ["S3ListLambda", "Arn"]},
                "/invocations"
              ]
            ]
          },
          "IntegrationResponses": [
            {"StatusCode": 200},
            {
              "SelectionPattern": ".*[InternalServiceError].*",
              "StatusCode": 500,
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
              }
            },
            {
              "SelectionPattern": ".*[BadRequest].*",
              "StatusCode": 400,
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
              }
            },
            {
              "SelectionPattern": ".*[Conflict].*",
              "StatusCode": 409,
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
              }
            },
            {
              "SelectionPattern": ".*[NotFound].*",
              "StatusCode": 404,
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
              }
            }
          ],
          "RequestTemplates": {
            "application/json": {
              "Fn::Sub": "#set ( $root=\"https://${!context.apiId}.execute-api.${!stageVariables.Region}.amazonaws.com/${!context.stage}\")\n\n{\n    \"bucket\":\"${ImportBucket}\",\n    \"prefix\":\"status/\",\n    \"perpage\":\"$input.params('perpage')\",\n    \"token\":\"$input.params('token')\",\n    \"type\":\"imports\",\n    \"root\":\"$root\"\n}\n\n"
            }
          }
        },
        "RequestParameters": {
          "method.request.querystring.perpage": false,
          "method.request.querystring.token": false
        },
        "ResourceId": {"Ref": "imports"},
        "MethodResponses": [
          {
            "StatusCode": 200,
            "ResponseParameters": {"method.response.header.date": true}
          },
          {"StatusCode": 404},
          {"StatusCode": 500}
        ],
        "RestApiId": {"Ref": "API"}
      }
    },
    "import": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {"Ref": "imports"},
        "PathPart": "{proxy+}",
        "RestApiId": {"Ref": "API"}
      }
    },
    "importGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "AWS_IAM",
        "HttpMethod": "GET",
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod": "GET",
          "Credentials": {"Fn::GetAtt": ["S3AccessRole", "Arn"]},
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {"Ref": "AWS::Region"},
                ":s3:path/",
                {"Ref": "ImportBucket"},
                "/status/{proxy}"
              ]
            ]
          },
          "RequestParameters": {
            "integration.request.path.proxy": "method.request.path.proxy"
          },
          "IntegrationResponses": [
            {
              "StatusCode": 200,
              "ResponseParameters": {
                "method.response.header.content-type": "integration.response.header.Content-Type"
              }
            },
            {
              "StatusCode": 404,
              "ResponseTemplates": {
                "application/xml": "{\"error\":\"Job not found\"}"
              },
              "SelectionPattern": "403"
            }
          ]
        },
        "RequestParameters": {"method.request.path.proxy": false},
        "ResourceId": {"Ref": "import"},
        "MethodResponses": [
          {
            "StatusCode": 200,
            "ResponseParameters": {"method.response.header.content-type": false}
          },
          {"StatusCode": 400},
          {"StatusCode": 404}
        ],
        "RestApiId": {"Ref": "API"}
      }
    },
    "importDelete": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "AWS_IAM",
        "HttpMethod": "DELETE",
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod": "DELETE",
          "Credentials": {"Fn::GetAtt": ["S3AccessRole", "Arn"]},
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {"Ref": "AWS::Region"},
                ":s3:path/",
                {"Ref": "ImportBucket"},
                "/status/{proxy}"
              ]
            ]
          },
          "RequestParameters": {
            "integration.request.path.proxy": "method.request.path.proxy"
          },
          "IntegrationResponses": [
            {
              "StatusCode": 200,
              "ResponseParameters": {
                "method.response.header.content-type": "integration.response.header.Content-Type"
              }
            },
            {
              "StatusCode": 404,
              "ResponseTemplates": {
                "application/xml": "{\"error\":\"Job not found\"}"
              },
              "SelectionPattern": "403"
            }
          ]
        },
        "RequestParameters": {"method.request.path.proxy": false},
        "ResourceId": {"Ref": "import"},
        "MethodResponses": [
          {
            "StatusCode": 200,
            "ResponseParameters": {"method.response.header.content-type": false}
          },
          {"StatusCode": 400},
          {"StatusCode": 404}
        ],
        "RestApiId": {"Ref": "API"}
      }
    },
    "S3ListLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "var aws=require('aws-sdk')\naws.config.region=process.env.AWS_REGION\nvar s3=new aws.S3()\n\nexports.handler = (event, context, callback) => {\n    console.log('Received event:', JSON.stringify(event, null, 2));\n   \n    return s3.listObjects({\n        Bucket:event.bucket,\n        Prefix:event.prefix,\n        MaxKeys:event.perpage || 100,\n        Marker:event.token || null\n    }).promise()\n        .then(x => {\n            if (x.Contents && Array.isArray(x.Contents)) {\n                x.Contents.sort((a, b) => {\n                    if (a.LastModified && b.LastModified) {\n                        return new Date(b.LastModified).getTime() - new Date(a.LastModified).getTime();\n                    } else {\n                        return 0;\n                    }\n                })\n            }\n            callback(null, {\n            token:x.NextMarker,\n            jobs:x.Contents.map(y=>{return {\n                id:y.Key.split('/').pop(),\n                href:`${event.root}/jobs/${event.type}/`+encodeURI(y.Key.split('/').pop())\n            }})\n        })\n    })\n    .catch(e=>callback(JSON.stringify({\n        type:\"[InternalServiceError]\",\n        data:e\n    })))\n}\n\n\n"
        },
        "Handler": "index.handler",
        "MemorySize": "128",
        "Role": {"Fn::GetAtt": ["S3ListLambdaRole", "Arn"]},
        "Runtime": "nodejs10.x",
        "Timeout": 300,
        "Tags": [{"Key": "Type", "Value": "Api"}]
      }
    },
    "S3ListLambdaRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {"Service": "lambda.amazonaws.com"},
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Path": "/",
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        ],
        "Policies": [
          {
            "PolicyName": "S3ListPolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {"Effect": "Allow", "Action": ["S3:List*"], "Resource": ["*"]}
              ]
            }
          }
        ]
      }
    },
    "Examples": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {"Fn::GetAtt": ["API", "RootResourceId"]},
        "PathPart": "examples",
        "RestApiId": {"Ref": "API"}
      }
    },
    "ExamplesGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "AWS_IAM",
        "HttpMethod": "GET",
        "Integration": {
          "Type": "MOCK",
          "IntegrationResponses": [
            {
              "ResponseTemplates": {
                "application/json": {
                  "Fn::Sub": "#set ( $root=\"https://${!context.apiId}.execute-api.${AWS::Region}.amazonaws.com/${!context.stage}\")\n\n{\n    \"_links\":{\n        \"documents\":{\n            \"href\":\"$root/examples/documents\"\n        },\n        \"photos\":{\n            \"href\":\"$root/examples/photos\"\n        }\n    }\n}\n\n"
                }
              },
              "StatusCode": "200"
            }
          ],
          "RequestTemplates": {"application/json": "{\"statusCode\": 200}"}
        },
        "ResourceId": {"Ref": "Examples"},
        "MethodResponses": [{"StatusCode": 200}],
        "RestApiId": {"Ref": "API"}
      }
    },
    "photos": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {"Ref": "Examples"},
        "PathPart": "photos",
        "RestApiId": {"Ref": "API"}
      }
    },
    "photosList": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "AWS_IAM",
        "HttpMethod": "GET",
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod": "POST",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {"Ref": "AWS::Region"},
                ":lambda:path/2015-03-31/functions/",
                {"Fn::GetAtt": ["ExampleS3ListPhotoLambda", "Arn"]},
                "/invocations"
              ]
            ]
          },
          "IntegrationResponses": [
            {"StatusCode": 200},
            {
              "SelectionPattern": ".*[InternalServiceError].*",
              "StatusCode": 500,
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
              }
            },
            {
              "SelectionPattern": ".*[BadRequest].*",
              "StatusCode": 400,
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
              }
            },
            {
              "SelectionPattern": ".*[Conflict].*",
              "StatusCode": 409,
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
              }
            },
            {
              "SelectionPattern": ".*[NotFound].*",
              "StatusCode": 404,
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
              }
            }
          ],
          "RequestTemplates": {
            "application/json": {
              "Fn::Sub": "#set ( $root=\"https://${!context.apiId}.execute-api.${AWS::Region}.amazonaws.com/${!context.stage}\")\n\n{\n    \"bucket\":\"${AssetBucket}\",\n    \"prefix\":\"examples/photos/\",\n    \"perpage\":\"$input.params('perpage')\",\n    \"token\":\"$input.params('token')\",\n    \"root\":\"$root\"\n}\n\n"
            }
          }
        },
        "RequestParameters": {
          "method.request.querystring.perpage": false,
          "method.request.querystring.token": false
        },
        "ResourceId": {"Ref": "photos"},
        "MethodResponses": [
          {
            "StatusCode": 200,
            "ResponseParameters": {"method.response.header.date": true}
          },
          {"StatusCode": 404},
          {"StatusCode": 500}
        ],
        "RestApiId": {"Ref": "API"}
      }
    },
    "photo": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {"Ref": "photos"},
        "PathPart": "{proxy+}",
        "RestApiId": {"Ref": "API"}
      }
    },
    "photoGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "AWS_IAM",
        "HttpMethod": "GET",
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod": "GET",
          "Credentials": {"Fn::GetAtt": ["S3AccessRole", "Arn"]},
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {"Ref": "AWS::Region"},
                ":s3:path/",
                {"Ref": "AssetBucket"},
                "/examples/photos/{proxy}"
              ]
            ]
          },
          "RequestParameters": {
            "integration.request.path.proxy": "method.request.path.proxy"
          },
          "IntegrationResponses": [
            {
              "StatusCode": 200,
              "ResponseParameters": {
                "method.response.header.content-type": "integration.response.header.Content-Type"
              }
            },
            {
              "StatusCode": 404,
              "ResponseTemplates": {
                "application/xml": "{\"error\":\"Not Found\"}"
              },
              "SelectionPattern": "403"
            }
          ]
        },
        "RequestParameters": {"method.request.path.proxy": false},
        "ResourceId": {"Ref": "photo"},
        "MethodResponses": [
          {
            "StatusCode": 200,
            "ResponseParameters": {"method.response.header.content-type": false}
          },
          {"StatusCode": 400},
          {"StatusCode": 404}
        ],
        "RestApiId": {"Ref": "API"}
      }
    },
    "Documents": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {"Ref": "Examples"},
        "PathPart": "documents",
        "RestApiId": {"Ref": "API"}
      }
    },
    "DocumentsList": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "AWS_IAM",
        "HttpMethod": "GET",
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod": "POST",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {"Ref": "AWS::Region"},
                ":lambda:path/2015-03-31/functions/",
                {"Fn::GetAtt": ["ExampleS3ListLambda", "Arn"]},
                "/invocations"
              ]
            ]
          },
          "IntegrationResponses": [
            {"StatusCode": 200},
            {
              "SelectionPattern": ".*[InternalServiceError].*",
              "StatusCode": 500,
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
              }
            },
            {
              "SelectionPattern": ".*[BadRequest].*",
              "StatusCode": 400,
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
              }
            },
            {
              "SelectionPattern": ".*[Conflict].*",
              "StatusCode": 409,
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
              }
            },
            {
              "SelectionPattern": ".*[NotFound].*",
              "StatusCode": 404,
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
              }
            }
          ],
          "RequestTemplates": {
            "application/json": {
              "Fn::Sub": "#set ( $root=\"https://${!context.apiId}.execute-api.${AWS::Region}.amazonaws.com/${!context.stage}\")\n\n{\n    \"bucket\":\"${AssetBucket}\",\n    \"prefix\":\"examples/documents/\",\n    \"perpage\":\"$input.params('perpage')\",\n    \"token\":\"$input.params('token')\",\n    \"root\":\"$root\"\n}\n\n"
            }
          }
        },
        "RequestParameters": {
          "method.request.querystring.perpage": false,
          "method.request.querystring.token": false
        },
        "ResourceId": {"Ref": "Documents"},
        "MethodResponses": [
          {
            "StatusCode": 200,
            "ResponseParameters": {"method.response.header.date": true}
          },
          {"StatusCode": 404},
          {"StatusCode": 500}
        ],
        "RestApiId": {"Ref": "API"}
      }
    },
    "Example": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {"Ref": "Documents"},
        "PathPart": "{proxy+}",
        "RestApiId": {"Ref": "API"}
      }
    },
    "ExampleGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "AWS_IAM",
        "HttpMethod": "GET",
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod": "GET",
          "Credentials": {"Fn::GetAtt": ["S3AccessRole", "Arn"]},
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {"Ref": "AWS::Region"},
                ":s3:path/",
                {"Ref": "AssetBucket"},
                "/examples/documents/{proxy}"
              ]
            ]
          },
          "RequestParameters": {
            "integration.request.path.proxy": "method.request.path.proxy"
          },
          "IntegrationResponses": [
            {
              "StatusCode": 200,
              "ResponseParameters": {
                "method.response.header.content-type": "integration.response.header.Content-Type"
              }
            },
            {
              "StatusCode": 404,
              "ResponseTemplates": {
                "application/xml": "{\"error\":\"Not Found\"}"
              },
              "SelectionPattern": "403"
            }
          ]
        },
        "RequestParameters": {"method.request.path.proxy": false},
        "ResourceId": {"Ref": "Example"},
        "MethodResponses": [
          {
            "StatusCode": 200,
            "ResponseParameters": {"method.response.header.content-type": false}
          },
          {"StatusCode": 400},
          {"StatusCode": 404}
        ],
        "RestApiId": {"Ref": "API"}
      }
    },
    "ExampleHead": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "AWS_IAM",
        "HttpMethod": "HEAD",
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod": "HEAD",
          "Credentials": {"Fn::GetAtt": ["S3AccessRole", "Arn"]},
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {"Ref": "AWS::Region"},
                ":s3:path/",
                {"Ref": "AssetBucket"},
                "/examples/documents/{proxy}"
              ]
            ]
          },
          "RequestParameters": {
            "integration.request.path.proxy": "method.request.path.proxy"
          },
          "IntegrationResponses": [
            {
              "StatusCode": 200,
              "ResponseParameters": {
                "method.response.header.content-type": "integration.response.header.Content-Type"
              }
            },
            {
              "StatusCode": 404,
              "ResponseTemplates": {
                "application/xml": "{\"error\":\"Not Found\"}"
              },
              "SelectionPattern": "403"
            }
          ]
        },
        "RequestParameters": {"method.request.path.proxy": false},
        "ResourceId": {"Ref": "Example"},
        "MethodResponses": [
          {
            "StatusCode": 200,
            "ResponseParameters": {"method.response.header.content-type": false}
          },
          {"StatusCode": 400},
          {"StatusCode": 404}
        ],
        "RestApiId": {"Ref": "API"}
      }
    },
    "ExampleS3ListLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "var aws=require('aws-sdk')\naws.config.region=process.env.AWS_REGION\nvar s3=new aws.S3()\n\nexports.photos = (event, context, callback) => {\n    console.log('Received event:', JSON.stringify(event, null, 2));\n    \n    return s3.listObjects({\n        Bucket:event.bucket,\n        Prefix:event.prefix,\n        MaxKeys:event.perpage || 100,\n        Marker:event.token || null\n    }).promise()\n    .then(x=>{\n        console.log(\"s3 response:\",JSON.stringify(x,null,2))\n        var photos=x.Contents.map(function(value){\n            var key=value.Key.split('/').pop()\n            return `${event.root}/examples/photos/${key}`\n        },[])\n        callback(null,{\n            token:x.NextMarker,\n            photos\n        })\n    })\n    .catch(e=>callback(JSON.stringify({\n        type:\"[InternalServiceError]\",\n        data:e\n    })))\n}\nexports.documents = (event, context, callback) => {\n    console.log('Received event:', JSON.stringify(event, null, 2));\n   \n    return s3.listObjects({\n        Bucket:event.bucket,\n        Prefix:event.prefix,\n        MaxKeys:event.perpage || 100,\n        Marker:event.token || null\n    }).promise()\n    .then(x=>{\n        console.log(\"s3 response:\",JSON.stringify(x,null,2))\n        var examples=x.Contents.reduce(function(accum,value){\n            var key=value.Key.split('/').pop().split('.')\n            var ext=key.length >1 ? key.pop() : 'txt'\n            key=key[0]\n            var href=`${event.root}/examples/documents/${key}.${ext}`\n            if(!accum[key]){\n                accum[key]={id:key}\n            }\n            if(ext==='json'){\n                accum[key].document={href}\n            }else{\n                accum[key].description={href}\n            }\n            return accum\n        },[])\n        \n        callback(null,{\n            token:x.NextMarker,\n            examples:Object.keys(examples).map(x=>examples[x])\n        })\n    })\n    .catch(e=>callback(JSON.stringify({\n        type:\"[InternalServiceError]\",\n        data:e\n    })))\n}\n\n\n"
        },
        "Handler": "index.documents",
        "MemorySize": "128",
        "Role": {"Fn::GetAtt": ["S3ListLambdaRole", "Arn"]},
        "Runtime": "nodejs10.x",
        "Timeout": 300,
        "Tags": [{"Key": "Type", "Value": "Api"}]
      }
    },
    "ExampleS3ListPhotoLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "var aws=require('aws-sdk')\naws.config.region=process.env.AWS_REGION\nvar s3=new aws.S3()\n\nexports.photos = (event, context, callback) => {\n    console.log('Received event:', JSON.stringify(event, null, 2));\n    \n    return s3.listObjects({\n        Bucket:event.bucket,\n        Prefix:event.prefix,\n        MaxKeys:event.perpage || 100,\n        Marker:event.token || null\n    }).promise()\n    .then(x=>{\n        console.log(\"s3 response:\",JSON.stringify(x,null,2))\n        var photos=x.Contents.map(function(value){\n            var key=value.Key.split('/').pop()\n            return `${event.root}/examples/photos/${key}`\n        },[])\n        callback(null,{\n            token:x.NextMarker,\n            photos\n        })\n    })\n    .catch(e=>callback(JSON.stringify({\n        type:\"[InternalServiceError]\",\n        data:e\n    })))\n}\nexports.documents = (event, context, callback) => {\n    console.log('Received event:', JSON.stringify(event, null, 2));\n   \n    return s3.listObjects({\n        Bucket:event.bucket,\n        Prefix:event.prefix,\n        MaxKeys:event.perpage || 100,\n        Marker:event.token || null\n    }).promise()\n    .then(x=>{\n        console.log(\"s3 response:\",JSON.stringify(x,null,2))\n        var examples=x.Contents.reduce(function(accum,value){\n            var key=value.Key.split('/').pop().split('.')\n            var ext=key.length >1 ? key.pop() : 'txt'\n            key=key[0]\n            var href=`${event.root}/examples/documents/${key}.${ext}`\n            if(!accum[key]){\n                accum[key]={id:key}\n            }\n            if(ext==='json'){\n                accum[key].document={href}\n            }else{\n                accum[key].description={href}\n            }\n            return accum\n        },[])\n        \n        callback(null,{\n            token:x.NextMarker,\n            examples:Object.keys(examples).map(x=>examples[x])\n        })\n    })\n    .catch(e=>callback(JSON.stringify({\n        type:\"[InternalServiceError]\",\n        data:e\n    })))\n}\n\n\n"
        },
        "Handler": "index.photos",
        "MemorySize": "128",
        "Role": {"Fn::GetAtt": ["S3ListLambdaRole", "Arn"]},
        "Runtime": "nodejs10.x",
        "Timeout": 300,
        "Tags": [{"Key": "Type", "Value": "Api"}]
      }
    },
    "Services": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {"Fn::GetAtt": ["API", "RootResourceId"]},
        "PathPart": "services",
        "RestApiId": {"Ref": "API"}
      }
    },
    "ServicesGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "AWS_IAM",
        "HttpMethod": "GET",
        "Integration": {
          "Type": "MOCK",
          "IntegrationResponses": [
            {
              "ResponseTemplates": {
                "application/json": {
                  "Fn::Sub": "{\n    \"elasticsearch\":{\n        \"qid\":\"${ESQidLambda.Arn}\",\n        \"proxy\":\"${ESProxyLambda.Arn}\"\n    }\n}\n\n"
                }
              },
              "StatusCode": "200"
            }
          ],
          "RequestTemplates": {"application/json": "{\"statusCode\": 200}"}
        },
        "ResourceId": {"Ref": "Services"},
        "MethodResponses": [{"StatusCode": 200}],
        "RestApiId": {"Ref": "API"}
      }
    },
    "Images": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {"Fn::GetAtt": ["API", "RootResourceId"]},
        "PathPart": "images",
        "RestApiId": {"Ref": "API"}
      }
    },
    "ImagesProxy": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {"Ref": "Images"},
        "PathPart": "{proxy+}",
        "RestApiId": {"Ref": "API"}
      }
    },
    "ImagesProxyGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "GET",
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod": "GET",
          "Credentials": {"Fn::GetAtt": ["S3AccessRole", "Arn"]},
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {"Ref": "AWS::Region"},
                ":s3:path/",
                {"Ref": "Bucket"},
                "/assets/{proxy}"
              ]
            ]
          },
          "RequestParameters": {
            "integration.request.path.proxy": "method.request.path.proxy"
          },
          "IntegrationResponses": [
            {
              "StatusCode": 200,
              "ContentHandling": "CONVERT_TO_BINARY",
              "ResponseParameters": {
                "method.response.header.content-type": "integration.response.header.Content-Type",
                "method.response.header.api-stage": "context.stage"
              }
            },
            {
              "StatusCode": 404,
              "ResponseTemplates": {
                "application/xml": "{\"error\":\"Not found\"}"
              },
              "SelectionPattern": "403"
            }
          ]
        },
        "RequestParameters": {"method.request.path.proxy": false},
        "ResourceId": {"Ref": "ImagesProxy"},
        "MethodResponses": [
          {
            "StatusCode": 200,
            "ResponseParameters": {
              "method.response.header.content-type": false,
              "method.response.header.api-stage": false
            }
          },
          {"StatusCode": 400},
          {"StatusCode": 404}
        ],
        "RestApiId": {"Ref": "API"}
      }
    },
    "Bucket": {
      "Type": "AWS::S3::Bucket",
      "DeletionPolicy": "Delete",
      "Properties": {
        "WebsiteConfiguration": {"IndexDocument": "index.html"},
        "BucketEncryption": {
          "Fn::If": [
            "Encrypted",
            {
              "ServerSideEncryptionConfiguration": [
                {"ServerSideEncryptionByDefault": {"SSEAlgorithm": "AES256"}}
              ]
            },
            {"Ref": "AWS::NoValue"}
          ]
        }
      }
    },
    "Clear": {
      "Type": "Custom::S3Clear",
      "DependsOn": ["CFNInvokePolicy"],
      "Properties": {
        "ServiceToken": {"Fn::GetAtt": ["CFNLambda", "Arn"]},
        "Bucket": {"Ref": "Bucket"}
      }
    },
    "Unzip": {
      "Type": "Custom::S3Unzip",
      "Properties": {
        "ServiceToken": {"Fn::GetAtt": ["CFNLambda", "Arn"]},
        "SrcBucket": "aws-bigdata-blog",
        "Key": {"Fn::Join": ["", ["artifacts/aws-ai-qna-bot", "/website.zip"]]},
        "DstBucket": {"Ref": "Bucket"},
        "buildDate": "2020-11-09T02:53:31.224Z"
      },
      "DependsOn": "Clear"
    },
    "S3AccessRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {"Service": "apigateway.amazonaws.com"},
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "S3AccessPolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": ["s3:GetObject"],
                  "Resource": [
                    {"Fn::Sub": "arn:aws:s3:::${ImportBucket}/*"},
                    {"Fn::Sub": "arn:aws:s3:::${ExportBucket}/*"},
                    {"Fn::Sub": "arn:aws:s3:::${TestAllBucket}/*"},
                    {"Fn::Sub": "arn:aws:s3:::${Bucket}/*"},
                    {"Fn::Sub": "arn:aws:s3:::${AssetBucket}/*"}
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": ["s3:PutObject"],
                  "Resource": [
                    {"Fn::Sub": "arn:aws:s3:::${ExportBucket}/*"},
                    {"Fn::Sub": "arn:aws:s3:::${TestAllBucket}/*"}
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": ["s3:DeleteObject"],
                  "Resource": [
                    {"Fn::Sub": "arn:aws:s3:::${ImportBucket}/*"},
                    {"Fn::Sub": "arn:aws:s3:::${ExportBucket}/*"},
                    {"Fn::Sub": "arn:aws:s3:::${TestAllBucket}/*"}
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "SchemaLambdaCodeVersion": {
      "Type": "Custom::S3Version",
      "Properties": {
        "ServiceToken": {"Fn::GetAtt": ["CFNLambda", "Arn"]},
        "Bucket": "aws-bigdata-blog",
        "Key": {"Fn::Sub": "artifacts/aws-ai-qna-bot/lambda/schema.zip"},
        "BuildDate": "2020-11-09T02:53:31.225Z"
      }
    },
    "SchemaLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "aws-bigdata-blog",
          "S3Key": {"Fn::Sub": "artifacts/aws-ai-qna-bot/lambda/schema.zip"},
          "S3ObjectVersion": {"Ref": "SchemaLambdaCodeVersion"}
        },
        "Handler": "index.handler",
        "MemorySize": "128",
        "Role": {"Fn::GetAtt": ["SchemaLambdaRole", "Arn"]},
        "Runtime": "nodejs10.x",
        "Timeout": 300,
        "Tags": [{"Key": "Type", "Value": "Api"}]
      }
    },
    "SchemaLambdaRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {"Service": "lambda.amazonaws.com"},
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Path": "/",
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
          {"Ref": "QueryPolicy"}
        ]
      }
    },
    "SignupPermision": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {"Fn::GetAtt": ["SignupLambda", "Arn"]},
        "Principal": "cognito-idp.amazonaws.com",
        "SourceArn": {"Fn::GetAtt": ["UserPool", "Arn"]}
      }
    },
    "MessagePermision": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {"Fn::GetAtt": ["MessageLambda", "Arn"]},
        "Principal": "cognito-idp.amazonaws.com",
        "SourceArn": {"Fn::GetAtt": ["UserPool", "Arn"]}
      }
    },
    "MessageLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "exports.handler = (event, context, callback) => {\n    console.log('Received event:', JSON.stringify(event, null, 2));\n    var approvedDomain = process.env.APPROVED_DOMAIN;\n\n    if(approvedDomain){\n        var regex=new RegExp(`^[A-Za-z0-9._%+-]+@${approvedDomain}$`)\n        if (event.request.userAttributes.email.match(regex)) {\n            event.response.emailSubject = subject;\n            event.response.emailMessage = message(\n                event.request.codeParameter,\n                event.request.usernameParameter\n            );\n            context.done(null, event);\n        } else {\n            var error = new Error('EMAIL_DOMAIN_DENIED_ERR');\n            context.done(error, event);\n        }\n    }else{\n        event.response.emailSubject = subject;\n        event.response.emailMessage = message(event.request.codeParameter);\n        context.done(null, event);\n    }\n};\n\nvar subject=\"QnABot Signup Verification Code\";\nfunction message(code,name){\n    return `Hello, Your QnABot verification code is: ${code}`\n}\n\n"
        },
        "Handler": "index.handler",
        "MemorySize": "128",
        "Environment": {
          "Variables": {
            "APPROVED_DOMAIN": {
              "Fn::If": ["Domain", "EMPTY", {"Ref": "AWS::NoValue"}]
            }
          }
        },
        "Role": {"Fn::GetAtt": ["SignupLambdaRole", "Arn"]},
        "Runtime": "nodejs10.x",
        "Timeout": 300,
        "Tags": [{"Key": "Type", "Value": "Cognito"}]
      }
    },
    "SignupLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "exports.handler = (event, context, callback) => {\n    console.log('Received event:', JSON.stringify(event, null, 2));\n    var approvedDomain = process.env.APPROVED_DOMAIN;\n    \n    if(approvedDomain){\n        var regex=new RegExp(`^[A-Za-z0-9._%+-]+@${approvedDomain}$`)\n        if (event.request.userAttributes.email.match(regex)) {\n            context.done(null, event);\n        }else{\n            var error = new Error('EMAIL_DOMAIN_DENIED_ERR');\n            context.done(error, event);\n        }\n    }else{\n        context.done(null,event) \n    }\n};\n\n"
        },
        "Handler": "index.handler",
        "MemorySize": "128",
        "Environment": {
          "Variables": {
            "APPROVED_DOMAIN": {
              "Fn::If": ["Domain", "EMPTY", {"Ref": "AWS::NoValue"}]
            }
          }
        },
        "Role": {"Fn::GetAtt": ["SignupLambdaRole", "Arn"]},
        "Runtime": "nodejs10.x",
        "Timeout": 300,
        "Tags": [{"Key": "Type", "Value": "Cognito"}]
      }
    },
    "SignupLambdaRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {"Service": "lambda.amazonaws.com"},
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Path": "/",
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        ]
      }
    },
    "TestAllStack": {
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "TemplateURL": {
          "Fn::Sub": "http://aws-bigdata-blog.s3.${AWS::Region}.amazonaws.com/artifacts/aws-ai-qna-bot/templates/testall.json"
        },
        "Parameters": {
          "CFNLambda": {"Fn::GetAtt": ["CFNLambda", "Arn"]},
          "CFNInvokePolicy": {"Ref": "CFNInvokePolicy"},
          "BotName": {"Ref": "LexBot"},
          "BotAlias": {"Ref": "VersionAlias"},
          "BootstrapBucket": "aws-bigdata-blog",
          "BootstrapPrefix": "artifacts/aws-ai-qna-bot",
          "VarIndex": {"Fn::GetAtt": ["Var", "QnaIndex"]},
          "EsEndpoint": {"Fn::GetAtt": ["ESVar", "ESAddress"]},
          "EsProxyLambda": {"Fn::GetAtt": ["ESProxyLambda", "Arn"]},
          "TestAllBucket": {"Ref": "TestAllBucket"}
        }
      }
    },
    "Var": {
      "Type": "Custom::Variable",
      "Properties": {
        "ServiceToken": {"Fn::GetAtt": ["CFNLambda", "Arn"]},
        "index": {"value": {"Ref": "AWS::StackName"}, "op": "toLowerCase"},
        "QnAType": "qna",
        "QuizType": "quiz",
        "QnaIndex": {
          "value": {"Fn::Sub": "${AWS::StackName}"},
          "op": "toLowerCase"
        },
        "MetricsIndex": {
          "value": {"Fn::Sub": "${AWS::StackName}-metrics"},
          "op": "toLowerCase"
        },
        "FeedbackIndex": {
          "value": {"Fn::Sub": "${AWS::StackName}-feedback"},
          "op": "toLowerCase"
        }
      }
    },
    "InfoVar": {
      "Type": "Custom::Variable",
      "Properties": {
        "ServiceToken": {"Fn::GetAtt": ["CFNLambda", "Arn"]},
        "Version": "4.3.2",
        "BuildDateString": "Mon Nov 09 2020 02:53:31 GMT+0000 (Coordinated Universal Time)",
        "BuildDate": "2020-11-09T02:53:31.226Z"
      }
    },
    "ESVar": {
      "Type": "Custom::Variable",
      "Properties": {
        "ServiceToken": {"Fn::GetAtt": ["CFNLambda", "Arn"]},
        "ESArn": {
          "Fn::If": [
            "CreateDomain",
            {"Fn::GetAtt": ["ElasticsearchDomain", "DomainArn"]},
            {"Fn::GetAtt": ["ESInfo", "Arn"]}
          ]
        },
        "ESAddress": {
          "Fn::If": [
            "CreateDomain",
            {"Fn::GetAtt": ["ElasticsearchDomain", "DomainEndpoint"]},
            {"Fn::GetAtt": ["ESInfo", "Endpoint"]}
          ]
        },
        "ESDomain": {
          "Fn::If": ["CreateDomain", {"Ref": "ElasticsearchDomain"}, "EMPTY"]
        }
      }
    },
    "ApiUrl": {
      "Type": "Custom::Variable",
      "Properties": {
        "ServiceToken": {"Fn::GetAtt": ["CFNLambda", "Arn"]},
        "Name": {
          "Fn::Join": [
            "",
            [
              "https://",
              {"Ref": "API"},
              ".execute-api.",
              {"Ref": "AWS::Region"},
              ".amazonaws.com/prod"
            ]
          ]
        }
      }
    },
    "Urls": {
      "Type": "Custom::Variable",
      "Properties": {
        "ServiceToken": {"Fn::GetAtt": ["CFNLambda", "Arn"]},
        "Designer": {
          "Fn::Join": [
            "",
            [{"Fn::GetAtt": ["ApiUrl", "Name"]}, "/static/index.html"]
          ]
        },
        "Client": {
          "Fn::Join": [
            "",
            [{"Fn::GetAtt": ["ApiUrl", "Name"]}, "/static/client.html"]
          ]
        },
        "Kibana": {"Fn::Sub": "${ESVar.ESAddress}/_plugin/kibana/"}
      }
    },
    "API": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": {"Ref": "AWS::StackName"},
        "Description": "An Api interface for the admin actions on the QNA bot",
        "BinaryMediaTypes": ["image/png"]
      }
    },
    "ApiCompression": {
      "Type": "Custom::ApiCompression",
      "Properties": {
        "ServiceToken": {"Fn::GetAtt": ["CFNLambda", "Arn"]},
        "restApiId": {"Ref": "API"},
        "value": "500000"
      }
    },
    "Deployment": {
      "Type": "Custom::ApiDeployment",
      "Properties": {
        "ServiceToken": {"Fn::GetAtt": ["CFNLambda", "Arn"]},
        "restApiId": {"Ref": "API"},
        "buildDate": "2020-11-09T02:53:31.231Z",
        "stage": "prod",
        "Encryption": {"Ref": "Encryption"}
      },
      "DependsOn": [
        "AlexaSchema",
        "BotPost",
        "BotGet",
        "HealthGet",
        "rootGet",
        "QuestionsGet",
        "QuestionsDelete",
        "QuestionHead",
        "QuestionPut",
        "QuestionsOptions",
        "QuestionDelete",
        "ProxyAnyGet",
        "ProxyAnyHead",
        "DesignerLoginResourceGet",
        "ClientLoginResourceGet",
        "JobsGet",
        "testallsList",
        "testallPut",
        "testallGet",
        "testallDelete",
        "exportsList",
        "exportPut",
        "exportGet",
        "exportDelete",
        "importsList",
        "importGet",
        "importDelete",
        "ExamplesGet",
        "photosList",
        "photoGet",
        "DocumentsList",
        "ExampleGet",
        "ExampleHead",
        "ServicesGet",
        "ImagesProxyGet",
        "InvokePermissionLexBuildLambdaStart",
        "InvokePermissionUtteranceLambda",
        "InvokePermissionESQidLambda",
        "InvokePermissionESCleaningLambda",
        "InvokePermissionESProxyLambda",
        "InvokePermissionLexProxyLambda",
        "InvokePermissionS3ListLambda",
        "InvokePermissionExampleS3ListLambda",
        "InvokePermissionExampleS3ListPhotoLambda",
        "InvokePermissionSchemaLambda"
      ]
    },
    "Stage": {
      "Type": "AWS::ApiGateway::Stage",
      "Properties": {
        "DeploymentId": {"Ref": "Deployment"},
        "RestApiId": {"Ref": "API"},
        "StageName": "prod",
        "MethodSettings": [
          {
            "DataTraceEnabled": true,
            "HttpMethod": "*",
            "LoggingLevel": "INFO",
            "ResourcePath": "/*"
          }
        ],
        "Variables": {
          "Id": "QnABot",
          "Region": {"Ref": "AWS::Region"},
          "CognitoEndpoint": {"Fn::GetAtt": ["DesignerLogin", "Domain"]},
          "DesignerLoginUrl": {
            "Fn::Join": [
              "",
              [{"Fn::GetAtt": ["ApiUrl", "Name"]}, "/pages/designer"]
            ]
          },
          "ClientLoginUrl": {
            "Fn::If": [
              "Public",
              {"Fn::GetAtt": ["Urls", "Client"]},
              {
                "Fn::Join": [
                  "",
                  [{"Fn::GetAtt": ["ApiUrl", "Name"]}, "/pages/client"]
                ]
              }
            ]
          }
        }
      }
    },
    "ApiGatewayAccount": {
      "Type": "AWS::ApiGateway::Account",
      "Properties": {
        "CloudWatchRoleArn": {
          "Fn::GetAtt": ["ApiGatewayCloudWatchLogsRole", "Arn"]
        }
      }
    },
    "DocumentationVersion": {
      "Type": "AWS::ApiGateway::DocumentationVersion",
      "DependsOn": ["BotDoc"],
      "Properties": {
        "Description": "",
        "DocumentationVersion": "1.0",
        "RestApiId": {"Ref": "API"}
      }
    },
    "InvokePermissionLexBuildLambda": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {"Fn::GetAtt": ["LexBuildLambda", "Arn"]},
        "Principal": "apigateway.amazonaws.com"
      }
    },
    "InvokePermissionLexBuildLambdaStart": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {"Fn::GetAtt": ["LexBuildLambdaStart", "Arn"]},
        "Principal": "apigateway.amazonaws.com"
      }
    },
    "InvokePermissionLexBuildLambdaPoll": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {"Fn::GetAtt": ["LexBuildLambdaPoll", "Arn"]},
        "Principal": "apigateway.amazonaws.com"
      }
    },
    "InvokePermissionUtteranceLambda": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {"Fn::GetAtt": ["UtteranceLambda", "Arn"]},
        "Principal": "apigateway.amazonaws.com"
      }
    },
    "InvokePermissionESQidLambda": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {"Fn::GetAtt": ["ESQidLambda", "Arn"]},
        "Principal": "apigateway.amazonaws.com"
      }
    },
    "InvokePermissionESCleaningLambda": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {"Fn::GetAtt": ["ESCleaningLambda", "Arn"]},
        "Principal": "apigateway.amazonaws.com"
      }
    },
    "InvokePermissionESProxyLambda": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {"Fn::GetAtt": ["ESProxyLambda", "Arn"]},
        "Principal": "apigateway.amazonaws.com"
      }
    },
    "InvokePermissionLexProxyLambda": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {"Fn::GetAtt": ["LexProxyLambda", "Arn"]},
        "Principal": "apigateway.amazonaws.com"
      }
    },
    "InvokePermissionLexStatusLambda": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {"Fn::GetAtt": ["LexStatusLambda", "Arn"]},
        "Principal": "apigateway.amazonaws.com"
      }
    },
    "InvokePermissionS3ListLambda": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {"Fn::GetAtt": ["S3ListLambda", "Arn"]},
        "Principal": "apigateway.amazonaws.com"
      }
    },
    "InvokePermissionExampleS3ListLambda": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {"Fn::GetAtt": ["ExampleS3ListLambda", "Arn"]},
        "Principal": "apigateway.amazonaws.com"
      }
    },
    "InvokePermissionExampleS3ListPhotoLambda": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {"Fn::GetAtt": ["ExampleS3ListPhotoLambda", "Arn"]},
        "Principal": "apigateway.amazonaws.com"
      }
    },
    "InvokePermissionSchemaLambda": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {"Fn::GetAtt": ["SchemaLambda", "Arn"]},
        "Principal": "apigateway.amazonaws.com"
      }
    },
    "LambdaAccessRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {"Service": "apigateway.amazonaws.com"},
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Path": "/",
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        ],
        "Policies": [
          {
            "PolicyName": "LambdaPolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {"Effect": "Allow", "Action": ["lambda:*"], "Resource": ["*"]}
              ]
            }
          }
        ]
      }
    },
    "dashboard": {
      "Type": "AWS::CloudWatch::Dashboard",
      "Properties": {
        "DashboardName": {"Fn::Sub": "${AWS::Region}-${AWS::StackName}"},
        "DashboardBody": {
          "Fn::Sub": "{\"widgets\":[{\"type\":\"text\",\"width\":24,\"height\":2,\"x\":0,\"y\":0,\"properties\":{\"markdown\":\"# QnABot:${AWS::StackName} Dashboard\"}},{\"type\":\"text\",\"width\":24,\"height\":2,\"x\":0,\"y\":3,\"properties\":{\"markdown\":\"## Lex \"}},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lex\",\"MissedUtteranceCount\",\"BotAlias\",\"${VersionAlias}\",\"Operation\",\"PostText\",\"BotName\",\"${LexBot}\"],[\".\",\"RuntimeSucessfulRequestLatency\",\".\",\".\",\".\",\".\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"RuntimeRequestCount\",\".\",\".\",\".\",\".\",\".\",\".\"]],\"region\":\"${AWS::Region}\",\"title\":\"Lex Utterances/Latency\"},\"height\":6,\"width\":6,\"x\":0,\"y\":5},{\"type\":\"text\",\"width\":24,\"height\":2,\"x\":0,\"y\":12,\"properties\":{\"markdown\":\"## ElasticSearch\"}},{\"type\":\"metric\",\"width\":6,\"height\":6,\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/ES\",\"ReadLatency\",\"DomainName\",\"${ESVar.ESDomain}\",\"ClientId\",\"${AWS::AccountId}\"]],\"region\":\"${AWS::Region}\"},\"x\":0,\"y\":14},{\"type\":\"metric\",\"width\":6,\"height\":6,\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/ES\",\"ReadIOPS\",\"DomainName\",\"${ESVar.ESDomain}\",\"ClientId\",\"${AWS::AccountId}\"],[\".\",\"ReadThroughput\",\".\",\".\",\".\",\".\",{\"yAxis\":\"right\"}]],\"region\":\"${AWS::Region}\"},\"x\":6,\"y\":14},{\"type\":\"metric\",\"width\":6,\"height\":6,\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/ES\",\"CPUUtilization\",\"DomainName\",\"${ESVar.ESDomain}\",\"ClientId\",\"${AWS::AccountId}\"]],\"region\":\"${AWS::Region}\"},\"x\":12,\"y\":14},{\"type\":\"metric\",\"x\":18,\"y\":14,\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/ES\",\"ClusterUsedSpace\",\"DomainName\",\"${ESVar.ESDomain}\",\"ClientId\",\"${AWS::AccountId}\"],[\".\",\"SearchableDocuments\",\".\",\".\",\".\",\".\",{\"yAxis\":\"right\"}]],\"region\":\"${AWS::Region}\"},\"height\":6,\"width\":6},{\"type\":\"metric\",\"width\":6,\"height\":6,\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/ES\",\"ClusterStatus.green\",\"DomainName\",\"${ESVar.ESDomain}\",\"ClientId\",\"${AWS::AccountId}\",{\"color\":\"#2ca02c\"}],[\".\",\"ClusterStatus.red\",\".\",\".\",\".\",\".\",{\"color\":\"#d62728\"}],[\".\",\"ClusterStatus.yellow\",\".\",\".\",\".\",\".\",{\"color\":\"#bcbd22\"}]],\"region\":\"${AWS::Region}\"},\"x\":0,\"y\":20},{\"type\":\"text\",\"width\":24,\"height\":2,\"x\":0,\"y\":33,\"properties\":{\"markdown\":\"## Lambda Function\"}},{\"type\":\"text\",\"width\":24,\"height\":2,\"x\":0,\"y\":35,\"properties\":{\"markdown\":\"### CustomResource\"}},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${VersionLambda}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"VersionLambda\",\"period\":300},\"height\":6,\"width\":6,\"x\":0,\"y\":37},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${CFNLambda}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"CFNLambda\",\"period\":300},\"height\":6,\"width\":6,\"x\":6,\"y\":37},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${ESCFNProxyLambda}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"ESCFNProxyLambda\",\"period\":300},\"height\":6,\"width\":6,\"x\":12,\"y\":37},{\"type\":\"text\",\"width\":24,\"height\":2,\"x\":0,\"y\":43,\"properties\":{\"markdown\":\"### Fulfillment\"}},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${FulfillmentLambda}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"FulfillmentLambda\",\"period\":300},\"height\":6,\"width\":6,\"x\":0,\"y\":45},{\"type\":\"text\",\"width\":24,\"height\":2,\"x\":0,\"y\":51,\"properties\":{\"markdown\":\"### Api\"}},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${LexBuildLambda}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"LexBuildLambda\",\"period\":300},\"height\":6,\"width\":6,\"x\":0,\"y\":53},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${LexBuildLambdaStart}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"LexBuildLambdaStart\",\"period\":300},\"height\":6,\"width\":6,\"x\":6,\"y\":53},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${LexBuildLambdaPoll}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"LexBuildLambdaPoll\",\"period\":300},\"height\":6,\"width\":6,\"x\":12,\"y\":53},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${LexProxyLambda}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"LexProxyLambda\",\"period\":300},\"height\":6,\"width\":6,\"x\":18,\"y\":53},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${LexStatusLambda}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"LexStatusLambda\",\"period\":300},\"height\":6,\"width\":6,\"x\":0,\"y\":59},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${S3ListLambda}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"S3ListLambda\",\"period\":300},\"height\":6,\"width\":6,\"x\":6,\"y\":59},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${ExampleS3ListLambda}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"ExampleS3ListLambda\",\"period\":300},\"height\":6,\"width\":6,\"x\":12,\"y\":59},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${ExampleS3ListPhotoLambda}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"ExampleS3ListPhotoLambda\",\"period\":300},\"height\":6,\"width\":6,\"x\":18,\"y\":59},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${SchemaLambda}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"SchemaLambda\",\"period\":300},\"height\":6,\"width\":6,\"x\":0,\"y\":65},{\"type\":\"text\",\"width\":24,\"height\":2,\"x\":0,\"y\":71,\"properties\":{\"markdown\":\"### Service\"}},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${UtteranceLambda}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"UtteranceLambda\",\"period\":300},\"height\":6,\"width\":6,\"x\":0,\"y\":73},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${ESQidLambda}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"ESQidLambda\",\"period\":300},\"height\":6,\"width\":6,\"x\":6,\"y\":73},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${ESCleaningLambda}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"ESCleaningLambda\",\"period\":300},\"height\":6,\"width\":6,\"x\":12,\"y\":73},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${ESProxyLambda}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"ESProxyLambda\",\"period\":300},\"height\":6,\"width\":6,\"x\":18,\"y\":73},{\"type\":\"text\",\"width\":24,\"height\":2,\"x\":0,\"y\":79,\"properties\":{\"markdown\":\"### Logging\"}},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${ESLoggingLambda}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"ESLoggingLambda\",\"period\":300},\"height\":6,\"width\":6,\"x\":0,\"y\":81},{\"type\":\"text\",\"width\":24,\"height\":2,\"x\":0,\"y\":87,\"properties\":{\"markdown\":\"### Query\"}},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${ESQueryLambda}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"ESQueryLambda\",\"period\":300},\"height\":6,\"width\":6,\"x\":0,\"y\":89},{\"type\":\"text\",\"width\":24,\"height\":2,\"x\":0,\"y\":95,\"properties\":{\"markdown\":\"### Cognito\"}},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${MessageLambda}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"MessageLambda\",\"period\":300},\"height\":6,\"width\":6,\"x\":0,\"y\":97},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${SignupLambda}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"SignupLambda\",\"period\":300},\"height\":6,\"width\":6,\"x\":6,\"y\":97}]}"
        }
      }
    }
  },
  "Conditions": {
    "Public": {"Fn::Equals": [{"Ref": "PublicOrPrivate"}, "PUBLIC"]},
    "Encrypted": {"Fn::Equals": [{"Ref": "Encryption"}, "ENCRYPTED"]},
    "AdminSignUp": {"Fn::Equals": [true, true]},
    "Domain": {"Fn::Equals": [true, false]},
    "BuildExamples": {"Fn::Equals": [true, true]},
    "CreateDomain": {"Fn::Equals": [true, true]},
    "DontCreateDomain": {"Fn::Equals": [true, false]}
  },
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "QnABot with admin and client websites - (Master v4.3.2)",
  "Mappings": {},
  "Outputs": {
    "ContentDesignerURL": {
      "Value": {
        "Fn::Join": [
          "",
          [{"Fn::GetAtt": ["ApiUrl", "Name"]}, "/pages/designer"]
        ]
      }
    },

    "DashboardURL": {
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://console.aws.amazon.com/cloudwatch/home?",
            "region=",
            {"Ref": "AWS::Region"},
            "#dashboards:name=",
            {"Ref": "dashboard"}
          ]
        ]
      }
    },
    "UserPoolURL": {
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://console.aws.amazon.com/cognito/users/",
            "?region=",
            {"Ref": "AWS::Region"},
            "#/pool/",
            {"Ref": "UserPool"},
            "/details"
          ]
        ]
      }
    },
    "BotName": {"Value": {"Ref": "LexBot"}},
    "BotAlias": {"Value": {"Ref": "VersionAlias"}},
    "Intent": {"Value": {"Ref": "Intent"}},
    "IntentFallback": {"Value": {"Ref": "IntentFallback"}},
    "DefaultSettingsSSMParameterName": {
      "Value": {"Ref": "DefaultQnABotSettings"}
    },
    "CustomSettingsSSMParameterName": {"Value": {"Ref": "CustomQnABotSettings"}}
  },
  "Parameters": {
    "Email": {
      "Type": "String",
      "Description": "Email address for the admin user. Will be used for loging in and for setting the admin password. This email will receive the temporary password for the admin user.",
      "AllowedPattern": ".+\\@.+\\..+",
      "ConstraintDescription": "Must be valid email address eg. johndoe@example.com"
    },
    "Username": {
      "Type": "String",
      "Description": "Administrator username",
      "Default": "Admin"
    },
    "Encryption": {
      "Type": "String",
      "Description": "Choose whether resources (S3 and ElasticSearch) are encrypted at rest. Selecting encrypted configuration will provision c5.large.elasticsearch instances - see https://aws.amazon.com/elasticsearch-service/pricing/.",
      "AllowedValues": ["ENCRYPTED", "UNENCRYPTED"],
      "Default": "UNENCRYPTED",
      "ConstraintDescription": "Allowed Values are UNENCRYPTED or ENCRYPTED"
    },
    "ElasticSearchNodeCount": {
      "Type": "String",
      "Description": "Number of nodes in ElasticSearch domain - '4' is recommended for fault tolerant production deployments.",
      "AllowedValues": ["2", "4"],
      "Default": "2"
    },
    "PublicOrPrivate": {
      "Type": "String",
      "Description": "Choose whether access to the QnABot client should be publicly available or restricted to users in QnABot UserPool.",
      "AllowedValues": ["PUBLIC", "PRIVATE"],
      "Default": "PUBLIC"
    }
  }
}