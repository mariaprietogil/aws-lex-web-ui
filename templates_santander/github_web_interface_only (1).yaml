AWSTemplateFormatVersion: 2010-09-09
Description: |
    Master Pipeline Lex Web UI CloudFormation template (v0.17.3)
    It deploys:
        - S3 buckets to host the web application
        - CodeBuild project to build the configuration and deploy to S3
        - Optional Lex Bot (based on OrderFlowers example)
        - Optional Cognito Identity Pool for unauthenticated identities
        - Optional Lambda function to delete S3 buckets
        - CodeCommit Repository containg the source code in
          this project and a CodeBuild project, Lambda functions to initialize
          the repo
        - Optional deployment pipeline using CodePipeline and CodeBuild
        - CloudWatch Logs groups related to Lambda functions
        - Associated IAM roles

Parameters:
    BotName:
        Description: >
            Name of an existing Lex Bot to be used by the web ui.
            This is an optional parameter. If left empty, a Bot based
            on the OrderFlowers sample will be automatically created.
        Type: String
        Default: ''
        MaxLength: 50
        AllowedPattern: '(^$|^[a-zA-Z]+((_[a-zA-Z]+)*|([a-zA-Z]+_)*|_))'
        ConstraintDescription: >
            Must conform with the permitted Lex Bot name pattern.

    BotNamePrefix:
        Type: String
        Description: >
            Prefix to add to Lex resource names when using the sample bot.
            Ignored if you provide your own bot. Must conform to the
            permitted Lex Bot name syntax (alpha characters).
        Default: WebUi
        MinLength: 3
        MaxLength: 32
        AllowedPattern: '^[a-zA-Z\._]+$'
        ConstraintDescription: >
            Must conform with the permitted Lex Bot name pattern.

    ShouldDeleteBot:
        Type: String
        Default: true
        AllowedValues:
          - true
          - false
        Description: >
            If set to True, the Lex bot and associated resources will
            be deleted when the stack is deleted. Otherwise, the bot
            will be preserved. Only applies if the bot is created by
            this stack.

    ForceCognitoLogin:
        Type: String
        Default: false
        Description: >
            If set to True, the menu with a login action will not be displayed
            in the Lex Web Ui, and the Cognito login will be executed automatically. 

    CodePipelineName:
        Type: String
        Description: >
            Name of CodePipeline pipeline to be created. Used to manage
            the build and deployment of the web application. Must be
            unique per region.
            to true.
        Default: lex-web-ui
        MinLength: 1
        MaxLength: 100
        AllowedPattern: '[A-Za-z0-9.@\-_]+'
        ConstraintDescription: Alphanumeric, dot, dash, underscore and @.

    GitHubOAuthToken:
        Type: String
        Description: >
            Name of GitHub OAuth token to be used. Used to connect Github
            with CodePipeline.
        NoEcho: true
        MinLength: 40
        MaxLength: 40
        AllowedPattern: '[a-z0-9]*'
        ConstraintDescription: Alphanumeric, dot, dash, underscore and @.

    GitHubOwner:
        Type: String
        Description: >
            Name of owner of the GitHub repo. 
        MinLength: 1
        MaxLength: 100
        AllowedPattern: '[A-Za-z0-9-]+'
        ConstraintDescription: Alphanumeric, dot, dash, underscore and @.

    GitHubRepo:
        Type: String
        Description: >
            Name of GitHub repo to be used.
        AllowedPattern: '[A-Za-z0-9-]+'
        ConstraintDescription: Alphanumeric, dot, dash, underscore and @.  

    GitHubBranch:
        Type: String
        Description: >
            Name of owner of the repo branch to use. 
        Default: master
        AllowedPattern: '[A-Za-z0-9-]+'
        ConstraintDescription: Alphanumeric, dot, dash, underscore and @.

    ApplicationStackName:
        Type: String
        Description: >
            Name of the stack for the actual deployed application.
        Default: github-codepipeline-app
        AllowedPattern: '[A-Za-z0-9-]+'
        ConstraintDescription: Alphanumeric, dot, dash, underscore and @.        

    CodeBuildName:
        Type: String
        Description: >
            Name of the CodeBuild project to be created.  Used for
            building the web app with the pipeline. Must be unique
            per region.
        Default: lex-web-ui
        MinLength: 2
        MaxLength: 255
        AllowedPattern: '^[A-Za-z0-9][A-Za-z0-9\-_]{1,254}$'
        ConstraintDescription: >
            Should start with Alphanumeric. May contain alphanumeric, undescore
            and dash.

    WebAppParentOrigin:
        Type: String
        Description: >
            Browser origin (e.g. http://mysite.example.com:8080)
            of an existing site that is allowed to send/receive data
            and events from the web ui in an iframe setup. This is an
            optional parameter. If left empty, an S3 bucket will be
            created to host a sample parent site embedding the webapp
            as an iframe.
        Default: ''
        AllowedPattern: '(^$|^https?://[\w\.-]+(:\d+)?$)'
        ConstraintDescription: Empty or valid browser origin

    WebAppPath:
        Type: String
        Default: '/parent.html'
        Description: >
            Path to the page hosting the sample WebApp. This parameter defaults
            to parent.html which is used by the sample app created when hosting the
            bot in a separate iframe. This path should be updated to reflect the
            path to the default (home) page used by the WebAppParentOrigin.
            This may be /index.html rather than the default.

    CognitoIdentityPoolId:
        Type: String
        Description: >
            Id of an existing Cognito Identity Pool. This is an optional
            parameter. If left empty, a Cognito Identity Pool will be
            automatically created. The pool ID is used by the web ui
            to get AWS credentials for making calls to Lex and Polly.
        Default: ''
        AllowedPattern: '(^$|^[\w-]+:[0-9a-f-]+$)'
        ConstraintDescription: Empty or a valid Cognito Identity Pool ID

    CognitoIdentityPoolName:
        Type: String
        Description: >
            Name of Cognito identity pool to be created to provide
            AWS credentials to the web ui. Only used if the
            CognitoIdentityPoolId parameter is left empty (default).
        Default: Lex Web UI
        MinLength: 1
        MaxLength: 128
        AllowedPattern: '^[\w ]+$'
        ConstraintDescription: Alphanumeric and spaces.

    CleanupBuckets:
        Type: String
        Default: true
        AllowedValues:
          - true
          - false
        Description: >
            If set to True, buckets created for the Pipeline and to store the
            web application will be deleted on CloudFormation stack delete.
            If set to False, S3 buckets will be retained.

    # Sub-templates and source artifacts are hosted in this bucket.
    # The content of this bucket is maintained outside of this template
    # by using the Makefile under the build directory of this project.
    # See the README.md file for instructions on how to use your own bucket.
    BootstrapBucket:
        Type: String
        Default: aws-bigdata-blog
        Description: >
            S3 bucket containing pre-staged nested templates and source artifacts
    BootstrapPrefix:
        Type: String
        Default: artifacts/aws-lex-web-ui/artifacts
        Description: >
            S3 prefix where the templates and source are stored under

    WebAppConfNegativeFeedback:
        Type: String
        Default: Thumbs down
        Description: >
            This optional parameter defines the message to be sent by the user upon pressing
            a feedback button signaling a negative feedback.
            If left empty feedback buttons will be disabled on the UI.

    WebAppConfPositiveFeedback:
        Type: String
        Default: Thumbs up
        Description: >
            This optional parameter defines the message to be sent by the user upon pressing
            a feedback button signaling a positive feedback.
            If left empty feedback buttons will be disabled on the UI.

    WebAppConfHelp:
        Type: String
        Default: Help
        Description: >
            This is an optional parameter, when defined with a value, a help button will display on the chat bot toolbar.
            When pressed the button will send the entered string to the bot as a help message.  If left empty
            the help button will be disabled.
Metadata:
    AWS::CloudFormation::Interface:
        ParameterGroups:
            - Label:
                default: Deployment Parameters
              Parameters:
                  - CodeBuildName
                  - CodePipelineName
                  - CleanupBuckets
                  - BootstrapBucket
                  - BootstrapPrefix
            - Label:
                default: Lex Bot Configuration Parameters
              Parameters:
                  - BotName
                  - BotNamePrefix
                  - ShouldDeleteBot
            - Label:
                default: Cognito Parameters
              Parameters:
                  - CognitoIdentityPoolId
                  - CognitoIdentityPoolName
            - Label:
                default: Web Application Parameters
              Parameters:
                  - WebAppParentOrigin
                  - WebAppPath
                  - WebAppConfNegativeFeedback
                  - WebAppConfPositiveFeedback
                  - WebAppConfHelp

Conditions:
    NeedsBot: !Equals [!Ref BotName, '']
    NeedsCognito: !Equals [!Ref CognitoIdentityPoolId, '']
    NeedsForceCognitoLogin: !Equals [!Ref ForceCognitoLogin, 'true']
    NeedsWebAppParentOrigin: !Equals [!Ref WebAppParentOrigin, '']
    ShouldCleanupBuckets: !Equals [!Ref CleanupBuckets, true]

Resources:
    Bot:
        Type: AWS::CloudFormation::Stack
        Condition: NeedsBot
        Properties:
            TimeoutInMinutes: 15
            TemplateURL: !Sub "https://${BootstrapBucket}.s3.${AWS::Region}.amazonaws.com/${BootstrapPrefix}/templates/lexbot.yaml"
            Parameters:
                NamePrefix: !Ref BotNamePrefix
                ShouldDeleteBot: !Ref ShouldDeleteBot
                CustomResourceCodeBucket: !Ref BootstrapBucket
                CustomResourceCodeObject: !Sub "${BootstrapPrefix}/custom-resources.zip"

    CognitoIdentityPool:
          Type: AWS::Cognito::IdentityPool
          Condition: NeedsCognito
          Properties:
              IdentityPoolName: !Ref CognitoIdentityPoolName
              AllowUnauthenticatedIdentities: true
              CognitoIdentityProviders:
                  - ClientId: !Ref CognitoUserPoolClient
                    ProviderName: !GetAtt CognitoUserPool.ProviderName

    CognitoIdentityPoolSetRole:
          Type: AWS::Cognito::IdentityPoolRoleAttachment
          Condition: NeedsCognito
          Properties:
              IdentityPoolId: !Ref CognitoIdentityPool
              Roles:
                  authenticated: !GetAtt CognitoAuthRole.Arn
                  unauthenticated: !GetAtt CognitoUnauthRole.Arn

    CognitoUserPool:
          Type: AWS::Cognito::UserPool
          Condition: NeedsCognito
          Properties:
              AutoVerifiedAttributes:
                - "email"
              MfaConfiguration: "OFF"
              AliasAttributes:
                - "email"
              Schema:
                  - AttributeDataType: String
                    Name: "given_name"
                    Required: true
                    Mutable: true
                  - AttributeDataType: String
                    Name: "family_name"
                    Required: true
                    Mutable: true
                  - AttributeDataType: String
                    Name: "email"
                    Required: true
                    Mutable: true
                  - AttributeDataType: String
                    Name: "preferred_username"
                    Required: true
                    Mutable: true
              UserPoolName: 'LexWebUI-UserPool'

    CognitoUserPoolClient:
          Type: AWS::Cognito::UserPoolClient
          Condition: NeedsCognito
          Properties:
              GenerateSecret: false
              UserPoolId: !Ref CognitoUserPool

    CognitoUnauthRole:
          Type: AWS::IAM::Role
          Condition: NeedsCognito
          Properties:
              Path: /
              AssumeRolePolicyDocument:
                  Version: 2012-10-17
                  Statement:
                      - Principal:
                            Federated: cognito-identity.amazonaws.com
                        Effect: Allow
                        Action:
                            - sts:AssumeRoleWithWebIdentity
                        Condition:
                            StringEquals:
                                cognito-identity.amazonaws.com:aud: !Ref CognitoIdentityPool
                            ForAnyValue:StringLike:
                                cognito-identity.amazonaws.com:amr: unauthenticated
              Policies:
                  - PolicyName: LexPost
                    PolicyDocument:
                        Version: 2012-10-17
                        Statement:
                            - Effect: !If [NeedsForceCognitoLogin, Deny, Allow]
                              Action:
                                  - lex:PostText
                                  - lex:PostContent
                                  - lex:DeleteSession
                                  - lex:PutSession
                              Resource:
                                !If
                                  - NeedsBot
                                  - !Sub "arn:aws:lex:${AWS::Region}:${AWS::AccountId}:bot:${Bot.Outputs.BotName}:*"
                                  - !Sub "arn:aws:lex:${AWS::Region}:${AWS::AccountId}:bot:${BotName}:*"
                     
    CognitoAuthRole:
          Type: AWS::IAM::Role
          Condition: NeedsCognito
          Properties:
              Path: /
              AssumeRolePolicyDocument:
                  Version: 2012-10-17
                  Statement:
                      - Principal:
                            Federated: cognito-identity.amazonaws.com
                        Effect: Allow
                        Action:
                            - sts:AssumeRoleWithWebIdentity
                        Condition:
                            StringEquals:
                                cognito-identity.amazonaws.com:aud: !Ref CognitoIdentityPool
                            ForAnyValue:StringLike:
                                cognito-identity.amazonaws.com:amr: authenticated
              Policies:
                  - PolicyName: PollySynth
                    PolicyDocument:
                        Version: 2012-10-17
                        Statement:
                            - Effect: Allow
                              Action:
                                  - polly:SynthesizeSpeech
                              Resource: '*'
                  - PolicyName: LexPost
                    PolicyDocument:
                        Version: 2012-10-17
                        Statement:
                            - Effect: Allow
                              Action:
                                  - lex:PostText
                                  - lex:PostContent
                                  - lex:DeleteSession
                                  - lex:PutSession
                              Resource:
                                !If
                                  - NeedsBot
                                  - !Sub "arn:aws:lex:${AWS::Region}:${AWS::AccountId}:bot:${Bot.Outputs.BotName}:*"
                                  - !Sub "arn:aws:lex:${AWS::Region}:${AWS::AccountId}:bot:${BotName}:*"

    ##########################################################################
    # deployment using a pipeline
    ##########################################################################
    S3ServerAccessLogs:
      Type: AWS::S3::Bucket
      DeletionPolicy: Retain
      Properties:
        VersioningConfiguration:
          Status: Enabled
        AccessControl: "LogDeliveryWrite"
        BucketEncryption:
          ServerSideEncryptionConfiguration:
            - ServerSideEncryptionByDefault:
                SSEAlgorithm: AES256

    # Artifact Bucket used by CodePipeline and CodBuild
    ArtifactStore:
        Type: AWS::S3::Bucket
        DeletionPolicy: Retain
        Properties:
            VersioningConfiguration:
                Status: Enabled
            LoggingConfiguration:
                DestinationBucketName: !Ref S3ServerAccessLogs
                LogFilePrefix: "artifactstore/"
            BucketEncryption:
              ServerSideEncryptionConfiguration:
                - ServerSideEncryptionByDefault:
                    SSEAlgorithm: AES256

    # Bucket where the web app is deployed
    WebAppBucket:
        Type: AWS::S3::Bucket
        DeletionPolicy: Retain
        Properties:
            WebsiteConfiguration:
                IndexDocument: index.html
            VersioningConfiguration:
                Status: Enabled
            LoggingConfiguration:
                DestinationBucketName: !Ref S3ServerAccessLogs
                LogFilePrefix: "webappbucket/"
            BucketEncryption:
              ServerSideEncryptionConfiguration:
                - ServerSideEncryptionByDefault:
                    SSEAlgorithm: AES256
                
    WebAppBucketOriginAccessIdentity:
        Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
        Properties:
          CloudFrontOriginAccessIdentityConfig:
            Comment: !Sub "access-identity-${WebAppBucket}"

    WebAppBucketBucketPolicy:
        Type: "AWS::S3::BucketPolicy"
        Properties:
          Bucket:
            Ref: "WebAppBucket"
          PolicyDocument:
            Statement:
              - Effect: "Allow"
                Action:
                  - "s3:GetObject"
                Resource:
                  - !Sub "arn:aws:s3:::${WebAppBucket}/*"
                Principal:
                  CanonicalUser: !GetAtt WebAppBucketOriginAccessIdentity.S3CanonicalUserId

  # Bucket for CloudFrontDistributionLogs
    LexWebUiCloudFrontDistributionLogsBucket:
        Type: AWS::S3::Bucket
        DeletionPolicy: Retain
        Properties:
          VersioningConfiguration:
            Status: Enabled
          BucketEncryption:
            ServerSideEncryptionConfiguration:
              - ServerSideEncryptionByDefault:
                  SSEAlgorithm: AES256

    #cloudfront distribution            
    LexWebUiDistribution:
        Type: AWS::CloudFront::Distribution
        DependsOn:
        - WebAppBucket
        - LexWebUiCloudFrontDistributionLogsBucket
        Properties:
          DistributionConfig:
            Origins:
            - DomainName: !Sub "${WebAppBucket}.s3.${AWS::Region}.amazonaws.com"
              S3OriginConfig:
                OriginAccessIdentity: !Sub "origin-access-identity/cloudfront/${WebAppBucketOriginAccessIdentity}"
              Id: webuiorigin
            Enabled: 'true'
            Comment: cloudfront distribution for lex-web-ui
            DefaultRootObject: index.html
            Logging:
              Bucket: !GetAtt LexWebUiCloudFrontDistributionLogsBucket.DomainName
              IncludeCookies: true
              Prefix: "lexwebui/"
            CustomErrorResponses:
              # Send errors to index file
              # TODO move TTL to mapping or parameter
              - ErrorCachingMinTTL: 300
                ErrorCode: 403
                ResponseCode: 200
                ResponsePagePath: /index.html
              - ErrorCachingMinTTL: 300
                ErrorCode: 404
                ResponseCode: 200
                ResponsePagePath: /index.html
            DefaultCacheBehavior:
              AllowedMethods:
                - GET
                - HEAD
                - OPTIONS
              CachedMethods:
                - GET
                - HEAD
                - OPTIONS
              Compress: true
              TargetOriginId: webuiorigin
              ForwardedValues:
                QueryString: true
                Headers:
                  - Origin
                  - Access-Control-Request-Method
                  - Access-Control-Request-Headers
              ViewerProtocolPolicy: redirect-to-https
            ViewerCertificate:
              CloudFrontDefaultCertificate: true
            HttpVersion: http2
            IPV6Enabled: true


    # Bucket where the test parent page is hosted
    ParentPageBucket:
        Type: AWS::S3::Bucket
        Condition: NeedsWebAppParentOrigin
        DeletionPolicy: Retain
        Properties:
            WebsiteConfiguration:
                IndexDocument: index.html
            VersioningConfiguration:
                Status: Enabled
            LoggingConfiguration:
                DestinationBucketName: !Ref S3ServerAccessLogs
                LogFilePrefix: "parentpagebucket/"
            BucketEncryption:
              ServerSideEncryptionConfiguration:
                - ServerSideEncryptionByDefault:
                    SSEAlgorithm: AES256

    CodeBuild:
        Type: AWS::CodeBuild::Project
        Properties:
            Name: !Ref CodeBuildName
            Description: Used to build the Lex Web UI
            ServiceRole: !GetAtt CodeBuildRole.Arn
            TimeoutInMinutes: 30
            Artifacts:
                Type: CODEPIPELINE
            Environment:
                Type: LINUX_CONTAINER
                Image: aws/codebuild/nodejs:10.14.1
                ComputeType: BUILD_GENERAL1_SMALL
                EnvironmentVariables:
                    - Name: BUILD_TYPE
                      Value: full
                    - Name: POOL_ID
                      Value: !If
                      - NeedsCognito
                      - !Ref CognitoIdentityPool
                      - !Ref CognitoIdentityPoolId
                    - Name: APP_USER_POOL_CLIENT_ID
                      Value: !Ref CognitoUserPoolClient
                    - Name: APP_USER_POOL_NAME
                      Value: !Ref CognitoUserPool
                    - Name: WEBAPP_BUCKET
                      Value: !Ref WebAppBucket
                    - Name: AWS_DEFAULT_REGION
                      Value: !Sub "${AWS::Region}"
                    - Name: BOT_NAME
                      Value: !Ref BotName
                    - Name: PARENT_ORIGIN
                      Value: !If
                        - NeedsWebAppParentOrigin
                        - !Sub "https://${LexWebUiDistribution.DomainName}"
                        - !Ref WebAppParentOrigin
                    - Name: IFRAME_ORIGIN
                      Value: !Sub "https://${LexWebUiDistribution.DomainName}"
                    - Name: NEGATIVE_INTENT
                      Value: !Ref WebAppConfNegativeFeedback
                    - Name: POSITIVE_INTENT
                      Value: !Ref WebAppConfPositiveFeedback
                    - Name: HELP_INTENT
                      Value: !Ref WebAppConfHelp

            Source:
                Type: CODEPIPELINE
                BuildSpec: !Sub |
                    version: 0.1
                    phases:
                        install:
                            commands:
                                - npm install -g n
                                - n stable
                                - npm update -g npm
                                - make install-deps
                        pre_build:
                            commands:
                                - aws configure set region "$AWS_DEFAULT_REGION"
                                - make config
                        build:
                            commands:
                                - make build
                        post_build:
                            commands:
                                - make sync-website

    CodeBuildRole:
        Type: AWS::IAM::Role
        Properties:
            Path: /
            AssumeRolePolicyDocument:
                Version: 2012-10-17
                Statement:
                    - Principal:
                          Service:
                              - codebuild.amazonaws.com
                      Effect: Allow
                      Action:
                          - sts:AssumeRole
            Policies:
                - PolicyName: CloudWatchLogsCodeBuild
                  PolicyDocument:
                      Version: 2012-10-17
                      Statement:
                          - Effect: Allow
                            Action:
                                - logs:CreateLogGroup
                                - logs:CreateLogStream
                                - logs:PutLogEvents
                            Resource:
                                - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${CodeBuildName}"
                                - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${CodeBuildName}:*"
                - PolicyName: S3ReadWrite
                  PolicyDocument:
                      Version: 2012-10-17
                      Statement:
                          - Effect: Allow
                            Action:
                                - s3:Get*
                                - s3:Head*
                                - s3:List*
                                - s3:CreateMultipartUpload
                                - s3:CompleteMultipartUpload
                                - s3:AbortMultipartUpload
                                - s3:CopyObject
                                - s3:PutObject*
                                - s3:DeleteObject*
                                - s3:Upload*
                            Resource:
                                - !Sub "arn:aws:s3:::${ArtifactStore}"
                                - !Sub "arn:aws:s3:::${ArtifactStore}/*"
                                - !Sub "arn:aws:s3:::${WebAppBucket}"
                                - !Sub "arn:aws:s3:::${WebAppBucket}/*"
                                - !If
                                    - NeedsWebAppParentOrigin
                                    - !Sub "arn:aws:s3:::${ParentPageBucket}"
                                    - !Ref AWS::NoValue
                                - !If
                                    - NeedsWebAppParentOrigin
                                    - !Sub "arn:aws:s3:::${ParentPageBucket}/*"
                                    - !Ref AWS::NoValue

    CodePipeline:
        Type: AWS::CodePipeline::Pipeline
        Properties:
            Name: !Ref CodePipelineName
            ArtifactStore:
                Type: S3
                Location: !Ref ArtifactStore
            RoleArn: !GetAtt CodePipelineRole.Arn
            Stages:
                - Name: Source
                  Actions:
                      - Name: Source
                        InputArtifacts: []
                        ActionTypeId:
                            Category: Source
                            Owner: ThirdParty
                            Version: 1
                            Provider: GitHub
                        OutputArtifacts:
                            - Name: SourceOutput
                        Configuration:
                            Owner: !Ref GitHubOwner
                            Repo: !Ref GitHubRepo
                            Branch: !Ref GitHubBranch
                            PollForSourceChanges: false
                            OAuthToken: !Ref GitHubOAuthToken
                        RunOrder: 1
                - Name: BuildDeploy
                  Actions:
                      - Name: WebApp
                        InputArtifacts:
                            - Name: SourceOutput
                        ActionTypeId:
                            Category: Build
                            Owner: AWS
                            Version: 1
                            Provider: CodeBuild
                        Configuration:
                            ProjectName: !Ref CodeBuild
                        RunOrder: 1
    # 'GithubWebhook' satisfies two requirements:
    # -- Means that updates are pushed from GitHub, rather than AWS having to poll
    # -- Means we can filter for required changes

    GithubWebhook: 
        Type: 'AWS::CodePipeline::Webhook' 
        Properties:
            AuthenticationConfiguration: 
              SecretToken: !Ref GitHubOAuthToken
            Filters: 
            - JsonPath: "$.ref" 
              MatchEquals: refs/heads/{Branch} 
            Authentication: GITHUB_HMAC 
            TargetPipeline: !Ref CodePipeline
            TargetAction: Source 
            TargetPipelineVersion: !GetAtt CodePipeline.Version
            RegisterWithThirdParty: 'true'        

    CodePipelineRole:
        Type: AWS::IAM::Role
        Properties:
            Path: /
            AssumeRolePolicyDocument:
                Version: 2012-10-17
                Statement:
                    - Principal:
                          Service:
                              - codepipeline.amazonaws.com
                      Effect: Allow
                      Action:
                          - sts:AssumeRole
            Policies:
                - PolicyName: S3ReadWrite
                  PolicyDocument:
                      Version: 2012-10-17
                      Statement:
                          - Effect: Allow
                            Action:
                                - s3:Get*
                                - s3:Head*
                                - s3:List*
                                - s3:CreateMultipartUpload
                                - s3:CompleteMultipartUpload
                                - s3:AbortMultipartUpload
                                - s3:CopyObject
                                - s3:PutObject*
                                - s3:DeleteObject*
                                - s3:Upload*
                            Resource:
                                - !Sub "arn:aws:s3:::${ArtifactStore}"
                                - !Sub "arn:aws:s3:::${ArtifactStore}/*"
                - PolicyName: CodeBuildStart
                  PolicyDocument:
                      Version: 2012-10-17
                      Statement:
                          - Effect: Allow
                            Action:
                                - codebuild:BatchGetBuilds
                                - codebuild:StartBuild
                            Resource: !GetAtt CodeBuild.Arn

    # custom resource to cleanup S3 buckets
    S3Cleanup:
        Type: Custom::S3Cleanup
        Condition: ShouldCleanupBuckets
        Properties:
            ServiceToken: !GetAtt S3CleanupLambda.Arn
            Buckets:
                - !Ref ArtifactStore
                - !Ref WebAppBucket
                - !If
                    - NeedsWebAppParentOrigin
                    - !Ref ParentPageBucket
                    - !Ref AWS::NoValue

    # Lambda function for custom resource
    S3CleanupLambda:
        Type: AWS::Lambda::Function
        Condition: ShouldCleanupBuckets
        Properties:
            Code:
                S3Bucket: !Ref BootstrapBucket
                S3Key: !Sub "${BootstrapPrefix}/custom-resources.zip"
            Handler: s3-cleanup.handler
            Role: !GetAtt S3CleanupLambdaRole.Arn
            Runtime: python2.7
            Timeout: 120
            TracingConfig:
                Mode: Active

    S3CleanupLambdaRole:
        Type: AWS::IAM::Role
        Condition: ShouldCleanupBuckets
        Properties:
            Path: /
            AssumeRolePolicyDocument:
                Version: 2012-10-17
                Statement:
                    - Principal:
                          Service:
                              - lambda.amazonaws.com
                      Effect: Allow
                      Action:
                          - sts:AssumeRole
            Policies:
                - PolicyName: LogsForLambda
                  PolicyDocument:
                      Version: 2012-10-17
                      Statement:
                          - Effect: Allow
                            Action:
                                - logs:CreateLogGroup
                                - logs:CreateLogStream
                                - logs:PutLogEvents
                            Resource:
                                - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"
                                - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*:*"
                - PolicyName: S3All
                  PolicyDocument:
                      Version: 2012-10-17
                      Statement:
                          - Effect: Allow
                            Action:
                                - s3:*
                            Resource:
                                - !Sub "arn:aws:s3:::${ArtifactStore}"
                                - !Sub "arn:aws:s3:::${ArtifactStore}/*"
                                - !Sub "arn:aws:s3:::${WebAppBucket}"
                                - !Sub "arn:aws:s3:::${WebAppBucket}/*"
                                - !If
                                    - NeedsWebAppParentOrigin
                                    - !Sub "arn:aws:s3:::${ParentPageBucket}"
                                    - !Ref AWS::NoValue
                                - !If
                                    - NeedsWebAppParentOrigin
                                    - !Sub "arn:aws:s3:::${ParentPageBucket}/*"
                                    - !Ref AWS::NoValue
                - PolicyName: XRay
                  PolicyDocument:
                      Version: 2012-10-17
                      Statement:
                          - Effect: Allow
                            Action:
                                - xray:PutTraceSegments
                                - xray:PutTelemetryRecords
                            Resource: "*"
                - PolicyName: AllowVPCSupport
                  PolicyDocument:
                      Version: 2012-10-17
                      Statement:
                          - Effect: Allow
                            Action:
                                - ec2:DescribeNetworkInterfaces
                                - ec2:CreateNetworkInterface
                                - ec2:DeleteNetworkInterface
                            Resource: "*"    

    CognitoUserPoolDomain:
        Type: Custom::CognitouserPoolDomain
        Condition: NeedsCognito
        Properties:
          ServiceToken: !GetAtt CognitoUserPoolDomainFunction.Arn

    CognitoUserPoolDomainFunction:
        Type: AWS::Lambda::Function
        Condition: NeedsCognito
        Properties:
          Handler: index.handler
          Role: !GetAtt CognitoUserPoolDomainExecutionRole.Arn
          Runtime: python2.7
          Timeout: 300
          TracingConfig:
            Mode: Active
          Code:
            ZipFile: !Sub |
              from __future__ import print_function
              import json
              import boto3
              import cfnresponse
              import time
              def handler(event, context):
                  print(json.dumps(event))
                  stackname = '${CleanStackName.CleanStackNameValue}'[0:50]
                  id = stackname + '${AWS::AccountId}'
                  id = id.lower().replace("cognito","")
                  print('final id: ' + id)
                  if (event["RequestType"] == "Delete"):
                      try:
                          deleteDomain(id)
                      except Exception as e:
                          print("Exception thrown: %s" % str(e))
                          pass
                  elif (event["RequestType"] == "Create"):
                      try:
                          name = createDomain(id)
                          print('name: ' + name)
                          fullname = name + '.auth.' + '${AWS::Region}' + '.amazoncognito.com'
                          print('fullname: ' + fullname)
                          updateCodeBuildEnvironment('${CodeBuildName}', fullname)
                      except Exception as e:
                          print("Exception thrown: %s" % str(e))
                          pass
                  else:
                      print("RequestType %s, nothing to do" % event["RequestType"])
                  time.sleep(30)  # pause for CloudWatch logs
                  print('Done')
                  responseData={"domainid":id}
                  try:
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData, id)
                  except Exception as e:
                      print("Exception thrown in cfnresponse: %s" % str(e))
                      pass
              def deleteDomain(stackName):
                  normalized = stackName.lower()
                  print("Deleting domain %s" % normalized)
                  client = boto3.client('cognito-idp')
                  response = client.delete_user_pool_domain(
                      Domain=normalized,
                      UserPoolId='${CognitoUserPool}'
                  )
                  return response
              def createDomain(stackName):
                  normalized = stackName.lower()
                  print("Creating domain %s" % normalized)
                  client = boto3.client('cognito-idp')
                  response = client.create_user_pool_domain(
                      Domain=normalized,
                      UserPoolId='${CognitoUserPool}'
                  )
                  return normalized
              def updateCodeBuildEnvironment(projectname, domainname):
                  print("Updating codebuild project %s" % projectname)
                  client = boto3.client('codebuild')
                  data = client.batch_get_projects(
                  names=[
                        projectname
                      ]
                  )
                  projects = data.get('projects')
                  project = projects[0]
                  environment = project.get('environment')
                  variables = environment.get('environmentVariables')
                  updated = False
                  for element in variables :
                      if element.get('name') == 'APP_DOMAIN_NAME':
                          element.update({'value': domainname})
                          updated = True
                  if not updated:
                      item = {
                          'name': 'APP_DOMAIN_NAME',
                          'value': domainname,
                          'type': 'PLAINTEXT'
                      }
                      variables.append(item)
                  response = client.update_project(
                      name=projectname,
                      environment=environment
                  )
                  response = client.start_build(
                      projectName=projectname
                  )
                  return response

    CognitoUserPoolDomainExecutionRole:
        Type: AWS::IAM::Role
        Condition: NeedsCognito
        Properties:
          Path: /
          AssumeRolePolicyDocument:
            Version: 2012-10-17
            Statement:
              - Principal:
                  Service:
                    - lambda.amazonaws.com
                Effect: Allow
                Action:
                  - sts:AssumeRole
          Policies:
              - PolicyName: LogsForLambda
                PolicyDocument:
                    Version: 2012-10-17
                    Statement:
                        - Effect: Allow
                          Action:
                              - logs:CreateLogGroup
                              - logs:CreateLogStream
                              - logs:PutLogEvents
                          Resource:
                              - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"
                              - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*:*"
              - PolicyName: CognitoAuth
                PolicyDocument:
                    Version: 2012-10-17
                    Statement:
                        - Effect: Allow
                          Action:
                              - cognito-sync:*
                              - cognito-identity:*
                              - cognito-idp:*
                          Resource:
                              - !Sub "arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${CognitoUserPool}"
              - PolicyName: CodeBuildUpdate
                PolicyDocument:
                    Version: 2012-10-17
                    Statement:
                        - Effect: Allow
                          Action:
                              - codebuild:BatchGetProjects
                              - codebuild:UpdateProject
                              - codebuild:StartBuild
                          Resource:
                              - !Sub "arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:project/${CodeBuildName}"
              - PolicyName: XRay
                PolicyDocument:
                    Version: 2012-10-17
                    Statement:
                        - Effect: Allow
                          Action:
                              - xray:PutTraceSegments
                              - xray:PutTelemetryRecords
                          Resource:
                              - "*"
              - PolicyName: AllowVPCSupport
                PolicyDocument:
                    Version: 2012-10-17
                    Statement:
                        - Effect: Allow
                          Action:
                              - ec2:DescribeNetworkInterfaces
                              - ec2:CreateNetworkInterface
                              - ec2:DeleteNetworkInterface
                          Resource: "*"

    CognitoUserPoolUpdates:
        Type: Custom::CognitoUserPoolUpdates
        Condition: NeedsCognito
        Properties:
          ServiceToken: !GetAtt CognitoUserPoolUpdatesFunction.Arn

    CognitoUserPoolUpdatesFunction:
        Type: AWS::Lambda::Function
        Condition: NeedsCognito
        Properties:
          Handler: index.handler
          Role: !GetAtt CognitoUserPoolDomainExecutionRole.Arn
          Runtime: python2.7
          Environment:
            Variables:
              CognitoWebAppUrl: !If [NeedsWebAppParentOrigin, !Sub "https://${LexWebUiDistribution.DomainName}", !Ref WebAppParentOrigin]
          Timeout: 300
          TracingConfig:
            Mode: Active
          Code:
            ZipFile: !Sub |
              from __future__ import print_function
              import os
              import json
              import boto3
              import cfnresponse
              import time
              def handler(event, context):
                  print(json.dumps(event))
                  if (event["RequestType"] == "Create"):
                      try:
                          updatePool("${CleanStackName.CleanStackNameValue}")
                      except Exception as e:
                          print("Exception thrown: %s" % str(e))
                          pass
                  else:
                      print("RequestType %s, nothing to do" % event["RequestType"])
                  time.sleep(30)  # pause for CloudWatch logs
                  print('Done')
                  responseData={"Data":"OK"}
                  try:
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)
                  except Exception as e:
                      print("Exception thrown in cfnresponse: %s" % str(e))
                      pass
              def updatePool(stackName):
                  normalized = stackName.lower()
                  print("Updating Pool domain %s" % normalized)
                  client = boto3.client('cognito-idp')
                  response = client.update_user_pool_client(
                      UserPoolId='${CognitoUserPool}',
                      ClientId='${CognitoUserPoolClient}',
                      ClientName=normalized,
                      RefreshTokenValidity=365,
                      CallbackURLs=[
                          os.environ['CognitoWebAppUrl']+'${WebAppPath}?loggedin=yes',
                          os.environ['CognitoWebAppUrl']+'/index.html?loggedin=yes',
                          os.environ['CognitoWebAppUrl']+'/parent.html?loggedin=yes',
                      ],
                      LogoutURLs=[
                          os.environ['CognitoWebAppUrl']+'${WebAppPath}?loggedout=yes',
                          os.environ['CognitoWebAppUrl']+'/index.html?loggedout=yes',
                          os.environ['CognitoWebAppUrl']+'/parent.html?loggedout=yes',
                      ],
                      SupportedIdentityProviders=[
                              'COGNITO',
                      ],
                      AllowedOAuthFlows=[
                          'code',
                      ],
                      AllowedOAuthScopes=[
                          'phone', 'email', 'openid', 'profile'
                      ],
                      AllowedOAuthFlowsUserPoolClient=True
                  )

    CleanStackNameExecutionRole:
        Type: AWS::IAM::Role
        Condition: NeedsCognito
        Properties:
          Path: /
          AssumeRolePolicyDocument:
            Version: 2012-10-17
            Statement:
              - Principal:
                  Service:
                    - lambda.amazonaws.com
                Effect: Allow
                Action:
                  - sts:AssumeRole
          Policies:
            - PolicyName: LogsForLambda
              PolicyDocument:
                Version: 2012-10-17
                Statement:
                  - Effect: Allow
                    Action:
                      - logs:CreateLogGroup
                      - logs:CreateLogStream
                      - logs:PutLogEvents
                    Resource:
                      - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"
                      - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*:*"
            - PolicyName: XRay
              PolicyDocument:
                Version: 2012-10-17
                Statement:
                  - Effect: Allow
                    Action:
                      - xray:PutTraceSegments
                      - xray:PutTelemetryRecords
                    Resource: "*"
            - PolicyName: AllowVPCSupport
              PolicyDocument:
                Version: 2012-10-17
                Statement:
                  - Effect: Allow
                    Action:
                      - ec2:DescribeNetworkInterfaces
                      - ec2:CreateNetworkInterface
                      - ec2:DeleteNetworkInterface
                    Resource: "*"

    CleanStackName:
        DependsOn: CleanStackNameExecutionRole
        Type: Custom::CleanStackName
        Condition: NeedsCognito
        Properties:
          ServiceToken: !GetAtt CleanStackNameFunction.Arn

    CleanStackNameFunction:
        Type: AWS::Lambda::Function
        Condition: NeedsCognito
        Properties:
          Handler: index.handler
          Role: !GetAtt CleanStackNameExecutionRole.Arn
          Runtime: python2.7
          Timeout: 300
          TracingConfig:
            Mode: Active
          Code:
            ZipFile: !Sub |
              from __future__ import print_function
              import json
              import boto3
              import cfnresponse
              import time
              def handler(event, context):
                  print(json.dumps(event))
                  if (event["RequestType"] == "Delete"):
                      responseData={"Data":"OK"}
                      try:
                          cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)
                      except Exception as e:
                          print("Exception thrown in cfnresponse: %s" % str(e))
                          pass
                  else:
                      val = enforceSyntax("${AWS::StackName}")
                      time.sleep(10)  # pause for CloudWatch logs
                      responseData={"Data":"OK","CleanStackNameValue":val}
                      try:
                          cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)
                      except Exception as e:
                          print("Exception thrown in cfnresponse: %s" % str(e))
                          pass
              def enforceSyntax(val):
                  badChars=['0','1','2','3','4','5','6','7','8','9','-']
                  goodChars=['a','b','c','d','e','f','g','h','i','j','k']
                  i=0
                  res = val
                  for b in badChars:
                      res = res.replace(b,goodChars[i])
                      i +=1
                  return res  


Outputs:

    PipelineName:
        Value: !Ref CodePipeline
        Description: Name of CodePipeline pipeline

    WebAppUrl:
        Value: !Sub "https://${LexWebUiDistribution.DomainName}/index.html"
        Description: URL of the web application

    WebAppBase:
        Value: !Sub "https://${LexWebUiDistribution.DomainName}"
        Description: Base url portion of the web application

    WebAppDomainName:
        Value: !Sub "${LexWebUiDistribution.DomainName}"
        Description: DomainName of the web application

    ParentPageUrl:
        Value: !Sub "https://${LexWebUiDistribution.DomainName}/parent.html"
        Description: URL of the sample parent page
        Condition: NeedsWebAppParentOrigin

    LoaderScriptUrl:
        Value: !Sub "https://${LexWebUiDistribution.DomainName}/lex-web-ui-loader.min.js"
        Description: URL of the loader script
        Condition: NeedsWebAppParentOrigin

    SnippetUrl:
        Value: !Sub "https://${LexWebUiDistribution.DomainName}/iframe-snippet.html"
        Description: URL of a page showing the snippet to load the chatbot UI as an iframe
        Condition: NeedsWebAppParentOrigin

    BotName:
        Condition: NeedsBot
        Description: >
            Name of the Lex bot created by the stack
        Value: !GetAtt Bot.Outputs.BotName

    PipelineUrl:
        Description: >
            Monitor the pipeline URL to see when the application has been fully
            built and deployed.
        Value: !Sub "https://console.aws.amazon.com/codepipeline/home?region=${AWS::Region}#/view/${CodePipeline}"

    CognitoIdentityPoolId:
        Condition: NeedsCognito
        Description: Cognito Identity Pool Id
        Value: !Ref CognitoIdentityPool
